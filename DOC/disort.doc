 ***********************************************************************

     Documentation File for 'DISORT', A Discrete Ordinates Radiative
   Transfer Fortran77 Program for a Multi-Layered Plane-Parallel Medium
              ( Do NOT run under old Fortran66 compilers )

                        Version 1.1, Jan 1993

 ***********************************************************************

 Changes from original version issued in 1988 are mainly cosmetic,
 consisting of small bug fixes (many found by users), improvements
 in output formatting, and so on.

 NOTE on TAB characters:  In an effort to conserve space, this file
			  contains many TAB characters (ASCII 09).
			  Each TAB represents 8 spaces, the default
			  on many systems.  In conversion to other
			  systems (esp. IBM EBCDIC) and in transmission
			  across networks, these sometimes get changed
			  to strange characters like a semicolon;  in
			  order to identify this problem, the following
			  is a TAB (between single quotes): '	'.
			  If the TABs cause a problem, just use any
			  good text editor or the Unix 'expand' tool 
			  to replace them with spaces.

 As distributed on microcomputer diskette, this program consists
 of the following files :

 *** DISORT.f  :  The user entry point (subroutine DISORT), and
		    most of the modules it calls.  All modules are
		    in single precision except for the eigenvalue
		    routine ASYMTX and the quadrature angles routine
		    QGAUSN.

 *** DISOTEST.f:  A main program for checking DISORT on a
		    comprehensive set of test problems.
		    
 *** DISOTEST.doc:  Documentation for DISOTEST.f
 
 *** DISOTEST.out:  Output from running DISOTEST.f

 *** CRAY.MOD  :  Instructions for modifying DISORT.f to be
		    entirely single precision.

 *** R1MACH.f, D1MACH.f:  Routines for returning machine constants

 *** LINPAK.f  :  Routines from the linear-equation-solving
		    public-domain packages LINPACK and BLAS
		    (available at most computer sites). Included
		    only to make package self-contained.  Slightly
		    modified from originals by upgrading to
		    FORTRAN77.

 *** ErrPack.f    Error-handling routines.


 NOTE:  In some versions of these files, the six spaces at the 
 	beginning of Fortran statements were replaced by
	TAB characters (ASCII 09) to allow the programs to fit 
	on 360K diskettes.  Any good text editor, or the Unix 
	'expand' or 'tr' commands, can convert them back to spaces.

 The default version of DISORT is in single precision, except for
 the eigenvalue/vector and Gauss quadrature rule computations,
 which are done in double precision.  (The IBM and VAX computers
 on which DISORT was developed carried only 7 significant
 digits in single precision -- frequently too inaccurate for the
 eigenvalue and Gauss problems.)  Running DISORT in this way
 usually gives results precise to at least 2-3 significant digits,
 as the test problems reveal, although for non-absorbing optically
 thin media with highly asymmetric phase functions the precision can
 occasionally fall to 1 significant digit.

 Some computers with 7 significant digit single precision have
 an 'autodoubling' compiler option (which automatically promotes all
 single precision constants, variables and arithmetic to double
 precision, but leaves double precision computations as is).  The
 default version of DISORT can be run in double precision by
 turning this option on and by changing all occurrences of R1MACH
 to D1MACH (a reverse change-all will not restore the code to its
 default form, however, since both R1MACH and D1MACH are used in
 that form).  This is how the 'correct' answers to the test problems
 were generated.

 NOTE == There are two versions of LINPACK maintained as object
 (already compiled) code at most computer centers, one in single
 precision (routines begin with 'S') and one in double
 precision (routines begin with 'D').  DISORT calls the 'S'
 versions.  If the facility LINPACK rather than our file
 LINPAK.f is to be used in running DISORT in double precision,
 change the first letters of SGBCO, SGBFA, SGBSL, SGEFA, SGECO,
 SGESL to 'D'.  (The user is encouraged to employ the computer
 center LINPACK in place of ours, because many centers have
 optimized LINPACKs, as for example on CRAY machines with their
 super-vector-speed LINPACK in 'libsci'.)

 On computers with 14 significant digit single precision, DISORT
 can (and should) be run in single precision;  modifications
 necessary to do so are listed in the file CRAY.MOD.

 Whatever precision DISORT is run in, it will require both R1MACH
 and D1MACH.  These are standard routines at most computer centers.
 They must be adapted to the user's particular computer as directed
 by comment statements therein.

 DISORT defines a considerable number of local arrays, whose default
 sizes are rather large to accommodate the test problems.  The size
 of these arrays can be reduced by the user simply by altering the
 few PARAMETER statements (for MX...) just following the internal
 variable documentation in subroutine DISORT.  This can give a
 dramatic reduction in memory requirements for typical applications.
 
 As soon as Fortran-90 is available and stable, many important 
 improvements can be made:
 
 ** the built-in functions TINY, HUGE and EPSILON can replace all
    the R1MACH and D1MACH calls
 
 ** the local arrays can be dynamically allocated


 AUTHORS :

 Knut Stamnes and Collaborators (1980-82)
 Geophysical Institute
 University Of Alaska
 Fairbanks, Alaska 99701

 Si-Chee Tsay (1981-87)
 Dept. of Atmospheric Sciences
 Colorado State University
 Ft. Collins, CO 80523

 Warren Wiscombe (1985-89)
 NASA Goddard Space Flight Center
 Code 613
 Greenbelt, MD 20771

 Stuart Freidenreich (1986-87)
 NOAA Geophysical Fluid Dynamics Laboratory
 Princeton, NJ 08540

 Istvan Laszlo (1987-1988)
 Institute for Atmospheric Physics
 P.O. Box 39, H-1675
 Budapest, HUNGARY

 Teruyuki Nakajima (1988-89)
 Sendai, JAPAN

 Collaborators: cf. REFERENCES


 REFERENCES (cited in the programs using the acronyms shown) :

   DGIS: Devaux, C., Grandjean, P., Ishiguro, Y. and C.E. Siewert,
		1979: On Multi-Region Problems in Radiative Transfer,
		Astrophys. Space Sci. 62, 225-233

     GS: Garcia, R.D.M. and C.E. Siewert, 1985: Benchmark
		Results in Radiative Transfer, Transport Theory
		and Statistical Physics 14, 437-483

      L: Lenoble, J., ed., 1985:  Radiative Transfer in Absorbing
		and Scattering Atmospheres: Standard Computational
		Procedures, Deepak Publishing, Hampton, Virginia

     NT: Nakajima, T. and M. Tanaka, 1988:  Algorithms for Radiative
		Intensity Calculations in Moderately Thick Atmospheres
		Using a Truncation Approximation, J.Q.S.R.T. 40, 51-69

     OS: Ozisik, M. and S. Shouman, 1980:  Source Function
		Expansion Method for Radiative Transfer in a Two-Layer
		Slab, J.Q.S.R.T. 24, 441-449

     SS: Stamnes, K. and R. Swanson, 1981:  A New Look at
		the Discrete Ordinate Method for Radiative Transfer
		Calculations in Anisotropically Scattering
		Atmospheres, J. Atmos. Sci. 38, 387-399

     SD: Stamnes, K. and H. Dale, 1981: A New Look at the
		Discrete Ordinate Method for Radiative Transfer
		Calculations in Anisotropically Scattering
		Atmospheres. II: Intensity Computations,
		J. Atmos. Sci. 38, 2696-2706

     S1: Stamnes, K., 1982: On the Computation of Angular
		Distributions of Radiation in Planetary
		Atmospheres, J.Q.S.R.T. 28, 47-51

     S2: Stamnes, K., 1982: Reflection and Transmission by
		a Vertically Inhomogeneous Planetary Atmosphere,
		Planet. Space Sci. 30, 727-732

     SC: Stamnes, K. and P. Conklin, 1984: A New Multi-Layer
		Discrete Ordinate Approach to Radiative Transfer
		in Vertically Inhomogeneous Atmospheres,
		J.Q.S.R.T. 31, 273-282

     SW: Sweigart, A., 1970: Radiative Transfer in Atmospheres
		Scattering According to the Rayleigh Phase Function
		with Absorption, The Astrophysical Journal
		Supplement Series 22, 1-80

   STWJ: Stamnes, K., S.C. Tsay, W. Wiscombe and K. Jayaweera:
		A Numerically Stable Algorithm for
		Discrete-Ordinate-Method Radiative Transfer in
		Multiple Scattering and Emitting Layered Media,
		Appl. Opt. (June, 1988)

   STWL: Stamnes, K., S.C. Tsay, W. Wiscombe and I. Laszlo:
		A General-Purpose Numerically Stable Computer
		Code for Discrete-Ordinate-Method Radiative
		Transfer in Scattering and Emitting Layered Media,
		to appear as NASA report (1990)

VH1,VH2: Van de Hulst, H.C., 1980: Multiple Light Scattering,
		Tables, Formulas and Applications, Volumes 1 and 2,
		Academic Press, New York.

      W: Wiscombe, W., 1977:  The Delta-M Method: Rapid Yet
		Accurate Radiative Flux Calculations, J. Atmos. Sci.
		34, 1408-1422

 +---------------------------------------------------------------------+

				  PREFACE

 DISORT was designed to be the most general and versatile
 plane-parallel radiative transfer program available, applicable
 to problems from the ultraviolet to the radar regions of the
 electromagnetic spectrum.  As such, it has a rather large list
 of input variables.  This list is more easily comprehended if
 several simple facts are borne in mind :

 * there is one vertical coordinate, measured in optical depth
   units, and two angular coordinates, one polar and one azimuthal;

 * the layers and polar angles necessary for computational
   purposes are entirely decoupled from the levels
   and polar angles at which the user desires results.

 The computational layering is usually constrained by the problem,
 in the sense that each computational layer must be reasonably
 homogeneous and not have a temperature variation of more than
 about 5-10 K across it (if thermal sources are considered).
 For example, a clear layer overlain by a cloud overlain by a
 dusty layer would suggest three computational layers.

 Computational polar angles ('streams') are constrained by the
 need for accuracy;  for example, 4 streams may be enough for
 accurate fluxes, while 16 streams or more may be necessary for
 accurate intensities.

 But the radiant quantities can be returned to the user at ANY
 level and ANY angle.  For example, the user may have picked 3
 computational layers and 16 streams, but he can then request
 intensities from only the middle of the 2nd layer, and only
 in the nadir direction.

 +---------------------------------------------------------------------+

 Developing a package such as this is a humbling experience.
 Every time we thought it was finally free of errors, further
 testing would reveal another.  What seemed only a 6-month project
 thus stretched into 3 years;  however, we think the result is worth
 the wait.  We believe this package to be freer of errors than
 any other similar package available today, and more full-featured
 to boot.

 Of course, we would be foolhardy to claim that a package as
 large and complex as this one is entirely error-free.  But we are
 confident that the remaining errors are subtle and unlikely to be
 encountered by the average user.  If you do find any errors,
 please report them to the authors, and we will do our best,
 time permitting, to find a solution.

 Also, we have a list of improvements to add in version 2, including
 mainly the Nakajima MS method for radically reducing the number of
 streams necessary to achieve a given accuracy in intensity.  But we
 would be interested in hearing from you as to what features you
 would most like to see added.

    B E W A R E :

 It is very easy to introduce errors into this package.  We did
 it many times ourselves in the course of developing it.  The most
 seemingly innocent, casual changes are fraught with danger. After a
 several-year debugging process, we are not prepared to find bugs
 that YOU introduce.  If you change the code, you are on your own.

+---------------------------------------------------------------------+

  INDEX CONVENTIONS ( for all variables described below ) :

     IU  :  for user polar angles (where intensities are computed)

     IQ  :  for computational polar angles ('quadrature angles')

     J   :  for user azimuthal angles

     K   :  for Legendre expansion coefficients

     LU  :  for user levels (where fluxes and intensities
            are computed)

     LC  :  for computational layers (each having a different
            single-scatter albedo and/or phase function)

    LEV  :  for computational levels

+---------------------------------------------------------------------+
               I N P U T    V A R I A B L E S
+---------------------------------------------------------------------+

  NOTE ON UNITS:

     The radiant output units are determined by the sources of
  radiation driving the problem.  Lacking thermal emission, the
  radiant output units ape the units of the sources FBEAM and
  FISOT.
  
     If thermal emission of any kind is included, subprogram PLKAVG
  determines the units.  The default PLKAVG has MKS units (W/sq m).
  Several users have rewritten PLKAVG to return just the temperature
  (i.e. their only executable statement in PLKAVG is PLKAVG = temp.),
  an approximation which is widely used in the long-wavelength limit;
  in this case, all radiant quantities are in degrees Kelvin.  If you
  rewrite PLKAVG, however, you must also put in new self-test
  'correct answers' in subroutine SLFTST (or bypass it).
  
      FBEAM and FISOT must have the same units as PLKAVG when
  thermal emission is present.


  ********  COMPUTATIONAL LAYER STRUCTURE  ********

   ===========================================================
   == NOTE:  LAYERS ARE NUMBERED FROM THE TOP BOUNDARY DOWN ==
   ===========================================================

  NLYR          Number of computational layers

  DTAUC(LC)     LC = 1 to NLYR,
		Optical depths of computational layers

  SSALB(LC)     LC = 1 to NLYR,
		Single-scatter albedos of computational layers

  PMOM(K,LC)    K = 0 to NSTR, LC = 1 to NLYR,
		Coefficients in Legendre polynomial expansions of
		phase functions for computational layers :

		  P(mu) = sum,K=0 to NSTR( (2K+1) PMOM(K) PK(mu) )

		WHERE    P = phase function
			mu = cos(scattering angle)
			PK = K-th Legendre polynomial

		The K = 0 coefficient should be unity (it will be
		reset to unity in any case).  Subroutine GETMOM,
		supplied in the test problem file, may be used to
		set coefficients in special cases such as
		Henyey-Greenstein scattering.


  TEMPER(LEV)   LEV = 0 to NLYR, Temperatures (K) of levels.
		(Note that temperature is specified at levels
		rather than for layers.)  Be sure to put top level
		temperature in TEMPER(0), not TEMPER(1).  Top and
		bottom level values do not need to agree with top and
		bottom boundary temperatures (i.e. 'slips' are allowed).
		Needed only if PLANK is TRUE.

  WVNMLO,       Wavenumbers (inv cm) of spectral interval of interest
    WVNMHI      ( used only for calculating Planck function ).
		Needed only if PLANK is TRUE.


  ********  USER LEVEL STRUCTURE  ********

  USRTAU     = FALSE, Radiant quantities are to be returned
			at boundary of every computational layer.

             = TRUE,  Radiant quantities are to be returned
			at user-specified optical depths, as follows:

			NTAU      Number of optical depths

			UTAU(LU)  LU = 1 to NTAU, user optical depths,
				  in increasing order.  UTAU(NTAU) must
				  be no greater than the total optical
				  depth of the medium.


  ********  COMPUTATIONAL POLAR ANGLE STRUCTURE  ********

  NSTR     : Number of computational polar angles to be used
		(= number of 'streams')  ( should be even and .GE. 2 ).
		In general, the more streams used, the more accurate
		the calculated fluxes and intensities will be.  However,
		there is no rigorous proof that increasing NSTR
		produces a monotonic decrease in error;  hence it is
		possible that small increases in NSTR may make
		the error slightly worse.  Large increases in NSTR
		(like doubling it), on the other hand, are almost
		certain to reduce the error.
		   For NSTR = 2 a two-stream program should be used
		instead, since DISORT is not optimized for this case
		except in the eigenvalue/vector routine.  Also,
		intensities will be totally unreliable for NSTR = 2,
		since they are just extrapolations from a single point.
		We only allow this case because of some consistency
		tests that we occasionally do.


  ********  USER POLAR ANGLE STRUCTURE  ********

  USRANG     = FALSE, Radiant quantities are to be returned
			at computational polar angles.  Also, UMU will
			return the cosines of the computational polar
			angles and NUMU will return their number
			( = NSTR).  UMU must be large enough to
			contain NSTR elements (cf. MAXUMU).

             = TRUE,  Radiant quantities are to be returned
			at user-specified polar angles, as follows:

			NUMU    No. of polar angles ( zero is a legal
				value only when ONLYFL = TRUE )

			UMU(IU) IU=1 to NUMU, cosines of output polar
				angles in increasing order -- starting
				with negative (downward) values (if
				any) and on through positive
				(upward) values;
				*** MUST NOT HAVE ANY ZERO VALUES ***

  ** NOTE **   If only fluxes are desired (ONLYFL = TRUE), then
  UMU  will return the computational polar angles if it is
  big enough to contain them (and NUMU will return the number of
  such angles).  This is so the user will know the angles that the
  returned azimuthally-averaged intensities refer to.  But a bad
  byproduct is that if the user flips between  ONLYFL = TRUE  and
  ONLYFL = FALSE  in the same run, his input UMU in USRANG = TRUE
  cases will be destroyed.  Thus, he should reset his input UMU
  values prior to every DISORT call. (For USRANG = FALSE cases
  there is no difficulty because UMU always returns computational
  angles.)


  *********  AZIMUTHAL ANGLE STRUCTURE  ***********

  NPHI     : Number of azimuthal angles at which to return
		intensities ( zero is a legal value only when
		ONLYFL = TRUE )

  PHI(J)   : J = 1 to NPHI, Azimuthal output angles (in degrees)
		( not used when ONLYFL = TRUE )


  *********  TOP AND BOTTOM BOUNDARY CONDITIONS  **********

  IBCND = 0 : General case: boundary conditions any combination of:
		* beam illumination from the top ( see FBEAM )
		* isotropic illumination from the top ( see FISOT )
		* thermal emission from the top ( see TEMIS, TTEMP )
		* internal thermal emission sources ( see TEMPER )
		* reflection at the bottom ( see LAMBER, ALBEDO, HL )
		* thermal emission from the bottom ( see BTEMP )

        = 1 : Return only albedo and transmissivity of the entire
		medium vs. incident beam angle; see S2 for details.
		(There can be no Planck sources in this case.)
		Technically, this is accomplished by assuming an
		isotropically-incident source of radiation at the
		top boundary, but this is of no real concern to the 
		user.
		
		   Many users overlook this option even though it
		turns out to be exactly what they need.

		   The only input variables considered in this case
		are NLYR, DTAUC, SSALB, PMOM, NSTR, USRANG, NUMU, UMU,
		ALBEDO, DELTAM, PRNT, HEADER and the array dimensions 
		(see below).  PLANK is assumed FALSE, LAMBER is assumed
		TRUE, and the bottom boundary can have any ALBEDO.  The
		sole output is ALBMED, TRNMED; since these are just
		ratios, this option does not use source strength
		information in FBEAM or FISOT.

		   UMU is interpreted as the array of beam
		angles in this case.  If USRANG = TRUE they must be
		positive and in increasing order, and will be returned
		this way;  internally, however, the negatives of the
		UMU's are added, so MAXUMU must be at least 2*NUMU.
		If USRANG = FALSE, UMU is returned as the NSTR/2
		positive quadrature angle cosines, in increasing
		order.


  FBEAM     : Intensity of incident parallel beam at top boundary.
		(same units as PLKAVG (default W/sq m) if thermal
		sources active, otherwise arbitrary units).
		Corresponding incident flux is UMU0 times FBEAM.
		Note that this is an infinitely wide beam, not a
		searchlight beam.

  UMU0      : Polar angle cosine of incident beam (positive).
		** WARNING **  If this is close to one of the
		computational polar angle cosines, serious ill-
		conditioning and a possible crash of DISORT might
		result;  hence this is treated as a fatal error.
		The problem can easily be corrected by changing
		NSTR. (Dithering the desired UMU0 -- adding a
		small number to it -- is not recommended.)
		The problem is most likely to occur when NSTR/2
		is odd and UMU0 = 0.5 ;  otherwise, it is almost
		impossible to hit a computational angle by chance.

  PHI0      : Azimuth angle of incident beam (0 to 360 degrees)

  FISOT     : Intensity of top-boundary isotropic illumination.
		(same units as PLKAVG (default W/sq m) if thermal
		sources active, otherwise arbitrary units).
		Corresponding incident flux is pi (3.14159...)
		times FISOT.

  LAMBER    : TRUE, isotropically reflecting bottom boundary.
		In this case must also specify :

		ALBEDO :  bottom-boundary albedo

	      FALSE, bidirectionally reflecting bottom boundary.
		In this case must also specify :

		HL(K) : K = 0 to NSTR.  Coefficients in Legendre-
			polynomial expansion of bottom bidirectional
			reflectivity, regarded as a function of the
			cosine of the angle between incident and
			reflected beams (as for P(mu), cf. PMOM).
			(NOTE:  if  HL(1) = HL(2) = ... = 0,
			then  HL(0)  becomes the albedo and
			the reflection becomes Lambertian.)

			** NOTE **  Flux albedos calculated from HL
			will be checked to be sure they lie between
			zero and one for all possible incidence
			angles.  (These flux albedos are exact and
			will only agree with the DISORT flux albedos
			in the limit as NSTR goes to infinity.)

  BTEMP     : Temperature of bottom boundary (K)  (bottom emissivity
		is calculated from ALBEDO or HL, so it need not
		be specified).
		Needed only if PLANK is TRUE.

  TTEMP     : Temperature of top boundary (K).
		Needed only if PLANK is TRUE.

  TEMIS     : Emissivity of top boundary.
		Needed only if PLANK is TRUE.


  **********  CONTROL FLAGS  **************

DELTAM  TRUE,  use delta-M method ( see Wiscombe, 1977 )
	FALSE, do not use delta-M method.
	In general, for a given number of streams, intensities and
	fluxes will be more accurate for phase functions with a
	large forward peak if DELTAM is set true.  Intensities
	close to the forward scattering direction will often
	be less accurate, however, so when primary interest
	centers in this so-called 'aureole region', DELTAM
	should be set FALSE.

PLANK   TRUE,  include thermal emission
	FALSE, ignore all thermal emission (saves computer time)
	( if PLANK = FALSE, it is not necessary to set any of
	the variables having to do with thermal emission )

ONLYFL  TRUE,   return fluxes, flux divergences, and mean
		intensities.  If U0U is big enough,
		i.e. if  MAXUMU.GE.NSTR, azimuthally-averaged
		intensities at the computational angles will
		also be returned, allowing the computation of
		higher moments of the intensity distribution.

        FALSE,  return fluxes, flux divergences, mean
		intensities, azimuthally averaged intensities
		(at the user angles) AND intensities.

ACCUR   Convergence criterion for azimuthal (Fourier cosine)
	series.  Will stop when the following occurs twice:
	largest term being added is less than ACCUR times
	total series sum.  (Twice because there are cases where
	terms are anomalously small but azimuthal series has
	not converged.)  Should be between 0 and 0.01 to avoid
	risk of serious non-convergence.  Has no effect on
	problems lacking a beam source, since azimuthal series
	has only one term in that case.

PRNT(L) Array of LOGICAL print flags causing the following prints:

		L	quantities printed
		--	------------------
		1	input variables (except PMOM)
		2	fluxes
		3	azimuthally-averaged intensities at user
			levels and computational polar angles
		4	azimuthally-averaged intensities at user
			levels and user polar angles
		5	intensities at user levels and angles
		6	planar transmissivity and planar albedo
			as a function solar zenith angle ( IBCND = 1 )
		7	phase function moments PMOM for each layer
			( only if PRNT(1) = TRUE, and only for layers
			with scattering )


HEADER   A 127- (or less) character header for prints, embedded in
         a DISORT banner;  setting HEADER = '' (the null string)
         will eliminate both the banner and the header, and this
         is the only way to do so (HEADER is not controlled by any
         of the PRNT flags);  HEADER can be used to mark the
         progress of a calculation in which DISORT is called
         many times, while leaving all other printing turned off.


  ******  ARRAY DIMENSIONS  *******

  MAXCLY   : Dimension of DTAUC, SSALB, TEMPER. 2nd dimension of
		PMOM.  Should be .GE. NLYR.
		Max. number of computational layers

  MAXULV   : Dimension of UTAU, RFLDIR, RFLDN, FLUP, DFDT.
		2nd dimension of U0U, UU.
		Should be .GE. NTAU if USRTAU=TRUE,
		.GE. NLYR+1 if USRTAU=FALSE.
		Max. number of user levels

  MAXUMU   : Dimension of UMU.  First dimension of  UU, U0U.
		Should be .GE. NUMU if USRANG=TRUE,
		.GE. NSTR if USRANG=FALSE.
		Max. number of user polar angles

  MAXCMU   : First dimension of  PMOM, HL.  Should be .GE. NSTR.
		Max. number of Legendre coefficients.
		Also max. number of computational polar angles

  MAXPHI   : Dimension of PHI. 3rd dimension of UU.
		Should be .GE. NPHI.
		Max. number of user azimuth angles.

+---------------------------------------------------------------------+
             O U T P U T    V A R I A B L E S
+---------------------------------------------------------------------+

  == NOTE ON UNITS ==

     If thermal sources are specified, fluxes come out in the units
  of PLKAVG, intensities in those units per steradian.  Otherwise,
  the flux and intensity units are determined by the units of
  FBEAM and FISOT.


  == NOTE ON ZEROING == 

     All output arrays are completely zeroed on each call to DISORT
  before being partially refilled with results.  This keeps garbage
  from accumulating in unused parts of the output arrays, and 
  keeps indefinites and Not-a-Numbers out of unset parts of the
  output arrays.  With the modern emphasis on array-processing,
  it is wise to keep entire arrays 'clean' even if only parts
  contain useful results.  Symbolic dumps also look cleaner.


  If USRTAU = FALSE :

	NTAU      Number of optical depths at which radiant
			quantities are evaluated ( = NLYR+1 )

	UTAU(LU)  LU = 1 to NTAU; optical depths, in increasing
			order, corresponding to boundaries of
			computational layers (see DTAUC)

  If USRANG = FALSE or (ONLYFL=TRUE and MAXUMU.GE.NSTR):

	NUMU      No. of computational polar angles at which radiant
			quantities are evaluated ( = NSTR )

	UMU(IU)   IU = 1 to NUMU; cosines of computational polar
			angles, in increasing order.  All positive if
			IBCND = 1, otherwise half negative (downward)
			and half positive (upward).

  RFLDIR(LU)    Direct-beam flux (without delta-M scaling)

  RFLDN(LU)     Diffuse down-flux (total minus direct-beam)
		(without delta-M scaling)

  FLUP(LU)      Diffuse up-flux

  DFDT(LU)      Flux divergence  d(net flux)/d(optical depth),
		where 'net flux' includes the direct beam
		(an exact result;  not from differencing fluxes)

  UAVG(LU)      Mean intensity (including the direct beam)

  UU(IU,LU,J)   Intensity ( if ONLYFL = FALSE;  zero otherwise )

  U0U(IU,LU)    If ONLYFL = FALSE, azimuthally-averaged intensity
		at user angles and user levels

		If ONLYFL = TRUE and MAXUMU.GE.NSTR,
		azimuthally-averaged intensity at computational
		(Gaussian quadrature) angles and user levels;
		the corresponding quadrature angle cosines are
		returned in UMU.  If MAXUMU.LT.NSTR, U0U will be
		zeroed, and UMU, NUMU will not be set.

   ALBMED(IU)   Albedo of the medium as a function of incident
		beam angle cosine UMU(IU)  (IBCND = 1 case only)

   TRNMED(IU)   Transmissivity of the medium as a function of incident
		beam angle cosine UMU(IU)  (IBCND = 1 case only)

** REMEMBER **  AZIMUTHALLY-AVERAGED INTENSITY = INTENSITY if :
		* there is no beam source, or
		* the beam is at polar angle zero, or
		* the viewing polar angle is zero, or
		* scattering is isotropic.
		Only a beam can establish a preferred azimuth since
		we explicitly exclude a preferred azimuth in the
		surface reflectivity.

+---------------------------------------------------------------------+

           >>>>>>>>>>  MODULES AND PURPOSES  <<<<<<<<<<<<<

 file DISORT.f :
 ---------------

	ALBTRN: manages the IBCND = 1 SPECIAL CASE
	ALTRIN: calculates azimuthally-averaged intensity (equal to
		albedo and/or transmissivity) at user angles
		for the IBCND = 1 special case
	ASYMTX: solves eigenfunction problem for real asymmetric matrix
		whose eigenvalues are known to be real
	CHEKIN: checks input variables for errors
	CMPINT: computes intensities at user levels and computational
		angles
	DREF  : exact flux albedo as a function of incident angle when a
		bottom-boundary bidirectional reflectivity is
		specified (LAMBER = FALSE)
	FLUXES: computes upward and downward fluxes
	LEPOLY: evaluates normalized associated Legendre polynomials
	PLKAVG: computes integral of Planck function over a
		wavenumber interval
	PRALTR: prints flux albedo and transmissivity of medium
		(IBCND = 1 special case)
	PRAVIN: prints azimuthally averaged intensities
	PRTINP: prints input variables
	PRTINT: prints intensities at user angles
	QGAUSN: computes Gaussian quadrature points and weights
	RATIO : computes ratio of two numbers in failsafe way
	SLFTST: sets input for self-test and checks for failure
	SETMTX: calculates coefficient matrix for linear equations
		embodying boundary and layer interface conditions
	SOLVE0: solves linear equations embodying boundary and layer
		interface conditions (general boundary conditions)
	SOLVE1: solves linear equations embodying boundary and layer
		interface conditions (IBCND = 1 case)
	SOLEIG: solves eigenfunction problem for a single layer
	SPALTR: calculates spherical albedo, transmissivity
		(IBCND = 1 special case)
	SURFAC: calculates surface bidirectional reflectivity/emissivity
	TERPSO: interpolates particular solutions to user angles
	TERPEV: interpolates eigenvectors to user angles
	UPBEAM: finds particular solution for beam source
	UPISOT: finds particular solution for thermal emission source
	USRINT: computes intensities at user levels and user angles
	ZEROAL: zeros a group of matrices
	ZEROIT: zeros a given matrix

  file ErrPack.f :
  ---------------

	ERRMSG: prints out error message and kills run if fatal.
		also prevents error-message runaway.
	TSTBAD: prints message when self-test fails
	WRTBAD: writes out names of erroneous input variables
	WRTDIM: writes out names of too-small symbolic dimensions

  file LINPAK.f :
  ---------------

	SGBCO,: L-U decompose a banded matrix
	 SGBFA
	SGBSL : solve linear equations with banded matrix of
		coefficients after L-U decomposition of matrix
	SGECO,: L-U decompose a general matrix
	 SGEFA
	SGESL : solve linear equations with general matrix of
		coefficients after L-U decomposition of matrix
	SASUM : sum of elements of vector
	SAXPY : scalar times one vector plus another vector
	SDOT  : dot product of two vectors
	SSCAL : scalar times a vector
	ISAMAX: index of maximum element of a vector


  R1MACH.f : returns machine-specific constants (single-precision)
  D1MACH.f : returns machine-specific constants (double-precision)


Full Call Tree (nx means called n times):

DISORT-+-(R1MACH)
       |
       +-SLFTST (1)-+-(TSTBAD) (4x)
       |            |
       |            +-(ERRMSG)
       |
       +-ZEROIT
       |
       +-CHEKIN-+-(WRTBAD) (13x)
       |        |
       |        +-(ERRMSG)
       |        |
       |        +-(WRTBAD) (18x)
       |        |
       |        +-DREF-+-(ERRMSG) (3x)
       |        |
       |        +-(WRTBAD) (7x)
       |        |
       |        +-(WRTDIM) (9x)
       |        |
       |        +-(ERRMSG) (2x)
       |
       +-ZEROAL
       |
       +-SETDIS-+-QGAUSN (2)-+-(D1MACH)
       |        |            |
       |        |            +-(ERRMSG) (2x)
       |        |
       |        +-(ERRMSG)
       |
       +-PRTINP
       |
       +-ALBTRN-+-LEPOLY (3)--(ERRMSG)
       |        |
       |        +-LEPOLY see 3
       |        |
       |        +-ZEROIT
       |        |
       |        +-SOLEIG (4)-+-ASYMTX-+-(D1MACH)
       |        |            |        |
       |        |            |        +-(ERRMSG)  (2x)
       |        |            |
       |        |            +-(ERRMSG)
       |        |
       |        +-TERPEV
       |        |
       |        +-SETMTX (5)--ZEROIT
       |        |
       |        +-SOLVE1-+-ZEROIT
       |        |        |
       |        |        +-(SGBCO)
       |        |        |
       |        |        +-(ERRMSG)
       |        |        |
       |        |        +-(SGBSL)
       |        |
       |        +-ALTRIN
       |        |
       |        +-SPALTR (2x)
       |        |
       |        +-PRALTR
       |
       +-ZEROIT
       |
       +-PLKAVG (6)-+-(R1MACH) (2x)
       |            |
       |            +-(ERRMSG) (3x)
       |
       +-PLKAVG see 6 (2x)
       |
       +-LEPOLY see 3 (3x)
       |
       +-SURFAC-+-QGAUSN see 2
       |        |
       |        +-LEPOLY see 3
       |        |
       |        +-ZEROIT (2x)
       |        |
       |        +-(ERRMSG)
       |        |
       |        +-ZEROIT (2x)
       |
       +-SOLEIG see 4
       |
       +-UPBEAM-+-(SGECO)
       |        |
       |        +-(ERRMSG)
       |        |
       |        +-(SGESL)
       |
       +-UPISOT-+-(SGECO)
       |        |
       |        +-(ERRMSG)
       |        |
       |        +-(SGESL)
       |
       +-TERPEV
       |
       +-TERPSO
       |
       +-SETMTX see 5
       |
       +-SOLVE0-+-ZEROIT
       |        |
       |        +-(SGBCO)
       |        |
       |        +-(ERRMSG)
       |        |
       |        +-(SGBSL)
       |        |
       |        +-ZEROIT
       |
       +-FLUXES-+-ZEROIT (3x)
       |
       +-ZEROIT
       |
       +-USRINT
       |
       +-CMPINT
       |
       +-PRAVIN
       |
       +-ZEROIT
       |
       +-RATIO-+-(R1MACH) (2x)
       |
       +-PRTINT
       |
       +-SLFTST see 1
