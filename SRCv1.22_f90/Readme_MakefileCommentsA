# ==================================
# 1) Type "make clean" to clear up everything
# 2) Set the correct paths, parameters in ../INCLUDE/kcarta.param
#    (eg see the IEEE_BE vs IEEE_LE note below)
# 3) Set the correct HDF (HDF_INSTALL,HDFLIB) and RTP (RTPLIB) flags
#    Also set up the correct path to the RTP include file rtpdefs.f 
#    (RTPINC and RTPDEFS_FILE)
# 4) Also correctly set the DISTDIR (this is where the databases are)
# 5) Set up the options for your compiler (SGI,Linux,Sun,...)
#    This could include setting up the correct path to the blas library ...
#    see LIBS for this
# 6) You might need to set up the RTP library package. Go to where it is
#    (eg ../../RTP/Src) Check that the Makefile options there are set up for 
#    your compiler, type "make clean" and then "make"
# 7) You might need to set up the BLAS library package. Go to where it is
#    (eg ../LIB/blas.ref) Check that the Makefile options there are set up 
#    for your compiler, type "make clean" and then "make"
#          >>>>>> next two are optional <<<<<<<<<<
# 8) Set up the SCATTER_ALL parameter below, which tells the linker which
#    scattering routines to use in the complete kcarta package (kcarta.x)
#         >>>>>> make the executable <<<<<<<
# 9) if you want basic    kcarta package, type "make" or "make basic"
#    if you want complete kcarta (jacobs+all scattering), type "make scat"
#    if you do NOT want link to rtp libs, type "make basicTXT" or "make scatTXT"
#
# Other things to do before getting package working
# ==================================================
# 1) You need to set up KALAYERS eventually. Go to where it is 
#    (eg ../../KLAYERS/Src/)  Check that the Makefile options 
#    there are set up for your compiler. You will also need to set the 
#    correct HDF (HDF_INSTALL,HDFLIB) and RTP (RTPLIB) flags
#    Type "make clean" and then "make"
# 2) Go to ../UTILITY  Check that the Makefile options there are set up for 
#    your compiler. Note that SGI F77 and LINUX g77 support fseeks, which
#    make the readers fast. If you are stuck with Absoft F77 then you cannot
#    use fseeks, and need to go to the ReEADwoFSEEK directory!
#      If you use SGI F77, simply type "make" and things should be fine
#      If you use LINUX g77, simply type "make" and things will crap out as
#        g77 defines fseek as a subroutine, not a function. So you have to go 
#        edit readkcBasic.f and readbinary.f, turning off the call as a 
#        function, and turning it on as a subroutine
#      If you use Absoft F77 or some other compiler that does not support 
#        fseeks, go to READwoFSEEK and type "make clean", "make" after
#        appropriately editing the Makefile there
#    Note that this only compiles the BASIC reader .. if you want the more
#    advanced reader, and/or the jacobian and flux readers, you need to
#    type "make execs"
#    Warning : if you updated the kCARTA distribution, type "make execdist"
# 3) Go to ../SCRIPTS and type
#       basic.sc BASIC/USStandardProf_NEW dodo.dat
#    If this works, looks like everything is cool as the script
#      changes a point profile to a RTP file (using MATLAB)
#      sends this profile thru klayers_rtp and outputs a layer averaged 
#      profile sends this profile, plus appropriate driver namelist file, 
#      thru kcarta sends the resulting output thru the f77 readkcBasic reader
#      (the resulting output eg dod.dat and other work files are in ../WORK)

###################### NOTE : IEEE_BE vs IEEE_LE ###########################
## There are a number of binary files that are supplied with this code.   ##
## We supply both endian versions (big endian and little endian).         ##
## However, it is the users responsibility to ensure that the code picks  ##
## up and reads the correct version of the files. The main ones are the   ##
## entire kCARTA database. In addition, there are xsecdata, CKD (water    ##
## continuum) and SOLAR radiance datafiles that need to be used correctly ##
##                                                                        ##
## To read the main kCARTA database, ensure that the correct kWaterPath   ##
## and kCompPath parameters are set in kcarta.param, before compilation   ##
## For example, we could have                                             ##
##      PARAMETER (kWaterPath = '/DATA/kcarta/h2o.ieee-be/')              ##
##      PARAMETER (kCompPath = '/DATA/kcarta/etc.ieee-be/')               ##
##      PARAMETER (kCKDPath       = '../DATA/General/CKDieee_be/')        ##
##      PARAMETER (kSolarPath     = '../DATA/General/SOLAR_be/')          ##
##                                                                        ##
## To make doubly and triply sure things have worked, do the following    ##
## To read the correct SOLAR data, CKD data and xsecdata, go to the       ##
## ../DATA/General subdirectory. If necessary, delete the supplied        ##
## symbolic links and make the new required ones eg :                     ##
##   rm SOLAR                                                             ##
##   ln -s SOLARieee_Xe SOLAR                                             ##
##   rm CKD                                                               ##
##   ln -s CKDieee_Xe CKD                                                 ##
##   rm xsecdata.dat                                                      ##
##   ln -s xsecdata.dat.XXXXX xsecdata.dat                                ##
############################################################################

To profile the code, try (eg for Absoft)
Makefile_v118_Absoft:66:# after compiling the code with f77 -P, a file "gmon.out" is produced
Makefile_v118_Absoft:67:# so then do     gprof ../BIN/bkcarta.x gmon.out >& ugh; more ugh

Makefile_ifort : -profile-functions or -profile-loops
Makefile_gfortran : -p -pg
  add -pg to all OPTS, including the final one to make kcarta.x
So for example in SARTA make file I have
OPT = -O2 -convert big_endian -extend-source 132 -pg
sarta:  $(OBJS)                                        
        $(F77) -pg $(OBJS) $(RTPLIB) $(HDFLIB) $(FLIB) 
# Compile source to object files                       
.f.o:                                                  
        $(F77) -c $(OPT) $(RTPINC) $*.f                
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if you do profiling, need to compile with eg (SARTA jacobian code)

F77 = ifort
FLIB =
OPTEXEC =

OPT = -O2 -convert big_endian -extend-source 132 -pg
OPTEXEC = -pg

sarta:  $(OBJS)
        $(F77) $(OPTEXEC) $(OBJS) $(RTPLIB) $(HDFLIB) $(FLIB)

# Compile source to object files
.f.o:
        $(F77) -c $(OPT) $(RTPINC) $*.f

   time ../bin/jac_airs_l1c_2834_cloudy_may19_prod_debug fin=junk.op.rtp fout=newdayx.rtp
   gprof ../bin/jac_airs_l1c_2834_cloudy_may19_prod_debug gmon.out >& ughnew
 and if you profile eg Scotts code
   time ../bin/airs_l1c_2834_cloudy_may19_prod_debug fin=junk.op.rtp fout=origdayx.rtp
   gprof ../bin/airs_l1c_2834_cloudy_may19_prod_debug gmon.out >& ughnew
 then compare Scotts code vs My code using Matlab and 
   compare_gprof_profiler_output('ughorig','ughnew');
