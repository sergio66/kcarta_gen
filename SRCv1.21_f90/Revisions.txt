Sergio DeSouza-Machado 
Department of Physics
Atmospheric Spectroscopy Group
U of Maryland, Baltimore County
Baltimore MD 21250
(410) 455 1944                sergio@umbc.edu

kCARTA is a pseudo-monochromatic radiative transfer code, which uses
an accurately pre-computed database of optical depths. The code was
designed to be the Reference ClearSky Forward Model for NASA's AIRS
instrument, which is a hyperspectral infrared nadir sounder. This means
the infrared (605-2830 cm-1) optical depths and clear sky radiances,
at 0.0025 cm-1 resolution, have been extensively compared against
other codes (such as GENLN) and validated during numerous AIRS
campaigns. 

The kCARTA code is designed to be fast, accurate and easy-to-use;
compressed optical depths come from a Matlab-based line-by-line code
which currently uses the HITRAN 2012 lineshape parameters, with CO2
linemixing and MT-CKDv2.5 water continuum.

In addition, some scattering and radiative flux routines are packaged
with the code, and the optical depth data base has been extended to
encompass 15 - 44000 cm-1 (FIR to UV), though we only provide limited
support for these. kCARTA is available both in f77 and Matlab.

In order to run kCARTA, the user also needs to install/download
a) hdf packages
b) rtp package, which is our native file format for storing
   atmospheric geophysical variables and instrument view geometry
   parameters, needed for RT calculations
c) klayers package, which takes in a LEVELS rtp file and produces a 
   LAYERS avg rtp file, needed for RT calculations

Code was developed jointly by 
  L.Larrabee Strow        Principal Investigator
  Howard Motteler         SVD Compression and OD uncompression routines
  Sergio DeSouza-Machado  Radiative Transfer, Jacobians, Fluxes, Scattering
  Scott Hannon            Code testing, developing, overseeing

Differences between rtp versions
=================================

 diff /asl/packages/rtpV201_g80/include/rtpdefs.f /asl/packages/rtpV201/include/rtpdefs.f
62c62
<         parameter ( MAXGAS    =   80 )
---
>         parameter ( MAXGAS    =   16 )
65c65
<         parameter ( MAXCHAN   =  800 )
---
>         parameter ( MAXCHAN   = 4231 )


Large difference between 105 and 201 (Scott got  rid of mw stuff, p.erho, 
brought in p,.cprtop2,p.cngwat2 etc)
  diff /asl/packages/rtpV105/include/rtpdefs.f /asl/packages/rtpV201/include/rtpdefs.f

ViewAngles
===========

kCARTA runs off scanang ( = angle between instrument and nadir, at TOA) rather
than satzen ( = local angle at ground pixel). If satzen is provided, 
conversion is done via
     scanang = SACONV_SUN(rAngleX, Hsat)
where Hsat = satellite height = 705 km for AIRS, 800 km for IASI

Updated KCARTA databases
========================

01/01/08        Have updated the KCARTA database for water, ozone, SO2, HN03
                using HITRAN2004
                So now we use  
                        /asl/data/kcarta/v07.ieee-le/
                instead of 
                       /asl/data/kcarta/v20.ieee-le/h2o.ieee-le/

CO2 ppmv
========

See also -------->>  Revisions_Update_NLTECo2ppmv.txt

See   /asl/data/kcarta/KCARTADATA/RefProf/refgas2
  or      /home/sergio/KCARTADATA/RefProf/refgas2
  or      /home/sergio/KCARTADATA/RefProf.For.v107up/refgas2
1998 - 2000 : ppmv = 363
July 2000+  : ppmv = 370
kreadVTprofiles.f for NLTE assumed the ppmv = rCO2Mix = 370
This parameter is now included in kcarta.param, for NLTE purposes
  ie the user should be able to compute NLTE effects for default (370 ppmv) 
      caaMixFileLines(1) = '1   -1    1.0    1'
  or multiples of this 
      caaMixFileLines(1) = '1   -1    1.0    -1'
      caaMixFileLines(2) = '2   X'
*** it is HIGHLY recommended to use kcarta3XY database for ppmv of 3XY
*** eg do NOT try to mix a kcarta370ppmv database and then try to compute NLTE
***    effects for 385 ppmv by setting mixratio = 1.04 

Improvements to CO2 databases 
==============================

here we try to merge CO2 databases, to see how things are going 
 
Sometime, AD 2000
/asl/data/kcarta/v20.ieee-le  : H1998, P/R linemixing created. From aircraft
campaigns, it seems pretty good.

Early Summer, 2002
AIRS data comes out. So we can test the above database with a TOA instrument.
We find that it is :
   good in 15 um region 
   has errors in 2380-2405 region (which we suspected from CAMEX1,WINTEX) 
   has huge error in the 2280 region (which came from "hole" in 2351 band) 
   was very good everywhere else  
so off we go to JJOHNS data, and fix the 2380 region. unfortunately, it 
introduces errors in the 2220 region, and did not really fix things in 2280 
/asl/data/kcarta/v23.ieee-le  : H2000, P/R linemixing, blending at 2380-2405 
   bloody good in 15 um region (since it uses the v20.ieee-le data there) 
   reduces errors in 2380-2405 region (by playing with JJOHNS data) 
   still has error in the 2280 region (which came from "hole" in 2351 band) 
   made a big mistake in the 2225-2275 region 
 
/carrot/s1/sergio/CO2database/v20_23.ieee-le : merge the v20 and v23 databases 
use v20 everywhere EXCEPT at 2355-2430 

August 8, 2002
  /carrot/s1/sergio/CO2database/v20_23.ieee-le : 
    merge v20 and v23 databases by using v20 everywhere EXCEPT at 2355-2430

  cd /carrot/s1/sergio/CO2database/v20_23.ieee-le
  ls -1 /asl/data/kcarta/v20.ieee-le/etc.ieee-le/*_g2.dat
  cp /asl/data/kcarta/v20.ieee-le/etc.ieee-le/*_g2.dat .
  mkdir v20remnants
  mv r2355_g2.dat v20remnants/.
  mv r2380_g2.dat v20remnants/.
  mv r2405_g2.dat v20remnants/.

  cp /asl/data/kcarta/v23.ieee-le/etc.ieee-le/r2355_g2.dat .
  cp /asl/data/kcarta/v23.ieee-le/etc.ieee-le/r2380_g2.dat .
  cp /asl/data/kcarta/v23.ieee-le/etc.ieee-le/r2405_g2.dat .

Updates to water continuum
==========================

This is a combination of RAL spectroscopy, and Scott Hannon assessments of
AIRS data compared to CKD models. Check kcartamisc.f for descriptions
(SUBROUTINE SetDefaultParams)
Basically RAL data was used to improve CS and CF in the 1300-1700 cm-1 region
          Dave Tobin, Jonathan Taylor made some corrections at 800-1000 cm-1
          AIRS data was used to reduce dependency of bias with water amount, 
          in the window regions (700-1000, 2400-2800 cm-1)

NLTE algorithm
==============

Can do NLTE upto 83 km (usual kCARTA database) and 83-120 km (assuming the NLTE
vib profile files go up that high) using either LBL mode (slow) or SARTA 
mode (FAST)

Also can do NLTE at 0.0025 cm-1 and at 0.0005 cm-1 resolution

So far can only do CO2 NLTE at 4 um

Have separate code for Manuel Lopez-Puertas/Bernd Funke TVib parametrization
(after Aug 2005) so that the NLTE temps can be computed for arbitrary solar
angle/kinetic thermal combinations
See the f90 programs supplied by M. Lopez-Puertas and B. Funke in
  /home/sergio/KCARTA/SRCv1.12/NONLTE2/sergio/VIBTEMPS_Puertas/ORIGCODE
  /home/sergio/KCARTA/SRCv1.14/NONLTE/sergio/VIBTEMPS_Puertas
as well as 
 ~/KCARTA/SRCv1.12/NONLTE2/sergio/AIRSDATA_NLTE_VIBTEMPS_Puertas/do_makeVT.m
 ~/KCARTA/SRCv1.14/NONLTE/sergio/AIRSDATA_NLTE_VIBTEMPS_Puertas/makeVT.m
for a script that takes in an input kinetic temp profile and dumps out the
NLTE temperature profiles

Scattering algorithms
=====================

Both RTSPEC and kTwoStream use exponential-in-radiance variation in optical 
depth, rather than exponential-in-tau. DISORT uses linear-in-radiance, as does
the PCLSAM code implemented on Dec 20, 2005.

As per the wishes of the climate community, can easily handle multilayer clouds
in PCLSAM scattering code. Have not yet transferred this to TWOSTREAM or 
RTSPEC algorithms.

Major updates to various kCARTA versions
=========================================

 ============================================================================
 | These are  "research versions" of kCARTA, mainly for UMBC purposes only  |
 ============================================================================

Future plans
  -------------------------------------------------------------------------- 
  | Test and run  NLTE Compressed ODs                                      |
  -------------------------------------------------------------------------- 
v1.21   f90 version, using implied do loops!

v1.20   f90 version! The Modules meant a lot of subroutines/files got rerranged
        This may get cleaned up further along the line
	In addition we got rid of (a) limb viewing routines
	                          (b) nir_vis_uv since kCARTA can dump ODs fpor LBLDIS
				  
v1.18   PCLSAM clouds are now same as SARTA (ie two slab, with
           r = c1*r1 + c2*r2 + c12*r12 + clr*rclr
        PCLSAM clouds can also have NLTE calcs

        Included National Renewable Energy Lab (NREL) SOLAR database to make 
        2830-50000 cm-1 region self consistent, put SOLAR database at T=5800K
        between 15-605 cm-1; kept the 605-2830 cm-1 solar database same, for 
        consistency with SARTA

        Making the PCLSAM scattering mimic the SARTA fast model : 
                  r = c1' r1 + c2' r2 + c12 r12 + clr rclr
        where c1' = c1 - c12 = cloud 1 alone
              c2' = c2 - c12 = cloud 2 alone

        Added on Limb Viewing Geometry (for night time; daytime may have NLTE 
        problems)
        RT code uses temperature variation across layers (as the optical paths
        are long, so need to account for this)
        Also put in solar occultation capability

        Added on looping over one Atmosphere!!!
        In nm_radnce if iNatm >= 1 then read in nml atmosphere(s)
                        iNatm = 1 then read in ONE atmosphere; depending on 
                          iAtmLoop, for clear sky/cloudy case, can loop over 
        (1) rPstart (2) rPStop (3) rSatZen (4) rSolarAngle 
        (5) emissivity --> e0 + delta
         Right now cannot do looping over cloud stuff; go to SARTA for that
                 (6) raDme1  (7) raCngWat1 (8) raCprTop1 
                 (9) raDme2  (10)raCngWat2 (11) raCprTop2 
          raAtmLoop sets the values of the param we are looping over

        Making kCARTA more generic, in that we have moved some Earth related
        parameters (such as gravity, omegasun) out of "pre_defined.param" and 
        moved them into "kcarta.param"
        HOWEVER, still need to worry about 
          KCARTA_database.param
          airslevelheights.param
          airslevels.param 
        So go to the INCLUDE dir and run the EARTH_database_params/lner.sc
        All this automatically done by eg
          make datafix385_H2012

        Allowing kCARTA to read in textfile with MIX RATIOS, so it does
	    "mini" kLayers (see n_layers.f)
	with same assumptions as usual klayers (kRTP = -10)
          - wv input is "wet" MR and so is NOT adjusted
          - other gases eg CO2, O3 are "dry" MR and so they are adjusted
          - if gases are missing from user input, then some standard gases are
            added in
          - only tacks on US Std Profile (ie supplied reference profile)
        And kRTP = -5/-6 reads in a LBLRTM based levels input file and 
        processes that!
        These would be TAPE5 and modified TAPE6
        For these two cases, when "adding on missing gases", the gasamts 
        are set to 0
        See eg KCARTA/IP_PROFILES/levelsRTP_to_levelstext.m
               KCARTA/IP_PROFILES/levelsprofile_text1.prf	
	       
        Introduced (BUGGY) NLTE database for CO2 from 2205 - 2430 cm-1 (or 2205
        to 2405 cm-1 chunks). This database covers optical depths and planck
        modifiers for usual AIRS layers (1-100 or 1100 - 0.005 mb) as well
        as for upper NLTE AIRS layers (101-135 or 0.005 - 0.00005 mb), at
        solar angles 0,40,60,80,85,90
        Note that the Planck modifiers did not change with CO2 amount, while
        as usual the ODs are directly proportional to CO2 amount.
        Also note we have NO ability to dump out jacobians for the extra layers
        ie jacobians only possible for usual (100) AIRS layers between 
        1100-0.005 mb

        SPECTRA section now allows you to specify an "alternative" compressed 
        database  for some of gases 1-81,103 other than what is set in 
          kWaterPath,kCKD_Compr_Path,kWaterIsotopePath,kCO2Path,kCompPath
        So though they are are set by user at compile time, the user can use 
        SPECTRA to load in alternate water/CO2/other optical depths at run time

        Global common block parameter "kTemperVary" now sets, in "SomeMoreInits"
        what the temperature variation in a layer is
          -2 : turn off Planck emission in "scatter_twostream_code.f"
          -1 : constant
          +1 : exponential in tau
          +2 : linear in tau, simple  v2
          +3 : linear in tau, ala RRTM, LBLRTM v3
          +4 : linear in tau, ala RRTM, LBLRTM v4
          +41 : linear in tau, ala RRTM, LBLRTM v41
          +42 : linear in tau, ala RRTM, LBLRTM v42
          +43 : linear in tau, ala RRTM, LBLRTM v43 ***** use this	  
       for 2,3,4 look at "clear_scatter_misc.f" subroutine RT_ProfileUPWELL_LINEAR_IN_TAU
       for 2,3,4 look at "clear_scatter_misc.f" subroutine RT_ProfileDNWELL_LINEAR_IN_TAU

v1.17 : Doomed attempt to speed up code by using input profile(s) for only
        certain gases eg 1,2,3,4,5,6,9,12 ... and relying on US Std for other
        gases. This made code full of if then - else - end if, could produce
        large BT errors in final radiances, at a very small gain in speed.
        So this is unsupported and will not be updated. Ever. XYZXYZXYZXYZXYZXYZ

v1.16 : Using Howard Motteler's Matlab based ideas to uncompress the database.
        This makes the code much cleaner, and a little faster.
        Gases 101,102 are now compressed gases (in 605-2830 cm-1 range)
        Also code now allows user to specify iAFGLProf in nm_prfile, so that 
        it can fill in "missing gas" profiles (from rtp file) using default
        AFGL profiles 1 .. 6 (STD,TRP,MLS,MLW,SAS,SAW)

v1.15 : Have added on more HITRAN gases, as well as xsec gases
        The gas IDS are now 1-42 and 51-81 respectively

+++++++++++++++++++++

v1.14 : PCLSAM can now handle a cloud profile from eg ECMWF (instead of 
        a slab profile). Also can accepts mixed clouds by adding up the
        scattering parameters in a weighted fashion. And does fluxes/jacobians
        for these mixed cloud/arbitrary profile combinations! Has this really
        neat way of showing the thermal structure of the atmosphere via
        d(rad)/d(IWP); see SUBROUTINE AddCloud_pclsam_Jacob_downlook_sunshine

v1.14   KCARTA can also dump out column "jacobians" and stemp jacobians
        Note that for the gases, these jacobians are really finite differences
        between unperturbed and entire gas column bumped by 1.10
        The order is same as in regular jac file ie gases followed by STEMP

v1.12 : slightly cleaned up version of 1.11 (kcartamain, kcartabasic).
        Plan is for NLTE code to handle more than 1 gas/1 band combo

v1.11 :

Main update is to introduce effects of nonLTE. This is in preliminary
testing stage. As a start we supply some CO2 files for the 4 um region, in 
which the local vibration temperature differs from the local kinetic 
temperature, high up in the atmosphere. 
Warning : everything so far done ONLY for CO2 4 um region!!!!! Already has 
          first order linemixing in the 2350 R branch (2380-2430 cm-1)!!!!!!

Another update is to allow a simple absorptive cloud model into radiative
transfer .... works best in the 10-12 um region. Trying to implement a first
order perturbation solution as well. This is directed from the nm_radiance
section, where user sets caaScatter,raScatterPressure,raScatterDME and
raScatterIWP

Third update is to include PCLSAM scattering model, which allows computation
of scattering jacobians!

[Also fix scattering code bugs, introduce CKDv1,2,3, beef up the flux 
computations, even with scattering (introduce a OLR computation) etc]

"Special Features" -- available at compile time by setting specific variables
-----------------     Reset any of these variables quickly, and recompile
                      as required! 

            DEFAULT : 

(A1)                 for SARTA tuning multipliers and XSEC
  kcartabasic.f       iSARTAChi = -1          for no tuning (default)
  kcartamain.f                  = +1          for AIRS tuning
  kcartachunk.f                 = +2          for IASI tuning
                                = +3          for CrIS tuning

  kcont_xsec.f        iMethod = 0 (default)   Old style look up tables
                      iMethod = 1             New continuum compressed tables
                                              are set in SUBROUTINE AddContinuum
  n_pth_mix.f         iReadP = +1             readKLAYERS4 : if iRTP = -1, Scott's v1.07
                                              did not have full T(z),P(z) at levels, only
					      Pav(z),tAv(z) at layers
					      
(A2)                 for LTE, clear sky, scatter codes, OD calcs
  kcartamain.f         iSplinetype = +1        for splines/linear
  kcartabasic.f        iSplinetype = +1        for splines/linear  
  kcoeffMAIN.f         iCO2Chi = 2             AIRS analysis for 15 um, 4um
                                               region of CO2/H2O (by S. Hannon)
                       iMatlabORf77 = +1        use Matlab uncompression ideas
  rtp_interface.f      iWhichScatterCode = 5   use PCLSAM from RTP files
  clear_scatter_misc.f iLogOrLinear = +1       linear interp for w,g; log for e
		      
(B)                for Radiative Trnsfer (layer temperature variations)
  rad_quad.f          iGaussPts = 3           how many flux gauss pts to use
  rad_quad.f          iGaussQuad = 0          fast,accurate gauss quadrature
  rad_angles.f        iUseSnell = -1          ray trace through layers w/o Snells' law (like SARTA)

  rad_main.f          iVary = -1              use constant layer T, set by kTemperVary
      kTemperVary = -1       !temperature in layer constant USE THIS!!!!
      kTemperVary = +1       !temperature in layer varies exponentially
      kTemperVary = +2       !temperature in layer varies linearly, simple
      kTemperVary = +3       !temperature in layer varies linearly, ala RRTM, LBLRTM, BUGGY
      kTemperVary = +4,41,42,43 !temperature in layer varies linearly, ala RRTM, LBLRTM, debugged, use 43

      iUsualUpwell = 1   default  emission + surface for upwelling rad
                    -1            only do emission, no surface for upwelling rad
	            -2            only figure out background thermal
  n_pth_mix.f
    need to turn layer temperatures into level temperatures
      iInterpType = +1    ! spline, default
      iInterpType = -1    ! linear

(C)                  for LBLRTM TAPE 5/6 input
  n_layers_lblrtm.f   iAIRS101_or_LBL_levels = +1  use AIRS101 levels for integration from
                                                   levels to layers

                      iReplaceZeroProf = +1   add in gases that are not in LBLRTM TAPE5

  n_pth_mix.f         iAddLBLRTM = +1         user wants to add on missing 
                                              profiles even if they were 
                                              not specified in TAPE5 or TAPE6

(D)                  for NLTE
  kreadVTprofiles.f   iCurrent = +1           use eg 385 ppmv in UA, or rely 
                                              on MR given in caaUpperMixRatio
  knonlte.f           iTalk = -1              short summary of NLTE info
                                                /band/layer
  klineshapes.f       iTalk = -1              short summary of NLTE info
                                                /band/layer
  kvoigt_cousin.f     iTestGenln2 = -1        use line mix for strong bands
  knonlte.f           iNoPressureShiftCO2 = 1 no pressure shift in CO2 lines
  klineshapes.f       iQtips_H98 = +1         QTIPS values for partition fcn
  kbloat.f            iLinearOrSpline = -1    Use spline to go from 0.0025 to
                                                0.0005 spacing, for LTE stuff
                                                in BloatCoeffs()
  kbloat.f            iDoCO2Continuum = -1    Use CO2 continuum or not
  knonlte.f           iDoCO2Continuum = -1    Use CO2 continuum or not
  n_gas_wt_spectra.f  iMethod = 2             Use polynm coeffs to predict NLTE

03/31/14        kRTP = -10 reads in text based levels input
                kRTP = -5 reads in LBLRTM based levels input (TAPE 5)
                kRTP = -6 reads in LBLRTM based layers input (TAPE 6, edited)
                kRTP = +2 reads JPL/NOAA style LAYERS profile; 
                          set atm from namelist

                The first part of this file contains info from TAPE5 upto 
                NUMBER of LEVELS to read. 
                This is replaced with NUMBER of LAYERS from which to read 
                info, plus number of XSEC gases
     Then search for "P(MB)       T(K)    ALPHL    ALPHD    ALPHV   ZETA "
                in TAPE6, and cut and paste the layers/levels info from there!!
                See example in DOC/TAPE6_Klayers; code assumes the gasIDs are
                sequential (ie reading gas1-7 on first bunch, gas 8-15 in next 
                bunch, gas J to J+7 etc (*ie in sets of 8*); followed by XSEC 
                gases (if any)
                So *** 1 *** read in TAPE5, and 
                     (a) where TAPE5 gives nlevs you want computations at  
                         (eg 52) replace this with nlays (eg 97)
                     (b) similarly where TAPE5 gave the pressure levels of the
                         input, give AIRS Plevs(1:97)
                     (c) Then where TAPE5 gives number of LEVS at which 
                         radiosonde profile is given at (eg 123)
                         replace this with number of LAYERS in the TAPE6 file,
                         and number of XSEC gases
                    *** 2 *** read in TAPE6, including 
         0LAYER                          P(MB)       T(K)    ALPHL    ALPHD
                    and below

        For these two LBLRTM cases, when "adding on missing gases", the 
        gasamts are set to 0

(G)ENERAL
03/21/11        In "SUBROUTINE compressed" default is now to use Matlab based
                weights idea to uncompress the kComp Database, rather than the
                earlier splines and/or linear interps. This should be a speedup

07/07/09        In "find_radiances_coljac" default is to dump out column 
                finite difference jacs into a separate file (as well as the 
                usual layer jacs)
                Since this is essentially redoing radiance calcs, the code can
                be sped up by turning iColJac = -1 to just dump zeros instead

03/27/06        in INTERP_SCAT_TABLE2 do linear for w,g, log for e; this is the
                default RTSPEC code. Now do default behaviour as log interp
                for E,w,g, to be consistent with SARTA. 
               
03/17/05        Can choose whether you want to predict the NLTE temps using
                1) a linear regression of the 48 profs x 7 angles
                2) polynom coeffs of (tV-tK) as fcns of layer/sun angle 
                   (default)
                3) predict coeffs of (tV-tK) as fcns of layer/sun angle
                   (only implemented in MATLAB)
         
08/30/04        Can turn on/off the CO2 continuum (from GENLN2) while computing
                the 4 um CO2 lineshapes 
                iDoCO2Continuum = +1   !CO2 continuum from GENLN2 
                iDoCO2Continuum = -1   !no CO2 continuum 

03/18/04        QTIPS functions q = a + bT + cT^2 + dT^3 varies, for the 
                different HITRAN versions; this could be an issue if comparing
                to the GENLN2 results
                iQtips_H98 = -1   !use some other value
                iQtips_H98 = +1   !default; use the most recent qtips values

03/04/04        For some reason, all bands in the Matlab/run7co2 code, had NO
                pressure shift of line center. So modify the routines in 
                knonlte.f, so that there also is no line center shift!
                This is set by variable iNoPressureShiftCO2 = +1 (default)

02/12/04        use iTestGenln2 in CousinVsMix to switch between allowing
                kCARTA to always use Cousin, or also using linemixing for the
                strongest SigmaSigma bands
                iTestGenln2 = +1  !!test with GENLN2, so use Cousin everywhere
                iTestGenln2 = -1  !!default; use line mix for strong bands

01/29/04        iTalk in subr "lte_spectra_planck_fast" can either dump 
                out ALL info or a small summary, per band per layer

01/24/04        kCARTA can either interpolate the database using linear or 
                spline interpolation. Variable iSplineType is set in the main
                kcarta file (kcartabasic,kcartamain) so that it affects the
                following routines
                DEFAULT : iSplinetype = +1    (for splines)
                  kcoeffSPL.f,kcoeffSPLJAC.f,
                    SUBROUTINE SplineTempInterpolateOLD, 
                    SUBROUTINE SplineTempInterpolateJAC,
                  kcartamisc.f
                    SUBROUTINE MakeRefProf,            controls the choice
                -->> Howard Motteler's Matlab kcmix "unchunker" uses <<--
                -->> linear interp i.e. iSplineType = -1             <<--
                The biggest worry is in the water partial press interpolation
                ie whether or not to call "PPThruLayers" from MakeRefProf

09/16/03        Put in an extra fudge factor for H2O/CO2, based on AERI data 
                analysis by Larrabee Strow in the shortwave. This is in 
                kcoeffMAIN.f ... look for variable iLLS. This uses a "mystery"
                factor : "/asl/data/kcarta/KCARTADATA/General/mystery.dat"
                DEFAULT : iLLS = -1

09/16/03        Put in a fudge factor for CO2, based on AIRS data analysis by 
                Scott Hannon in the shortwave and longwave.  This is in 
                kcoeffMAIN.f ... look for variable iCO2Chi. 
                DEFAULT : iCo2Chi = +2

07/05/03        kCARTA can output a file containing the Planck modifiers.
                This file is in the same output format as the flux file
                Control for turning this on/off is at run time; go to
                nm_params and set kFlux = -1,1..6
                1 = dngoing flux at each level
                2 = up-dn heating rate at each layer
                3 = upgoing flux at each level
                4 = OLR at TOA
                5 = OLR/flux at tropopause/DNW 
                6 = up/dn flux at each level

06/09/03        Use some of the Matlab code ideas, to switch CO2 chi function
                between cousin and linemix/birnbaum as necessary

01/30/03        kRTP = -2 allows user to read in GENLN4 "Layers" profile
                This has NOT been thoroughly tested; it certainly works for the
                one gas (CO2) case used for NLTE testing! Also allows the user
                to read in Scott's simple klayers profiles, as long as 
                      CALL GetMoreInfo(raPressLevels,raThickness,caPfName)
                at the end of subroutine readKLAYERS4 has been commented out.

01/28/03        Put in more parameters into nm_nonlte, for easier testing
                (a) iDoUpperAtmNLTE = -1 (default) - no upper atm NLTE calc
                                      +1 to do upper atm NLTE calc
                (b) iAllLayersLTE   = -1 (default) - top layers at NLTE
                                      +1 all layers at profile LTE
                (b) iUseWeakBackGnd = +1 (default) - include backgnd lines
                                      -1 do not include backgnd lines

01/21/03        The code can now read in specified scattering coefficients;
                assuming scattering is negligible, the absorptive part of the 
                cloud can be added onto the gaseous absorption for a simple 
                radiative transfer model. NO Jacobians yet!!!!!!!!
                This is done from nm_radnce, where the parameters 
                caaScatter,raScatterPressure,raScatterDME,raScatterIWP are set.
                For the truly savvy, can get this done in the RTP file as well
                by setting  iWhichScatterCode = 0 in rtp_interface.f

11/08/02        Introduced parameter kCousin_CO2path to let kCARTA do cousin
                lineshape computations. THis is via a fudge in nm_nonlte; if
                  raNLTEstrength(X) = -1.1212 and iaNLTEGasID(X) = 2
                then kCARTA will know it does not really do NLTE computation,
                but swaps the linemix uncompressed spectra for cousin 
                uncompressed spectra in the layers above that specified by
                raNONLTEstart(X)
                Else raNLTEstrength(X) must be 1.0; it will consequently be
                readjusted in subroutine nonlte to be equal to the GasMult
                specified in caaMixFillLines

01/01/99        Subroutine "IntegrateOverAngles" allows user three options
                by which to do accurate integration over angles for background
                reflected thermal - set variable "iGaussQuad" appropriately
                in file rad_quad.f
                DEFAULT : iGaussQuad = 0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Details : Bug fixes/ clarifications and new features/updates/improvements
-------------------------------------------------------------------------

v1.21
-----
3/12/2019      Started modifying .f90 files to take advantage of Matlab-like looping
               http://www.pcc.qub.ac.uk/tec/courses/f90/stu-notes/F90_notesMIF_5.html
               Mostly of the type   raX = raX = raY*raaA(:,iL) instead of older
               Do iFr = 1,kMaxPts
                 raX(iFr) = raX(iFr) + ray(iFr)*raaA(iFr,iL)
               END DO
               Note instead of Matlab raX(1:2:9) to access 1,3,5,7,9, in f90
               use raX(1:9:2)

               Also note that the modifications are minimal in the subroutines 
               reading in nml and rtp files, or setting eg cloud layer spans
  
               << rad_common.f90 >> needs a lot of vectorized implied do looping work
               << rad_diff_and_quad.f90 >> needs lot of vectorziation because FindDiffusiveAngleExp is scalar, not vector

               namelist nm_scatter : raCloudFrac(kMaxClouds,3) has been changed to raaCloudFrac(kMaxClouds,3)
               this should be a mostly transperent change since we typically drive clouds from rtp

v1.20
-----
2/25/2019      [rad,jac,w] = readkcPCLSAM_coljac(radfile,jacfile);
               is a new reader that reeads in the radfile, figures out number of pixels
               and from that figures out number of column jacs (Q(1),Q(2), ...Q(n),T,stemp)
               It then adds together the appropriate entries to produce the final
               column jacs
               Note as mentioned below, the Tcol jac is strictly wrong since it 
               only includes BT(T+dT) effects
            
               so to read column jacs (eg suppose 2 gases, T, stemp)
               (a) clear sky : use [coljac_clr,w] = readkcBasic('clr.jac_COL');
                      and coljac_clr = (10000 x numchunks) x 4 ~ 89000 x 8
               (b) PCLSAM 2slab sky : (subpixels = 1,3,5 for clr,2 cloud, 2 clouds
                      has a funky wrapper that does the work for you (adding together
                      the individual weighted subpixel jacs) to give correct result
                      [rad_cld,coljac_cld,w] = readkcPCLSAM_coljac('rad_cld','cld.jac_COL');
                      and coljac_cld = (10000 x numchunks) x (4 x subpixels)
                                     ~ 89000 x 20  
                   the wrapper reads it in, and since(:,17:20) are all zeros, it just
                   adds together (:,1:4)+(:,5:8)+(:,9:13)+(:,13:16) which are alredy
                   correctly weighted, and outputs THAT as the final 890000x4 coljac!

               Testing of this code is in 
                 KCARTA/TEST/Test_KCARTAJac_PCLSAM_2Slab/.\test_oldVSnew_kcarta.m

2/25/2019      Fixing bugs in the PCLSAM column jacobians : right now you 
               read them in, and then add eg(1 thru 4) WHICH ARE ALREADY CORRECTLY WEIGHTED 
               to get final weighted 5

               So suppose there are 2 gases to be dumped, and T and stemp
               This means for each chunk, the x.jac_COL will have 20 columns,
               1:4 being for cld1, 5:8 being for cld2, 9:12 being for cld1/cld2 
               overlap, 13:16 being for clear and then 17:20 being zeros for the sum
               SO then the four jacs you need would be 
                  jac(:,1:4) + jac(:,5:8) + jac(9:12) + jac(13:16)

               Note the column T jac is strictly inaccurate since               
    write(kStdWarn,*) ' ---> Note : only includes change in BT(T+dT) and not')
    write(kStdWarn,*) ' --->   change in OD(T+dT) so not completely accurate')
   
2/23/2019      Rewrote PCLSAM TwoSLab jacobians so that you can either dump
               out a HUGE monchromatic jacobian file with x5 what you need 
               (ie the two individual clouds, overlap, clear AND final) or 
               default to dumping out only the final weightted sums (so the
               file is comparable in size to the clear sky case)
               iaaOverrideDefault(1,10) = -1 : small file (default)
                                          +1 : huge file (if you dare)
               (see n_misc.f90)
               (testing : see /home/sergio/KCARTA/TEST/Test_KCARTAJac_PCLSAM_2Slab)

12/6/2018      nm_param now allows you to have a file
                      "caNMLReset_param_spectra"
	       which allows you to read in a "override file" that overrides
	       the current settings of nm_param and nm_spectra

               This will be useful in eg making SARTA as we use a number
	       of namelist files (one for breakouts, one for radiances,
	       one for thermal background) and it is critical that all
	       these files uses the same spectroscopy and CKD settings!

               The new namelist files has exactly the same specs of
	       nm_param and nm_spectra as the master namelist file
	       
8/3/2018       Added JM Hartmann N2/WV continuum to the 4.3 um bandhead
               See SUBROUTINE add_co2_wv_continuum in kcoeff_common.f90
               The continuum has no temperature dependance so d/dT = 0; 
	       
	       It depends on path length, density, xN2 and xWV where xi = mole fraction
	         iaaOverrideDefault(1,9) = +4 keeps it on, can be overturned
	       CO2 jacobian has been coded up

               Right now the default is to keep it turned off (iaaOverrideDefault(1,9) = +0)
               iaaOverrideDefault(1,9) = +2 : do WV/CO2 continuum
               iaaOverrideDefault(1,9) = +4 : do WV/N2  continuum	       
               iaaOverrideDefault(1,9) = +6 : do WV/CO2 + WV/N2  continuum	       
	       
7/6/2018       Added Tran et. al WV/CO2 continuum to the 4.3 um bandhead
               See SUBROUTINE add_co2_wv_continuum in kcoeff_common.f90
               The continuum has no temperature dependance so d/dT = 0; 
	       
	       It depends on path length, density^2, xCO2 and xWV where xi = mole fraction
	         iaaOverrideDefault(1,9) = +2 keeps it on, can be overturned
	       CO2 jacobian has been coded up
	       Wv  jacobian has been coded up	       

               Right now the default is to keep it turned off (iaaOverrideDefault(1,9) = +0)
	       
7/6/2018       Reminder that kCARTA can handle newest MT-CKD versions
               (2.5 --> 25, 3.2 --> 32)
	       
4/3/2018       The SRCv1.18 and SRCv1.20_f90 code agree for LTE calcs
               However only the SRCv1.20_f90 version has been debugged for NLTE
	       Some of the fixes made during the debugging are in SRCv1.18 version
	       but not all, so one can anticipate a divergence between the NLTE results
	       
	       caaUpperMixRatio is now essentially redundant, since the code
	       adjusts VibTempo gas amounts (mostly from Manuel Lopez Puertas files)
	       based on the US Std UA profile in INCLUDE/kcartaparam.f90.
	       caaUpperMixRatio is set by user in nm_nonlte

               Had to fix SUBROUTINE voigt_chi since it was using it's own
	       high res wavenumber array / 50000 points (instead o simply using the input
	       (low res) wavenumber array and subsetted number of points (depending on high/med/coarse mesh)
	       [see 07/17/15 comments]
	       
3/30/18        Renamed SUBR rsplin() to SUBR rsplin_need_2nd_deriv() as a
               reminder that it expressly requires a prior call to rSPLY2 beforehand
	       so that there is a known assigned value of the 2nd deerivative Y2A

               SUBR MakeRefProf was using the default AIRS 101 plevs for both LA and UA
	       this has been fixed

               SUBR read_upperatm_nonlte_temperature has been modified so that after reading
	       in the VibTemp profiles (which include CO2 ppmv), it also reads in the
	       US Std UA profile in INCLUDE/kcartaparam.f90, and based on those ppmv,
	       it adjust the VibTemp gas amounts

               SUBR voigt_chi has been corrected so that array bounds are respected

               SUBR NLTE_SLOW_LBL is the main routine for doing the slow LBL calculations,
	       and there are temporary variables there to turn on/off some of the calcs
    iDoWeakBackGndLA = +1     !! do weak background (compressed) for LowerAtm, if this is NLTE gas
    iDoLBL_LA = +1            !! do LBL calcs for LowerAtm, if this is NLTE gas
    iDoWeakBackGndUA = +1     !! do weak background (compressed) for UpperAtm, if this is NLTE gas
    iDoLBL_UA = +1            !! do LBL calcs for UpperAtm, if this is NLTE gas    	       

               as usaul, can read in the results using eg
	       [dnlte,w]   = readkcstd('Results/Results_0/vt1_sun40_120km.dat');
	       [dnlteUA,w] = readkcUA('Results/Results_0/vt1_sun40_120km.dat_UA');
	       
3/29/18        Cleaning up the NLTE routines. Made a H2016/400ppm version of weak background lines
               and first order linemix coeffs (as opposed to the ~H2004 or H2008 version we have
	       been using). This meant that
	         -- caUA_US_STD_385ppmv and caLA_US_STD_385ppmv have been changed in the include
		    files and source code to caUA_US_STD and caUA_US_STD
	         -- renamed many of the INCLUDE/template*.param files so they include _NLTEH20XY
		    to indicate which HITRAN version has been used for NLTE
		 -- had to fix some of the modules because of PLEV_KCARTADATABASE_AIRS was
		    having array bound problems
		    
2/27/18        SPECTRA now allows you to have raAltComprDirsScale
               which tells you how to scale the "alternate" optical depths
	       So for example if you made LBLRTM CO2 ODs using 385 ppmv, but the
	       kCARTA code expects ODs for 400 ppmv, you set raAltComprDirsScale = 400/385 = 1.038961
	       
11/25/17       n_rtp.f90 : Subroutine FindError
               IF ((rT .lt. 150.0) .OR. (rT. gt. 400.0)) THEN      changed to
               IF ((rT .lt. 140.0) .OR. (rT. gt. 400.0)) THEN      

9/29/17        Makefile_tar_objs_data_f90 now requires you to comment/uncomment which
               executable you are making, so that the fpp string "TXTRTPFLAG" can be
	       set (when doing TXT execs) or left empty (regular rtp)

               The .o and .mod were rearranged so that the basic version compiles
	       This also means compared to SRCv1.18/*.f many of the subroutines/functions
	       have been moved around within the files

               rayleigh, nir_vis_uv routines have been removed since we have interface to LBLDIS
	       limb viewing routines have been removed for now

               n_mainTXT has been removed, by being absorbed into n_main via the
	       fpp "TXTRTPFLAG"
	       
September 2017 f90 version. Made modules, so rearranged subroutines/functions
               within the files and/or made new files
	       Removed limb viewwing routines for now
	       Removed NIR-VIS_UV "rayleigh" routines since we have interface to LBLDIS
	       
v1.18
-----
3/29/18        Cleaning up the NLTE routines. Made a H2016/400ppm version of weak background lines
               and first order linemix coeffs (as opposed to the ~H2004 or H2008 version we have
	       been using). This meant that
	         -- caUA_US_STD_385ppmv and caLA_US_STD_385ppmv have been changed in the include
		    files and source code to caUA_US_STD and caUA_US_STD
	         -- renamed many of the INCLUDE/template*.param files so they include _NLTEH20XY
		    to indicate which HITRAN version has been used for NLTE
		 -- had to fix some of the modules because of PLEV_KCARTADATABASE_AIRS was
		    having array bound problems
		    
2/27/18        SPECTRA now allows you to have raAltComprDirsScale
               which tells you how to scale the "alternate" optical depths
	       So for example if you made LBLRTM CO2 ODs using 385 ppmv, but the
	       kCARTA code expects ODs for 400 ppmv, you set raAltComprDirsScale = 400/385 = 1.038961

11/25/17       rtp_interface.f : Subroutine FindError
               IF ((rT .lt. 150.0) .OR. (rT. gt. 400.0)) THEN      changed to
               IF ((rT .lt. 140.0) .OR. (rT. gt. 400.0)) THEN      

1/26/17        Can have background thermal done by 6 methods (all constant T across layer)
                 integration
                    exponential gaussian integration (NEW, few quadrature angles)
                    gaussian-legendre integration (few quadrature angles)
                    gaussian  integration (very slow, many many angles)
                    accurate single downwell angle computed at all layers, all points
		  diffusive angle
                    accurate single downwell angle computed from L to ground, acos(3/5) from TOA to L DEFAULT
                    single downwell angle (eg can set acos(3/5)) at all layers
		  no background thermal
	       See  ../TEST/REFL_BACKGND_THERMAL/test_iaaOverride.m
	       
1/14/17        Using ifort with all safety features ON, fixed quite a few bugs
               relating subroutine number of arguments and size of arrays/matrices
	       
               nlayers.f turned out to be quite buggy, when reading/processing
               text levels profiles
	       Noticed that after running levels profile through klayers and kcarta,
	       then doing the OD uncompression and running through RT, and then
	       gaussian convolving over 0.5 cm-1 res/0.5 cm-1 FWHM
	       a) integrated T(z) profile is largest at topmost layer (0.005 mb-0.010 mb)
	          so have about 1 K BTdiffs deep in the 4 and 15 um bands
	       b) the column water amounts are very similar, but still get about 0.2 K diff in
	          the window regions; ratio between profiles is about 0.9979 +/- 0.0057
		  
12/20/16       caaTextOverride = +2 is for 100 layer clouds MRO
               caaTextOverride = +1 is for 100 layer clouds,
	           doing cloud cal using cc(i) and clear cal using (1-cc(i)) layer by layer
               caaTextOverride = -1 is for 100 layer clouds,
	           doing cloud cal+clear calcs and the rfinal = tcc rcld + (1-tcc) rclr

11/25/16       Added caaTextOverride to nm_params so you can have a text file
               with the 100 layer code. This gets set to caaTextOverrideDefault
	       and goes globally with every chunk, from p.cc, p.ciwc, p.clwc
	       all interp'd to the AIRS 100 layers!!!
	       
               Remember  p1.cfrac(1) + p1.cfrac2(1) - p1.cfrac12(1) = p1.tcc
	       The text file will have following columns (first column is iMRO)
	          +1.0/-1.0   nLAYS tcc  cfrac1    cfrac2      cfrac12    0.0 
		if iMRO = +1 followed by the following 100 columns
	          laynum  plevs cc      gas_201(W)  gas_202(I) gas_203(A) ptemp
		if iMRO = =1 no need for more info as cc(i) assumed to be 1.0 for all layers
	          laynum  plevs cc      gas_201(W)  gas_202(I) gas_203(A) ptemp		
		  
               That way when the code is run, it does RT similar to sigmaIASI	      
	       namely if iMRO = +1
	         Assume you know radiance at boom of layer (ie from prev layer)
	  	   r(i-1)
	         Then cloud frac = cc(i)
	           rClear = r(i-1) exp(-tau(i)/mu) + B(T)(1-exp(-tau(i)/mu))
		   tauC(i) = tau(i) + (tau_WaterCloud(i) + tau_IceCloud(i))*cc(i)
	           rCloud = r(i-1) exp(-tauC(i)/mu) + B(T)(1-exp(-tauC(i)/mu))		 
	         r(i) = rCloud + (1-cc(i)) rClear
	       while if iMRO = -1
	         Do cloudy calc through all layers assuming cc(i) = 1
	         Do clear  calc through all layers assuming cc(i) = 0
		 rTOA = tcc rCloudy + (1-tcc) rClear

               MRO = 2 : use Marco Matricardi ECMWF 2005 Tech Rep. 474
	       
	       Typically 101 = cloudtype for water = gas_201 = clwc
	       Typically 201 = cloudtype for ice   = gas_202 = ciwc
	       
 11/25/16       To use 100 layer code, you need to go from ECMWF/ERA/MERRA model
               91 level fields to 100 layer klayers output. To do this, do
  fip = 'forITOVS_ECM_100layercloud.ip.rtp';
  fop = 'forITOVS_ECM_100layercloud.op.rtp';
  gas_str = 'nwant=10 listg=1,2,3,4,5,6,9,12,201,202 ';
  h1ALL_ip = h1ALL;
    h1ALL_ip.ngas = h1ALL.ngas + 2;
    h1ALL_ip.glist = [h1ALL.glist; [201 202]'];
    h1ALL_ip.gunit = [h1ALL.gunit; [21  21]'];
  p1ALL_ip = p1ALL;
    p1ALL_ip.gas_201 = p1ALL.clwc;  %% 201 = water cloud ~ ctype 101
    p1ALL_ip.gas_202 = p1ALL.ciwc;  %% 202 = ice cloud   ~ ctype 201
  rtpwrite(fip,h1ALL_ip,h1aALL,p1ALL_ip,p1aALL);
  klayers100 = '/home/sergio/klayersV205/BinV201/klayers_airs_x_testmeCLOUDversion';
  klayerser = ['!' klayers100 ' fin=' fip ' fout=' fop ' ' gas_str];
  eval(klayerser)	       
		  
c 11/25/16        Added the following to /home/sergio/git/rtp/rtpV201/include/rtpdefs.f
c          real*4     cc(MAXLEV)           ! cloud cover
c          real*4     ciwc(MAXLEV)         ! cloud ice water content
c          real*4     clwc(MAXLEV)         ! cloud liq water content
			      
11/16/16        kThermalAngle is now also in nm_params
                So you can easily set the constant diffusivity angle
		even when you are using an rtp file
		(instead of only setting it in nm_radnce which assumes
		 no rtp file being used)
		 
11/16/16        Can now control nm_frqncy rf1,rf2 when input file is RTP
                by setting iaaOveride(1,8) = +1

11/16/16        Can dump out L2G ODS (kLayer2Sp=3) or L2G transmiitance (kLayer2Sp=4)

11/14/16        Found a bug in RadiativeTransfer() which is called only by
                routines doing reflected thermal.
                Input was angle (radians) but subr expected cos(angle)		
		  ie it was expecting angles in radians, but was not doing
                      exp(-tau/cos(angle)); instead it was doing
                      exp(-tau/angle).
		This really impacts the acos(3/5) at all layers calc!!!
		(ie subr Diffusivity_AllAnglesEqual in rad_diff.f)
                Others (quadrature routines in rad_quad.f) were minimally affected
		Now expects input angle (radians) and it does the cos(angle)
  		grep -in 'call radiativetransfer(' *.f
                
10/8/16         Created global var iaaOverride in nm_params, so you can override lots of
                defaults params at run time (most of which are barely ever switched)
                such as iSARTAChi,iSPlinetype,iUsualUpwell
                3 main sets : General/RadTrans/LBLRTM Tape5/6
		The params allow you eg to set kTemperVary (iusing iaaOverride(2,1))
		in nm_params, instead of iTemperVary in nm_radnce
		See lines 2000+ in kcartamisc.f
                If using iaaOveride(2,1) = 43 (LBLRTM style RT) then can also do
		a regression based correction to BT_TOA, by setting iaaOveride(2,9) = 1

                Also have global var caaTextOverrideDefault so that you can carry a texfile
		through the various chunks
		
10/2/16         Made caComment in nm_output character*120 so you can eg type
                123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
		'lblrtmV12.4 ODs for g2,5,6; UMBC ODs other gas;FWO Mix1 = 1 -1 1.0 2; Mix2 =101 0.0 102 0.0 103 0.0 for SARTA, no cont'
		
                Moved caVersion from pre_defined.param to the template_kcarta*.param
                files. This will hopefully ensure that each time a new template is
		made for kCARTA, and then included at compile time, it will be
		more straightforward to figure out which kcarta.param was used for
		the bkcarta.x or kcarta.x executable .. and then the .nml file
		tells you the nm_spectra settings etc
		WARNING DO NOT MIX eg 400 ppm reference profile with 385 ppm LBLRTM ODs!!!

                The readkcstd*.m files modified so caVersion is the third optional
		output  [d,w,caVers] = readkcstd(fname)

9/30/16         Turned off Snell's law during ray trace, so kcarta is more like sarta
                Cleaned up printing of raytracing

6/2/16          Fixed a bug with raAtmLoop being set for scanang/satzen

6/2/16          If you use an rtp file to set the atmosphere and want to
                turn OFF ray tracing when raAtmLoop = 3. then set raSatHeight = -1.
		See thefollowing comment in rtp_inrerface.f
 Living dangerously : angle = 0 so satHeight = 0 fir raAtmLoop no ray trace

5/3/16          If kCO2Path includes 'lblrtm' or 'LBLRTM' then you tune off
                chi fcn by setting kCO2_UMBCorHARTMAN = -1 in kcarta.param

                Now the code automatically checks for this and stops running
		if kCO2Path / kCO2_UMBCorHARTMAN are inconsistent

                Also if you set extrenal gases using namelist nm_spectr then
		if gasID == 2 and caaAltComprDirs(iX=2) includes 'lblrtm' or
		'LBLRTM' then the cose automatically sets
		      kCO2_UMBCorHARTMAN -1
		and proceeds
		
4/21/16         in MOLGAS and XSCGAS, options for iNgas and iNXsec are now
		   -5/-6  for the LBLRTM version which allows g1-32,51-63
		   -1     for all
		   +n     for select few
		http://web.gps.caltech.edu/~drf/misc/lblrtm/lblrtm_instructions.html
		RECORD 1.3.a implies g 1-38, but Table 1 seems to imply gases 32-38 are empty?
		Table 2 lists the xsec gases (and HNO3 (g12) is included there as well !!??)
                (have got rid of the -114 switch, which is very similar to the -5/-6 switch,
		 except it allows gases 1-31)
		
4/15/16         kSetThermalAngle = -1 : use CONST in tau temperature variation for
                                        quick fast background thermal(default)
                kSetThermalAngle = -2 : use LINEAR in tau temperature variation for
                                        quick fast background thermal (set when kFLUX > 0)
                kSetThermalAngle = +1 : user specified angle for 
                                        quick fast background thermal (set when kFLUX > 0)
	        However, if kTemperVary == 43, then the code does both
		  (a) downwelling thermal using the three angles/LBLRTM "linear in tau" flux
		      calcs using new function IntegrateOverAngles_LinearInTau
		  (b) upwelling radiance also using "linear in tau" calcs
					
3/26/16         In nm_radnce, iTemperVary is now a namelist param (default = -1 for
                kCARTA usual constant
                in temeprature variation, can set to 43 to LBRTTM emulation)
		Note this is only for upwell RT (and fluxes) .. jacobians still assume
		constant in tau
		
                To quickly do a kTemperVary = +43 calc for rads (w/o fluxes) go to
		  SUBROUTINE CheckParams in kcartamisc.f
		and uncomment the line looking like
      !kTemperVary = +43     !!! >>>>>>>>>>>>> if you want RT to do what LBLRTM does <<<<
		
3/2/16          PCLSAM twoslab flux calcs now do the same as PCLSAM twoslab radiance calcs
                namely (1) clouds 1,2 (2) cloud 1 (3) cloud 2 (4) clear (5) weighted sum!!!

                Type      |    kWhichScatterCode NEW | kWhichScatterCode OLD  
                ----------+--------------------------+----------------------
                Clear/Abs |         0                |       0
                kTWOSTR   |         1                |      -2
                RTSPEC    |         2                |      -1 
                DISORT    |         3                |      +1
                PERTURB   |         4                |
	Default	PCLSAM    |         5                |
		RAYLEIGH  |         6                |

                note that really, only PCLSAM (5) is supported/tested recently

2/12/16         added ../INCLUDE/kcarta_v118HIGHRES_IR.param and
                ../INCLUDE/pre_definedHIGHRES_IR.param to do 0.0005 cm-1 calcs in the
                605-2830 cm-1 range

1/19/16         kTempervary is set in "checkparams" ... if you want to reset it from "const" to
                "linear in tau" when only doing RT, look at that routine
		If doing fluxes, then kTemperVary always set to +43 == what LBLRTM does
		  
1/14/16         Cleaned up/improved subr MakeRefProf (especially for arbitrary layers)
                Found/fixed a bug in subr xWeights (for arbitrary pressure layers)
		-- now use 100 <Pavg> to find the layers to do interpoation onto aritrary p_in
		    (rather than 101 <Plevels>
		-- had a bug which set weights = 1 if the delta(p1-p2) was 1e-3 atm; since the
		   pressure layers can be "quite close in psapce" (in atm), this threshold
		   is now only used if delta(p1-p2) <= 1e-6
		
12/28/15        Moved LBLRTM TAPE5/6 routines to n_layers_lblrtm.f

                May need to change this in line 180-190 of n_rad_jac_scat.f
                If angle in TAPE5 > 90 ==> downwell rad (instr at ground)
                If angle in TAPE5 < 90 ==> upwell   rad (instr at TOA)		

   	If kRTP == 1,   kSurfTemp in *PARAMS can ONLY be -1 so use p.stemp for surf temp
   	If kRTP == 0,-1, meaning of parameter 7 (kSurfTemp in *PARAMS) was originally
                -1.0 : use surface temperature set by user in *RADNCE
                +1.0 : use surface temperature interpolated by pressure 
                       levels and added to offset set by user in *RADNCE
                       Note that the interpolation is smooth in AVERAGE
                       pressure, and not in actual pressure
   	If kRTP == 0,-1,-5,-6 meaning of parameter 7 (kSurfTemp in *PARAMS) is now
                -1.0 : use surface temperature set by user in *RADNCE
	        +1.0 : use raTSurf from nm_radnce stemp set by user LBLRTM TAPE 5
		
                Introduced kLBLRTM_toa so that flux calcs can stop at LBLRTM toa
		for direct comparison of heating rates and fluxes

                Also when doing internal klayers integration can either use
		AIRS 101 levels, or the levels that came from LBLRTM TAPE5
		
                If kFlux = 2 (heat rate) then nlevs = nlays+1 heat rates are
		output, with heat rate at TOA == 0 always
		Ditto if kFlux = 1 or 3 (up or down fluxes only, at EACH level)
		This way you can more directly compare to up and down fluxes from
		kFlux = 6, which gives the fluxes at GND and TOA (ie at nlevs)

12/18/15        Moved angle routines (eg find gauss angles, saconv, vaconv)
                from rad_misc.f to rad_angles.f

                Tweaked code using ifort77 compiler

                If kTemperVary == 4 and iAtmLoop = 3 (do multiple
                atmosphere, changing satzen) then
                "rad_trans_SAT_LOOK_DOWN_LINEAR_IN_TAU_CONST_LAYER_ANGLE"
                does upwelling radiative transfer, using these input
                angles at ALL layers ie effectively mimics the RT for
                flux clacs, which are done at same angle

                For T(z) very small, so that h nu /K T >> 1, the ifort
		compiler was giving planck radiances of infty or
		nan. So now I do a check, and if this is a large
		number, I set expt(hv/kT)-1 = 1.0e10. GOt rid of
		"inhouse" ttorad, and now code always calls
		ttorad(raFreq(iFr),rT) instead of each routine doing
		its own ttorad
		
08/09/15        kcarta.x does scattering, and the .nml fie needs to have
                iNcloud_RTP > 0
                If you want to use the same RTP file to drive clear calcs,
		then simply run bkcarta.x ... the code now looks at
		cloudparams, but since you are running bkcarta.x then
		kAllowScatter = -1. So it prints a warning msg, and turns off
		all cloud parameters, allowing clear calcs to be done
		
07/21/15        If kCARTA reads cloud info from RTP (cprtop/cprbot, cngwat etc)
                and computations are PCLSAM, then they duplicate SARTA TwoSlab cloud.
		kCARTA manipulates cloud top/bottom so they occupy complete layers.
		This means "cprop/cprtop2/cprbot/cprbot2" can change, and so
		a seven row, four column textfile "fname_CLD" is dumped out
		with the following info
        caStrJunk(1) = 'typ '
        caStrJunk(2) = 'ctop'
        caStrJunk(3) = 'cbot'
        caStrJunk(4) = 'cng '
        caStrJunk(5) = 'csz '
        caStrJunk(6) = 'frac'
        caStrJunk(7) = 'fr12'            
        write(kStdWarn,*) ' '
        write(kStdWarn,*)'  after expand_scatter'
        write(kStdWarn,*)'    Cloud1  (before/after)        Cloud2 (before/after)'
        write(kStdWarn,*)'-------------------------------------------------------'            
        DO iI=1,7
          write(kStdWarn,*)caStrJunk(iI),raaRTPCloudParams0(1,iI),raaRTPCloudParamsF(1,iI),'<>',
     $raaRTPCloudParams0(2,iI),raaRTPCloudParamsF(2,iI)
        END DO

                Type      |    kWhichScatterCode NEW | kWhichScatterCode OLD  
                ----------+--------------------------+----------------------
                Clear/Abs |         0                |       0
                kTWOSTR   |         1                |      -2
                RTSPEC    |         2                |      -1 
                DISORT    |         3                |      +1
                PERTURB   |         4                |
	Default	PCLSAM    |         5                |
		RAYLEIGH  |         6                |

                note that really, only PCLSAM (5) is supported/tested recently

07/17/15        Regenerated linemix coeffs (using eg HITRAN2012); see
                   SRCv1.18/NONLTE
		for details
                VT_48PROFILES_120_385ppmv_v118
		  contains scripts to generate NLTE and LTE kcarta spectra
		M_Files_for_kcarta_NLTE_LBL_runs
		  contains code to regenrate linemix coeffs (using run8co2)
		M_LopezPuertasF90_code
		  takes LTE profile and produces NLTE VT profiles
		MATLAB_Wrapper_LopezPuertasF90_code is wrapper code
		TEST_NLTE contains some test code (andlone LTE vs NLTE run)
		
drwxrwxr-x 2 sergio pi_strow  4096 Jul 17 17:22 TEST_NLTE
drwxrwxr-x 7 sergio pi_strow 24576 Jul 17 16:37 VT_48PROFILES_120_385ppmv_v118
drwxrwxr-x 5 sergio pi_strow  4096 Jul 17 15:01 M_Files_for_kcarta_NLTE_LBL_runs
drwxrwxr-x 3 sergio pi_strow  4096 Jul 14 00:07 MATLAB_Wrapper_LopezPuertasF90_code
-rw-rw-r-- 1 sergio pi_strow   435 Jul 11 14:57 Readme
drwxrwxr-x 3 sergio pi_strow  4096 Jul  4 13:00 M_LopezPuertasF90_code

07/14/15        Reworked NLTE code a little; some high J (so weak lines) in the
                HITRAN database for "strong" bands eg 2350, do not have
		linemixing coefficients as found by SUBROUTINE linemix ... so
		this was causing code to crash. Now the code also reads in the
		"J" values, and if the offending lines have "J" values higher
		than 100, code says this means
		the linestrength is quite small, so ignore linemixing not being
		available
		
07/02/15        PCLSAM cloud calcs can now include fast SARTA nlte

07/01/15        Since Antartic surface pressures can be as low as 500 mb,
                CO2,N2O,CO, mixing ratios were failing if iBot=20
		(raPresslevls(20) = 596 mb)
                So subr Get_Temp_Plevs (in n_pth_mix.f) and
		subr compute_co2_mixratio (in kcartamisc.f)
                both needed to have iBot tweaked to layer 25 or above
		(raPresslevls(25) = 496 mmb)
		else eg NLTE failed since OC2 mixratio was NAN, and code could
		not correctlyccompute temperatures at pressure levels

06/30/15        Tweaked cloud entering routines in rtp_interface.f, since if
                there were
                a) two clouds too close together (bot of cld 1 close to
		   top of cld2)
		b) one of the clouds too close to surface
		the code used to
		a) stop because it said the clouds occupied the same layers
		b) do a pressure average of (layer above surface, and 0), and say
		   oops this cloud layer is ABOVE the layer above it, and fail
		   
01/22/15        Put in error checking of mixed path weights into "GetMixVertTemp"
                so that if the mixed paths are all set to 0 incorrectly, code
		stops

01/05/15
        Global common block parameter "kTemperVary" now sets, in "SomeMoreInits"
        what the temperature variation in a layer is
          -2 : turn off Planck emission in "scatter_twostream_code.f"
          -1 : constant
          +1 : exponential in tau
          +2 : linear in tau, simple  v2
          +3 : linear in tau, ala RRTM, LBLRTM v3
          +4 : linear in tau, ala RRTM, LBLRTM v4
       for 2,3,4 look at "clear_scatter_misc.f" subroutine
         RT_ProfileUPWELL_LINEAR_IN_TAU
       for 2,3,4 look at "clear_scatter_misc.f" subroutine
         RT_ProfileDNWELL_LINEAR_IN_TAU

10/17/14        Fixed bug in nm_molgas and nm_xscgas ... if user wanted to specify
                which molgases, xscgases he/she wants to use, the code was
		incorrectly not finding any gas; this has been fixed. In addition
		if MOLGAS=2 (CO2) is not specified, this is ok when checking
		T(z); code uses the supplied T(z) profile of first gas (which
		should be WV)

10/17/14        Clear sky flux calcs have been sped up using node points/weights
 		from J. Li's 2000 JAS paper (used in RRTM and LBLRTM)

10/06/14        SPECTRA now allows you to specify alternate compressed 
                directories for gases (other than continumm g101,102)
                  iNumAltComprDirs = number of gases which we want to use 
                                     alternative compressed databases for
                  iaAltComprDirs   = which gases to do alternates
                  caaaAltComprDirs = directory names
                  rAltMinFr,rAltMaxFr (default 605,2830) allow you to tell the
                    code in which band to look for these new gases

7/23/14         Added couple more iDefaults while reading in text input from 
                LBLRTM TAPE5/TAPE6. This way the code can add on missing gases
                (which were not specified in TAPE5) and if the gases were 
                specified in TAPE5 but with a "everywhere 0" profile, then
                the code adds on the US STD profile for that gas

7/14/14         Wrote kcartajpl.f and modifying some routines, so that 
                kcarta can be called as a stand-alone routine; 
                kRTP = +2 means use arguments for setting layers, 
                rather than reading in a profile from RTP or TXT or LBLRTM

7/9/14          For git and tar reasons, moved scatter_all_misc.f to 
                clear_scatter_misc.f

4/05/14         http://www.atmos.umd.edu/~ytma/lblrtm/lblrtm_instructions.html
                kRTP = -5 
                  allows user to supply LBLRTM based levels input (TAPE5)
                kRTP = -6 
                  allows user to supply edited TAPE6 files; this will have 
                  beginning of TAPE5, plus layers info from TAPE6; 
                see examples in DOC

3/31/14         "mini" klayers means we no longer need rtp files; so Makefile 
                has 4 options together with "clean"
                  make clean
                  make == make basic
                  make scat
                  make basicTXT
                  make scatTXT
                where the "TXT" versions are executables compiled without the 
                rtp libs!!
                So a user can supply text based levels and namelist files as 
                input, and have kCARTA chug though to completion. 
                For Planet Earth, if user supplied profile does NOT
                include CO2 and/or CH4, the code adjusts the default US Std 
                levels according to
                   rCO2ppmv = 370.0 + (rYear-2002)*2.00
                   rCH4ppbv = 1.7   + (rYear-2002)*0.01
                   rCH4ppbv = 1.8

3/28/14         Now has a "mini" klayers so user can supply text file and 
                code chugs through to produce layers profile
                Allowing kCARTA to read in textfile with MIX RATIOS, so it 
                does mini kLayers with same assumptions (kRTP = -10)
                - wv input is "wet" MR and so is NOT adjusted
                - other gases eg CO2, O3 are "dry" MR and so they are adjusted
                - if gases are missing from user input, then some standard 
                  gases are added in
                - only tacks on US Std Profile (ie supplied reference profile)

3/20/14         Generalized kcarta.param so user defines parameters for the 
                planetary atmosphere (such as gravity, molar mass, planet 
                radius)

2/16/14         Allow kCARTA to do black/gray emissive clouds just like SARTA.
                This is designed to work with current AIRS L2, where
                   0 <= cfrac1 + cfrac2 <= 1
                meaning the code requires cfrac12 = 0 (see SARTA/bkprep.f)
                Code sets this as kWhichScatterCode = 7
                Warning : kCARTA assumes black/gray clouds, with emissivity 
                given by p.cemis(1) and p.cemis2(1) ie unlike SARTA it does 
                NOT bother with the other
                points in the cemis,cems2 arrays (p.cemis(2:19),p.cemis2(2:19))

                ** NOTE, kept getting an error ***
                  relocation truncated to fit: R_X86_64_PC32 against symbol
                when trying to link in all sctattering packages (DISORT, 
                rayleight, twostream) so put them into scatter_interfaceALL.f,
                and then in the one which is compiled, commmented out these 
                unused packages

1/30/14         Put in iSARTAChi tuning ... read in Scott Hannon SARTA tuning 
                files to multiply WV, O3, CO, CH4, or ALL gases appropriately

11/13/13        If wavenumber range, or dme range, are OUTSIDE of what is in 
                the scattering tables, instead of the code stopping it resets 
                dme or waveno so that the code can continue running (of 
                course, this is not best soln!!)

11/12/13        If we are doing PCLSAM TwoSlab rad calc, and also ask for flux
                calc, then the cloud fractions are automatically reset to 1 
                so that the code need only do ONE rad calc (instead of clear, 
                first cloud, second cloud, overlapping clouds) and ONE flux 
                calc.  To turn off slab clouds (for testing) look at n_main.f
   !!!!! TEST to get rid of clouds !!!!! <<<<<<<<<<<<<<<< >>>>>>>>>>>>>>>>>>>
                So in order to do FLUX calcs for the complete case,
                   r = f1r1 + f2r2 + f12r12 + (1-f1-f2)rclr
                you should do 4 rad runs and therefore 4 flux runs: 
                one with clear (and cloud fracs == 0, cngwat1,2 = 0),
                one with only cloud1 (c2 = c12 = 0, c1 = 1, cngwat2 = 0), 
                one with only cloud2 (c1 = c12 = 0, c2 = 1, cngwat1 = 0), 
                and one with both clouds completely overlapping (c1=c2=c12=1)
                Then add the fluxes as above

11/12/13        Set 100 layer clouds so that if read_rtp finds gas_201 
                and gas_202  while reading in regular gas profiles, it 
                toggles a golbal var k100layerCloud so that the code knows
                it needs to call READRTP_CLD100LAYER; also this makes 
                caCloudPFName redundant in nm_params, as the code automatically
                equates this to caPFname, so it has been removed from the 
                namelist
                
                Also tweaked the kCARTA package so 100layer cloud fluxes can 
                be computed, as can the TwoSlab fluxes
     
9/18/13         Clarified solar irradiance at TOA, when calling 
                rad_trans_SAT_LOOK_UP/DOWN_NIR_VIS_UV
 A) recall all eqns have (spectral flux)/(4 pi) * phasefcn * ssa
    spectral radiance r = ttorad(w,5600) = W/m2/sr/cm-1
    multiply this by sun solar angle (pi Rsun^2 /dist^2) == W/m2/cm-1 = 
    spectral flux F
 B) From Mobley, Estimation of the Remote-Sensing Reflectance from Above 
    Surface Measurements, 1999, Appl Opt 38, we see that Eq 5 states
     When an irradiance Ed falls onto a Lambertian surface, the uniform r
     adiance Lg leaving the surface is given by  Lg = (R/pi) Ed
     So                (Lg)(pi) = (R) (Ed) 
     where R = no units, E = irrad = W/m2/cm-1, Lg = rad = W/m2/sr/cm-1, 
     pi = angle = sr
     The downward irradiance we get from sun is 
          (sun solid angle) x (ttorad(w,5600)
     So the reflected radiance is indeed (R/pi)(SolarDownWard Irradiance)

9/10/13         Since new klayers100 contains gases201,202 this means code no
                longer need additional cloud profile file; caCloudPFname has  
                been simplified to default 'N' if we want slab or no cloud, or 
                default 'Y' if we do want 100 layer cloud profile; then the 
                code internally resets to caPFname. 
                In addition, raCloudDME and iaCloudFile are gone as 
                namlist variables, as they are irrelevant, being replaced by 
                cpsize/cpsize2 and ctype/ctype2. 
                prof.gas_201, prof.gas_202, prof.gas_203 would typically be
                associate with prof.ctype 101,201,301 respectively (ie water 
                cloud, ice cloud, aerosol) ie though you can have two different
                aerosol SLABS, don't try two different aerosol PROFILES.
                Code also uses KN Liou ice dme temperature variation when 
                p.ctype or p.ctype2 == 201, instead of constant cpsize/cpsize2
                rtp_interface.f code needs to recognize this and set k100layerCloud = 1		
                
9/9/13          Introduced iaNML_Ctype in << nm_prfile >>, to map caaCloudFile to 
                p.ctype and p.ctype1
                So for example to map water clouds in RTP file do
		  iBinOrAsc       = 1		 
		  iNclouds_RTP    = 1
                  iaNML_Ctype(1)  = 101
                  caaCloudFile(1) = '../MIEDATA/WATER250/water_405_2905_250'		  
                which means now when code finds p.ctype(ix) = 101 or 
                p.ctype2(iy) = 101, it automatically goes and finds the 
                water scattering tables
                And for example to map water/ice clouds
		  iBinOrAsc       = 1		 		
		  iNclouds_RTP    = 2
                  iaNML_Ctype(1)  = 101
                  caaCloudFile(1) = '../MIEDATA/WATER250/water_405_2905_250'		  
                  iaNML_Ctype(2)  = 201
                  caaCloudFile(2) = '../CIRRUS_BRYANBAUM/v2013/kcarta_100_3000_baumGHM.dat'		
                Typically 101 = water, 201 = ice, 301 = aerosol

                Code is smart enough to figure out which of these clouds to 
                use eg if all cloud fracs cfrac=cfrac2=cfrac12 = 0, then it 
                does a clear cky calc even if you told it to expect a 
                cloudy sky calc
               
9/7/13          If kRTP = 1, the PCLSAM scattering mimics SARTA fast model : 
                  r = c1' r1 + c2' r2 + c12 r12 + clr  rclr
                where r1   = radiance with only cloud1
                      r2   = radiance with only cloud2
                      r12  = radiance with both overlapping cloud1 cloud2
                      rclr = clear sky radiance
                      clr = (1-c1-c2+c12)
                    c12 <= max(c1,c2)
                where c1' = c1 - c12 = cloud 1 alone
                      c2' = c2 - c12 = cloud 2 alone

                    So for example if c1=c2=c12 = 1, clr=0
                    So for example if c1=c2=c12 = 0, clr=1
                This (internally) sets iAtmLoop = 100,iNatm = 5 so that five
                clear sky atms can be duplicated as needed
                See SUBROUTINE InterfaceScattering in scatter_interface.f 

                If kRTP = -1, the PCLSAM scattering tries to mimic the SARTA
                fast model, but has cfrac1 = 1.0 always; if there is a second 
                cloud cfrac2 = cfrac12 = 1 else cfrac2 = cfrac12 = 0; this 
                way clr frac = 0 always

9/4/13          Cleaned up/added new solar datafiles in NIR - VIS - UV 
                (freq >= 2830) using data from 
                      http://rredc.nrel.gov/solar/spectra/am0/
                National Renewable Energy Lab (NREL) releases 
                So these replace the files I had originally put together from
                Jack Kumer (NIR) and SBDART (vis)

                Have kept IR (605-2830 cm-1) solar datafiles the same, 
                remaining consistent with SARTA. 
                See Thekaekara, M.P. 1973.  Solar energy outside the 
                Earth's atmosphere, Solar Energy v.14 p.109-127 as well as 
                /asl/sarta/code/rdsun.f

                For FIR (freq < 605), simply used ttorad(freq,5800); makes 
                things a little discontinuous at 605 cm-1 (when we use SARTA 
                data) but when multiplying by 1e-5, this is tiny compared to
                terrestrial radiances

8/30/13         Put iRayleigh = +1 in clear sky rad_trans_SAT_LOOK_DOWN
                so simple rayleigh done if 0 < Solzen < 90 and             
                raFreq(1) > 5000 cm-1

8/1/13          Found a bug in writing to jac.dat_COL since kStdJacob2 was not
                being initialized (default unit was 0, which is same as  
                STDERR), so occasionally junk could get into the file

7/30/13         Removed h20*.f and calxsc*.f from Makefile, moved these
                to (no longer used) OLD_CONT_BLOCKDATA_AND_XSEC

7/1/13          Clarifying angles in kCARTA, after Larrabee noticed bug vs 
                SARTA; also now make sure rtp_interface.f and n_rad_jac_scat 
                both put in rSatHeight in meters

                  for downlook, rSatAngle = scanang (at instr)
                                rSolarAngle = local solar zenith (at surface)
          
                  for uplook,   rSatAngle   = local zenith (at surface)
                                rSolarAngle = local solar zenith (at surface)

                  for limb,     rSatAngle = scanang (at instr)
                                rSolarAngle = rSatAngle
                
 c>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                WHICH MEANS WE MODIFY WHAT WAS in kCARTA since v1.10 to make 
                things consistent
02/07/02        RTP SatHeight,raLayHgt are both in meters! OTOH the old 
                KLAYERS had SatHeight and LayHgt in km!
                So now we convert old style KLAYERS raLayHgt to meters. 
                Similarly we convert new style RTP satheight to km.      
 c>>>>>>>>>>>>>> changed to METERS in June 2013
 c>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6/25/13         In kcarta.param, kCO2_UMBCorHARTMAN tells us whether or not we
                are using UMBC linemixing (+1) or Hartmann linemixing (-1); 
                this then helps determine if we use some CO2 chifiles in 
                kCoeffMAIN.f, kCoeffFAST.f or not 

6/25/13         If h.vcmin < 0 and h.vcmax < 0 then kCARTA resets them to 
                605,2830 respectively

6/20/13         iVary has constant, exponential, linear in tau variations for 
                upwelling RT, as set by kTemperVary
      kTemperVary = -1     !!!temperature in layer constant USE THIS!!!!
      kTemperVary = +1     !!!temperature in layer varies exponentially 
      kTemperVary = +2     !!!temperature in layer varies linearly, simple
      kTemperVary = +3     !!!temperature in layer varies linearly, ala RRTM, LBLRTM

6/7/13          Changed names of FLUX files, as the contents now more or less 
                correspond to what RRTM uses
      orig
        IF (kFLux .LE. 2) THEN
          caFluxFile(iInt+1:iInt+5)='_FLUX'
        ELSEIF (kFLux .LE. 5) THEN
          caFluxFile(iInt+1:iInt+4)='_OLR'
        END IF
      new
        IF (kFLux .EQ. 1) THEN
          caFluxFile(iInt+1:iInt+5)='_DOWN'   !! down welling flux at 
                                              !! bottom of 100 layers
        ELSEIF (kFLux .EQ. 2) THEN
          caFluxFile(iInt+1:iInt+5)='_HEAT'   !! up-down heating rate at all 
                                              !! 100 layers
        ELSEIF (kFLux .EQ. 3) THEN
          caFluxFile(iInt+1:iInt+3)='_UP'     !! up welling flux at 
                                              !! top of 100 layers
        ELSEIF (kFLux .EQ. 4) THEN
          caFluxFile(iInt+1:iInt+4)='_OLR'    !! upwelling flux at TOA

        ELSEIF (kFLux .EQ. 5) THEN
          caFluxFile(iInt+1:iInt+4)='_OLR3'   !! upwelling flux at TOA, 
                                              !! tropopause,dnwell at gnd
        ELSEIF (kFLux .EQ. 6) THEN
          caFluxFile(iInt+1:iInt+4)='_ALL'    !! up,down flux at tops/bottoms 
                                              !! of each layer
        END IF

5/26/13         iAtmLoop and raAtmLoop now allow the user to "loop" over the 
                same profile
                This is sort of like a jacobian! for satang,solang,spres,TOA 
                No cloud params looping (go to SARTA for now)
                When scatter = PCLSAM, code  (internally) sets iAtmLoop = 100,
                iNatm = 5 so that 5 clear sky atms can be duplicated as needed

05/23/13        Clarified : zobs = observer/satellite hgt is in meters, not 
                km, so made some fixes
                This will impact local view angles (especially if extreme)
                See subroutine FindLayerAngles in rad_misc.f

05/22/13        Put in limb view! This is indicated to code by 
                  raPressStart(1)    =  000.0  <<< tells the code garbage
                  raPressStop(1)     =  500.0  <<< sets the tangent height
                  raSetEmissivity(1) =  +100   <<< tells the code : limb view
                OR
                  raPressStop(1)     =  000.0 <<<  tells the code garbage
                  raPressStart(1)    =  500.0 <<< sets the tangent height
                  raSetEmissivity(1) =  +100  <<< tells the code : limb view
                Eventually code internally sets 
                        raPressStart(1) > raPressStop(1), and 
                figures out the satellite scan angle based on raPressStart(1). 

                If iaKsolar >= 0, the code does solar occulation. 

                Needed to include some common blocks for limb paramters in 
                post_defined.param, as well as new routines in rad_limb.f and 
                jac_limb.f
                Since most of the radiation comes from the TANGENT PT to INSTR
                portion, jacobians are ~ duplicates of the "jac_dn" routines

                RT code uses temperature variation across layers (as the 
                optical paths are long, so need to account for this)

04/22/13        Put in logical function "isfinite" to trap bad (not finite) 
                Amount,Temp coming in from rtp files, as this makes ODs 
                infinite or NaN which gives bad radiances!

05/20/12        Have put in a rMult0 = 0.8 factor into compressedNLTE because 
                I think the temperature interpolation can give planck_coeffs 
                that are way too large in the 0.005-0.00005 mb upper 
                atmosphere, especially for the 2350 lines!

05/16/12        iNLTE_SlowORFast = +1 for slow LBL NLTE model
                                 = -1 DEFAULT for fast model from interping SARTA 
                                      fast NLTE
                                 = -2 fast NLTE from compress lkup tables 

                Use variable iNLTE_SlowORFast = +1   !slow LBL model
                             iNLTE_SlowORFast = -1   !fast guess SARTA based model
                             iNLTE_SlowORFast = -2   !fast compressed LBL model

                                iChunk_DoNLTE = -1    !default : LTE	       
                Above would set iChunk_DoNLTE = +1    !slow LBL model
                                iChunk_DoNLTE = +2    !fast guess  model
                                iChunk_DoNLTE = +3    !fast compressed LBL model
                For iNLTE_SlowORFast = -1,-2 only need these in .nml file : 
                  iNumNLTEGases,iNLTE_SlowORFast,iaNLTEGasID(),iaNLTEChunks(),
                  iaaNLTEChunks(,)
      !matlab cd : /home/sergio/KCARTADATA/NLTE/SARTA_COEFS/ 
      !fname='/asl/data/sarta_database/Data_jan04untun/Coef/setnte_oct05.dat'; 
      ![idchan, freq, coef] = rd_nte_be(fname);

         iNLTE_SlowORFast = -1    !!use the fast SARTA model DEFAULT DEFAULT
         iNLTE_SlowORFast = -2    !!use the fast COMPRESSED KCARTA model
         iNLTE_SlowORFast = +1    !!use the slow LBL SARTA model

v1.17           Stand alone, Leave alone
------

v1.16           
-----
05/15/12        WARNING ** BUG ** WARNING ** BUG ** WARNING **  
                WARNING ** BUG ** WARNING ** BUG ** WARNING ** 

                Have noticed if nm_weight says CO2 need multiplied by eg 1.01,
                then if you are doing NLTE, the UA optical depths (as read in 
                by readkcUA) show the US ODs are actually multiplied by 
                  1.01^2 = 1.02
                Have to see where this rMult * rMult is happening
                (so safest to have caaMix = 1 for ALL gases)

                WARNING ** BUG ** WARNING ** BUG ** WARNING ** 
                WARNING ** BUG ** WARNING ** BUG ** WARNING ** 

05/11/12        If code does LBL NLTE calcs, now also reads in US STD 385 ppmv 
                UA profile and prints a comparison of your supplied UA profile
                with the default one (stored in caUA_US_STD_385ppmv)

05/10/12        Fixed readkcUA.m so it correctly handles ODs and rads being 
                dumped out
                (if ODs and RADS being dumped out, 
                    1 .. N-2 are ODs, N-1 .. N are rads)
                (if only    RADS being dumped out, 1 .. 2 are rads)

05/10/12        iCurrent = +1           Should we use eg 385 ppmv in UA, or
                                        rely on MR given in caaUpperMixRatio
                now switch the user sets in kreadVTprofiles.f BEFORE compiling

05/09/12        The NLTE routines have been fixed so they dump out
                  ODs at 1100 mb - 0.005 mb    (kCARTA 0 km - 80 km : junk.dat)
                                               (read using readkcstd.m)
                      at 0.005 mb - 0.00005 mb (80 km - 120 km : junk.dat_UA)
                                               (read using readkcUA.m)
                  Note that the *LAST* two columns in junk.dat_UA are the 
                  0.005 mb and 0.00005 mb (80 km and 120 km) radiances; 
                  entries before this would be layer optical depths

                  PlanckCoeffs for the same two sets; this can be read using
                     [dplanck,w] = readkcPlanck('junk.dat_PLANCK');

05/01/12        kLongOrShort now also affects the warning.msg file
                 -1 : output shortened binary file, summarizing nml file,
                      LONG warning.msg
                 +1 : output longer binary file, which rehashes input nml file,
                      LONG warning,msg
                 -2 : output shortened binary file, summarizing nml file,
                      SHORT warning.msg
                 +2 : output longer binary file, which regurgitates input 
                      nml file, 
                      SHORT warning.msg
                  0 : only output data!!! only works for radiance file 
                      (no flux,jac allowed yet)

03/31/12        rtp_interface.f checks to make sure the layer heights/thickness
                make sense; in particular if raLayThick < 100 cm, it barfs!!!

09/18/11        Now only allow CKD = -1 (none),     
                                   = 21,23,24 (pre 2000 versions)
                                   = 1 (MTCKD) and derived 4,6

09/17/11        nm_profile can now include iAFGLProf, which tells the code how
                to substitute gas amounts if gas is not present in rtp profile
                Allowed numbers are 1..6 (STD,TRP,MLS,MLW,SAS,SAW)

09/14/11        Have made gases 101.102 "compressed" gases, instead of
                relying on the lookup table. Note that only the FORN/SELF
                coefficients are compressed, not the dimensionless 
                    optical depths = coeff * layeramt
                So the uncompression code is slightly different than that for 
                for the regular/xsec gases 1-42,51-81,103 

08/18/11        When doing temperature jacobians, pretty much do sum(d/dT) over
                all gases. This is done by setting 
                    kActualJacs = -1,20,30,40,50,100,100ABCXYZ
                However, can look at temp dependance of only gases listed in 
                iaJacob by setting 
                    kActualJacs = -2,  ,32,  ,  ,102,102ABCXYZ

                     -1 = Q(z),T(z),W(z),Surface = ALL profile, surface jacs
                     -2 = ** NEW **
                          Q(z), T(z) summed over specified gases QJ{i},WGT(z),
                          Surface = ALL profile, surface jacs
                     20 = Q(z) ONLY 
                     30 = T(z) ONLY
                     32 = ** NEW **
                          T(z) ONLY, summed over the specified jacgases QJ{i}
                     40 = WGT(z) ONLY
                     50 = Surface ONLY
                    100 = column gas jacobians, column temp jac, stemp jacobian
                    102 = ** NEW **
                          column gas jacobians, column temp jac summed ONLY 
                          over specified jacgases QJ{i}, stemp jacobian
                    100ABCXYZ = column gas/temp from *radiating* layers wrt 
                                surface ABC to XYZ, and stemp
                                note d/dT(i) here explicitly accounts for 
                                layer temp changes, and includes the 
                                OD changes due to temp changes; so it maybe a
                                good estimate, as it does radiative transfer
                                with correct background thermal
                    102ABCXYZ = NEW
                                temp jac ONLY includes contribution for the
                                specified jacgases QJ{i}
                                column gas/temp from *radiating* layers wrt 
                                surface ABC to XYZ, and stemp
                                note d/dT(i) here explicitly accounts for 
                                layer temp changes, and includes the 
                                OD changes due to temp changes; so it maybe a
                                good estimate, as it does radiative transfer
                                with correct background thermal
                Options -1,-2,20,30,32,40,50 dump usual  jacobian(z) file 
                  (reackcjac)
                Options 100,102 
                        100ABCXYZ,102ABCXYZ dumps much smaller col jacobian 
                                            file (reackcbasic)
                Right now, the default column multiplier is 0.1 (see
                variable rDefaultColMult in subroutine find_radiances_coljac)

07/28/11        Updated the SARTA_NLTE calc from v1.06 to v1.08 ... this 
                model takes into account increasing amounts of CO2 (from 
                default 370 ppmv). See filename = kSartaNLTE

07/19/11        Moved kSartaNLTE = file containing SARTA nlte coeffs into
                kcarta.param

06/24/11        Included the "weights" into the scattering kcartamain.f and
                scattering kcartachunk.f

03/28/11        Fixed a bug for background thermal, for 2805-2830 cm-1 chunk

03/26/11        Fixed a bug when counting kaaNumVecs (gas 1 vs gas 103)

03/24/11        Co2_4um_fudge was not being properly called (as the checking 
                function needed integer, not real, argument)

03/18/11        Faster version of v1.15 : the uncompression routines have been 
                rewritten to take advantage of the fact that profile remains
                the same ==> T offset indices remain the same. This duplicates
                the Matlab version, including the fact that we use linear 
                interpolations

                The code further splits into two, depending on iSplineType
                  iSplineType = 1 : kComp Database, klayers pressure levels 
                                    differ, so need two pressure interp points
                                       use four  weights for most gases
                                       use eight weights for water
                  iSplineType = 2 : kComp Database, klayers pressure levels 
                                    same, so need one pressure interp point
                                       use two  weights for most gases
                                       use four weights for water
                             
v1.15           
-----
07/28/11        Updated the SARTA_NLTE calc from v1.06 to v1.08 ... this 
                model takes into account increasing amounts of CO2 (from 
                default 370 ppmv)

03/28/11        Fixed a bug for background thermal, for 2805-2830 cm-1 chunk

03/26/11        Fixed a bug when counting kaaNumVecs (gas 1 vs gas 103)

03/24/11        Co2_4um_fudge was not being properly called (as the checking 
                function needed integer, not real, argument)

03/01/11        In nm_output, if iaPrinter = 3 AND raaOp(a,b) = -1, the code 
                automatically resets the radiance output pressure at 
                TOA (downlook instr) or GND (uplook instr)

02/02/11        If pressure levels change,then radBoundaryDiff may change. 
                So just do
                INTEGER FUNCTION WhichLevel(iProfileLayers,raPressLevels,p)
                  write (kStdWarn,*) 'in FindBoundary, need iB to lie between'
                  write (kStdWarn,*) 'iLowest and kProfLayer'
                  write (kStdWarn,*) 'iB,iLowest,kProfLayer = ',
                                      iB,iLowest,kProfLayer
                  iB = kProfLayer

11/07/10        Diffusivity_AllAnglesEqual now sets the angle ALWAYS as 
                acos(3/5); Ditto "top"most layers for Diffusivity_Accurate

11/07/10        If doing the 500-605 cm-1 band, kCARTA sets raaGasCoeff(:,100)
                = 0.0 for gas2, as there were problems in the UMBC LBL code 
                for this layer

10/05/10        nm_radnce now allows you to 
                           set emissivity   using raSetEmissivity
                    AND    set reflectivity using rakSolarRefl
        	So if "cakSolarRefl" file does not exist for a simple 
                driver file, then kCARTA simply uses 
                   (1-ems)/pi   if rakSolarRefl is not set, or < 0
                   rakSolarRefl if set

09/01/10        satzen can now be used instead of scanang ... but you better
                have a correct p.zobs as well
                If both "scanang" and "satzen" are in the rtp file, the code
                tries to do a consistency check, and prefers using satzen

08/24/10        To mantain backwards compatibility with kcarta1.14-, which only
                had gases 1-31, and gases 51-63, we now allow the user to set
                iNgas,iNxsec in MOLGAS,XSCGAS to equal -114, which means kCARTA
                will only use *those* gases.
                Option -1 as usual includes ALL gases (1-42,51-81)
                Or +N is to include specified N gases using iaGasesNL,iaLXsecNL

07/30/10        Code now allows GasIDs 1-42 and Gas 51-81. There is a new
                main include file (INCLUDE/kcartaV115_385.param); a couple of 
                parameters in pre-defined param changed to accomodate this
                PARAMETER (kGasComp=42,kGasXsecLo=51,kGasXsecHi=81,kMaxGas=103)

07/31/10        Subroutine readKLAYERS4 in n_pth_mix.f now adds profiles
                for gases 32-42,64-81 by calling AddOnStandardProfile.
                This means old style text KLAYERS/GENLN2 profiles such as 
                "std.prof" can be used by the code. Need to do this for the
                rtp reader as well, so old klayers can be used.
 
v1.14
-----
03/28/11        Fixed a bug for background thermal, for 2805-2830 cm-1 chunk

03/26/11        Fixed a bug when counting kaaNumVecs (gas 1 vs gas 103)

03/24/11        Co2_4um_fudge was not being properly called (as the checking 
                function needed integer, not real, argument)

03/01/11        In nm_output, if iaPrinter = 3 AND raaOp(a,b) = -1, the code 
                automatically resets the radiance output pressure at 
                TOA (downlook instr) or GND (uplook instr)

02/02/11        If pressure levels change, then radBoundaryDiff may change. 
                So just do
                INTEGER FUNCTION WhichLevel(iProfileLayers,raPressLevels,p)
                  write (kStdWarn,*) 'in FindBoundary, need iB to lie between'
                  write (kStdWarn,*) 'iLowest and kProfLayer'
                  write (kStdWarn,*) 'iB,iLowest,kProfLayer = ',
                                       iB,iLowest,kProfLayer
                  iB = kProfLayer

11/07/10        Diffusivity_AllAnglesEqual now sets the angle ALWAYS as 
                acos(3/5); Ditto "top"most layers for Diffusivity_Accurate

11/07/10        If doing the 500-605 cm-1 band, kCARTA sets raaGasCoeff(:,100)
                = 0.0 for gas2, as there were problems in the UMBC LBL code 
                for this layer

10/05/10        nm_radnce now allows you to 
                           set emissivity   using raSetEmissivity
                    AND    set reflectivity using rakSolarRefl
        	So if "cakSolarRefl" file does not exist for a simple 
                driver file, then kCARTA simply uses 
                   (1-ems)/pi   if rakSolarRefl is not set, or < 0
                   rakSolarRefl if set

09/01/10        satzen can now be used instead of scanang ... but you better
                have a correct p.zobs as well
                If both "scanang" and "satzen" are in the rtp file, the code
                tries to do a consistency check, and prefers using satzen

02/27/10        PCLSAM now features column jacobians. NOTE only column jacs
                for specified gases are computed ie it does not do jacs for
                gases 201,202 = IWP, DME

02/20/10        Fixed a small bug in diffusive backgnd thermal. This would 
                affect you in certain channels (2230 - 2280 cm-1) only if
                you used more than 1 radiating atmosphere

02/20/10        For clear sky and for PCLSAM  (and to some extent kTwoStream), 
                kFlux = 5 only outputs ILR/OLR at (GND,tropopause,TOA), 
                instead of up/down going flux at each level; this makes output
                flux files that are about iNumLayer/3 ~ 100/3 ~ 33 times 
                smaller
                1 = up/dn flux at each layer
                2 = heating rate at each layer
                3 = upgoing flux at each layer
                4 = OLR at TOA
                5 = OLR/flux at tropopause/DNW 


01/26/10        Now have gas103 == heavy water (HDO = isotope 4 in HITRAN) for 
                0.0025 cm-1 resolutions bands 
                       (1105-1430,2405-2830 = 'r', 2830-3350 = 's')
                This means kMaxGas=103 in pre_defined.param
                kWaterIsobandStart=2405,kWaterIsobandStop=3330 in kcarta.param 
                tell us where the heavy water bands start/stop. Outside this 
                range, only gasID = 1 is uncompressed (it has all the water 
                isotopes 1,2,3,4,5,6).
                from the directory kWaterPath,kWaterPaths
                Within this range gas1 (isotopes 1,2,3,5,6) and gas103 (isotope
                4) are uncompressed from kWaterIsotopePath

                See subroutine CompFileName in s_misc.f
                If Chunks lie between 605 and 2830 cm-1
                  does some conniptions (well documented in code) to
                  switch between g1 and g103 filedirs, depending on 
                  kWaterIsobandStart/Stop1 and kWaterIsobandStart/Stop2
                So for example, in the H2012 version

                  605-1930 cm-1 had HDO plus other isotopes, so get
                  breakout from IR605/hdo.ieee-le/
                    /asl/data/kcarta/H2012.ieee-le/IR605/hdo.ieee-le/r1905_g1.dat   
                    /asl/data/kcarta/H2012.ieee-le/IR605/hdo.ieee-le/r1905_g103.dat 
                    /asl/data/kcarta/H2012.ieee-le/IR605/hdo.ieee-le/r1930_g1.dat
                    /asl/data/kcarta/H2012.ieee-le/IR605/hdo.ieee-le/r1930_g103.dat 

                  1930 - 2405 cm-1 did NOT have HDO isotopes, so go to
                  h2o_ALLISO.ieee-le and get the "default" all iso
                  (which cannot have ISO=4 in 1930-2405 cm-1 because there are
                  no HDO lines in this region, but would have HDO lines in other regions)
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r1955_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r1980_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r2005_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r2030_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r2055_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r2080_g1.dat
                     /asl/data/kcarta/H2012.ieee-le/IR605/h2o_ALLISO.ieee-le/r2105_g1.dat

12/31/09        Changed iFileStartFr to rFileStartFr to account for noninteger
                chunk starts eg 87.5. This meant a major revamp of kCARTA code
                that dealt with the chunking was undertaken.

12/8/09         Changed fname in subroutine co2_4um_fudge from c*80 to c*120
                Also had to change subr findchifilename from c*80 to c*120

10/06/09        Have FIR1,FIR2,FIR3, IR, VSWIR, NIR and VIS kcarta databases
                See /home/sergio/HITRAN2UMBCLBL/ReadmeSergio for details on
                how to generate the database
                Stopped at 45000 cm-1 because need to think about Rayleigh!
                Also seemed to be missing SO2 cross section HITRAN data ~ at
                  32000 cm-1
                MODIS     goes down to about 0.4 um or  25000 cm-1
                SCIAMACHY goes down to about 1.75 um or 57000 cm-1
    c !!! v = 12000-25000 cm-1, at 0.05000 cm-1 spacing (= 500 cm-1 chunk span)
    c !!! o = 8250-12250 cm-1,  at 0.02500 cm-1 spacing (= 250 cm-1 chunk span)
    c !!! n = 5550-8350 cm-1,   at 0.01500 cm-1 spacing (= 150 cm-1 chunk span)
    c !!! m = 3550-5700 cm-1,   at 0.01000 cm-1 spacing (= 100 cm-1 chunk span)
    c !!! s = 2830-3580 cm-1,   at 0.00250 cm-1 spacing (= 025 cm-1 chunk span)
    c !!! q =  500- 605 cm-1,   at 0.00150 cm-1 spacing (= 015 cm-1 chunk span)
    c !!! p =  300- 510 cm-1,   at 0.00100 cm-1 spacing (= 010 cm-1 chunk span)
    c !!! k =  140- 310 cm-1,   at 0.00050 cm-1 spacing (= 005 cm-1 chunk span)
    c !!! j =  080- 150 cm-1,   at 0.00025 cm-1 spacing (= 2.5 cm-1 chunk span)
                Need to accordingly adjust s_misc.f : 
         SUBROUTINE CompFileName(iLineMix,iGasID,iFileStartFr,iTag,caFName)
         SUBROUTINE CKDFileName(caFName,iGasID,iTag)
         CHARACTER*80 kXsecParamFile,kCompParamFile in kcarta.param
                as well as percolate some other changes through the code
                iActualTag = location in kaCTag (1,2,3,4...)
                iTag       = "value" assigned to file eg 10,15,25,30,...

09/15/09        Fixed a small bug in the Options 100 for col amt jacobians
                (when the gas did not exist for a chunk, it may use whatever
                rubbish there was in memory and call that the OD for that
                gas for that chunk)

08/21/09        Added on CKD 6, which is a fixed up version of CKD 4 (there was
                a problem at 850 cm-1 due to HNO3 incorrectly attributed to 
                water continuum)

07/27/09        Have updated kActualJacs so that jac_up/down (clear sky) does
                     -1 = Q(z),T(z),W(z),Surface = ALL profile, surface jacs
                     20 = Q(z) ONLY 
                     30 = T(z) ONLY
                     40 = W(z) ONLY
                     50 = Surface ONLY
                    100 = column gas jacobians, column temp jac, stemp jacobian
                    100ABCXYZ = column gas/temp from *radiating* layers wrt 
                                surface ABC to XYZ, and stemp
                                note d/dT(i) here explicitly accounts for 
                                layer temp changes, and includes the 
                                OD changes due to temp changes; so it maybe a
                                good estimate, as it does radiative transfer
                                with correct background thermal
                Options -1,20,30,40,50 dump usual  jacobian(z) file (reackcjac)
                Options 100 dumps much smaller col jacobian file (reackcbasic)
                Right now, the default column multiplier is 0.1 (see
                variable rDefaultColMult in subroutine find_radiances_coljac)

07/09/09        Sped up water continuum codes by changing
                   do iL = 1,kProfLayer
                into finding layers between which raAmt(iL) > 0 (ie there is 
                water) and then looping 
                   do iL = iMin,iMax

07/06/09        If Jacobians are to be output, an additional file containing
                extra radiance jacobians is output. This is a very simple 
                file, the same type as kLongOrShort = 0 and will have
                    rST   radiance with stemp perturbed by 1 K
                    rT    radiance with T(z) perturbed by 1.0 K
                    rQ(1) radiance with gas(iaJacob(1)) perturbed by 10%
                    rQ(2) radiance with gas(iaJacob(2)) perturbed by 10%
                etc. So the column jacobian (or SST jacobian) = 
                       new radiance - orig radiance 
                from the regular radiance file.
                Warning : probably won't work for CO2 4 um during day (NLTE)
                          need  G1,G101,G102 for total colum water jacobian
                Name of file = Name of jacobian file + '_COL' or
                             = 'columnjacob.dat' if no jacfile name
                The order of dumping is same as in regular jac file ie gases 
                followed by STEMP

07/03/09        If the pressure levels are the same as those in 
                    include '../INCLUDE/KCARTA_database.param'
                and 
                    all gases are in LTE (iNumNLTEGases <= 0)
                there is NO pressure interpolation, only temp interpolation
                This is to speed up the code

                Also slightly rearranged loops in jac_down.f, jac_up.f to try
                to speed up code depending on kActualJacs setting; since at 
                this stage the code is bound by I/O, this does not really
                improve things!

                Compile absoft f77 code is sped up most by
                - turning up optimization to -03
                - turning off error checking for array bound (-C off)
                these yield speedup from 3min30sec downto 1min50 sec (on taro)
                - putting all background thermal angles at acos(3/5)
                this yields improvements from 1min50sec to 1min30 sec (on taro)
                605-2830 cm-1 (after -O3 and -Coff) 

04/22/09        rtp_interface.f now assumes there is no plays,nrho,rfreq info
                in the .rtp file as this can come from plevs,nemis,efreq

01/17/09	The "warning.msg" file now also dumps out a section that
                mimics the LBLRTM TAPE7 (so this output can be pasted into
                a file that is input for LBLDIS), and another section that
                allows an auxiliary Matlab file (kcarta2lblrtm.m) to read in
                binary KCARTA output optical depths, and produce files that
                LBLDIS can use. You can go turn this on/off by handturning 
                parameter iLBLDIS on/off in n_pth_mix.f

01/16/09        Now have three versions of the code
 ====>>>>         bkcarta.x      : only ODs and rads
   bkcarta.x IN_NMLfile OUT_RADfile 
 ====>>>>         kcarta.x       : ODs, rads, AND jacs, scattering
   kcarta.x IN_NMLfile OUT_RADfile 
   kcarta.x IN_NMLfile OUT_RADfile OUT_JACFILE
 ====>>>>         kcartachunk.x  : ODs, rads, AND jacs, scattering
                      with two extra (integer) input arguments
   kcartachunk.x IN_NMLfile OUT_RADfile 
   kcartachunk.x IN_NMLfile OUT_RADfile OUT_JACFILE
   kcartachunk.x IN_NMLfile OUT_RADfile             -iStartChunk -iStopChunk
   kcartachunk.x IN_NMLfile OUT_RADfile OUT_JACFILE -iStartChunk -iStopChunk

10/08/08        Fixed small bugs in rtp interface to clr sky Jacobians

10/07/08        kJacobOutput now has an option (+2) to dump out d(BT)/dq 
                in addition to
                                     an option (+1) to dump out d(BT)/dq * q
                                     an option (0)  to dump out d(r)/dq * q
                                     an option (-1) to dump out d(r)/dq 
                So had to update the jac_up*.f and jac_down*.f files to 
                accomodate this
                In addition kActualJacs (see below) allows you to control 
                which of the jacobians (all, or gas only, or T only) to do

09/22/08        Changed from spline to linear interp in 
                SetSurfaceSolarReflectance

09/22/08        Fixed bug in n_main.f where raSetEmissivity/iaSetSolarRefl
                had no defaults (and turned it off from n_rad_jac_scat)

06/16/08        Cleaned up/fixed small bugs in clear sky uplook radiances and
                jacobian routines

05/28/08        No longer need NLTE LAPACK routines, which have been removed 
                from kreadVTprofiles.f

05/28/08        kCARTA can now handle head.ptype = 1 with "missing gases" in 
                the rtp profile, in the same way as it deals with 
                head.ptype = 2 (AIRS pseudolevels)

05/05/08        Since NLTE code is complex, made up a new 385ppmv CO2 database
                by simply scaling the exisiting compressed coeffs by 385/370
                So one of three include files can be used, kcarta370.param 
                or kcarta378.param or kcarta385.param; the correct one needs 
                to be linked before compiling the code by calling 
                    "make datafix3XY"
                wihch is part of the Makefile in this directory
                See also ~/KCARTA/UTILITY/for2mat2for_CO2_370_385.m
                Can easily do this for other ppmvs; see 
                  Revisions_Update_NLTECo2ppmv.txt
          
05/05/08        Removed CO2_continuum from NLTE as it was unused

04/24/08        Call "check_co2ppmv" to see if the CO2 ppmv ratio is ok during
                NLTE calls; if caaMix is much different than 1 for NLTE calcs,
                the code bombs as it would rather have you make a new database
                with the correct ppmv

01/01/08        Have updated the KCARTA database for water, ozone, SO2, HN03
                using HITRAN2004
                So now we use  
                       /asl/data/kcarta/v07.ieee-le/
                instead of 
                       /asl/data/kcarta/v20.ieee-le/h2o.ieee-le/

11/27/07        In rad_main.f for sun in FOV of uplook instrument, we adjust
                the incoming sun radiance by the sun-earth solid angle
                (SUBROUTINE rad_trans_SAT_LOOK_UP)

09/13/07        Including effects of Rayleigh Scattering, from SBDART. 
                This is iWhichScatterCode = 6

09/07/07        Used SBDART datatables to include solar from 6050 - 13000 cm-1
                and Jack Kumer's database for the Near IR.
                So iakSolar can be set to 0 (use 5800K) or +1 (use tables)
                See KCARTA/UTILITY/make_solar_vis.m

08/08/07        jac_up/down (clear sky) can now do 
                     ALL (-1) or  ONLY Q,T,W,Surface (20,30,40,50) jacobians
                See variable "kActualJacs" in SUBROUTINE Up/Down-wardJacobian,
                set as a "nm_params" parameter
                This supposedly speeds up the jacobian code, but not by much!
                (though when doing d/dq only, it also checks to see if gasX
                 exists; else it automatically dumps zeros)

07/15/07        Updated kcoeffMAIN,kcont_xsec,s_misc so that kCKDpath can
                be set differently depending on 605-2830 cm-1 band, or other 
                band. Also have put this into v1.10

07/15/07        Updated s_misc.f so that compfilename can be set correctly 
                depending on 605-2830 cm-1 band, or other band
                Also have put this into v1.10

06/20/07        kCARTA can now handle head.ptype = 2 (AIRS pseudolevels)
                This means kcarta.param needs a new parameter
                  kUSStdPath == path to US Std Profiles for h.ptype = 2 
12/01/09        These profiles are the same as in kProgRefPath, so just get 
                rid of this parameter, and update subr get_us_std

05/16/07        Updated SUBROUTINE CompFileName in s_misc.f to handle more 
                spacings in the kCompressed files
                Similarly updated SUBROUTINES UpperLimits,LowerLimits in 
                freqfile.f
                
04/10/07        For kTwoStream, got rid of the "reset raE,raF" code if things
                turn negative; now leave them negative. Makes things smoother!

04/04/07        For clear sky and for PCLSAM  (and to some extent kTwoStream), 
                kFlux = 5 only outputs ILR/OLR at (GND,TOA), instead of 
                up/down going flux at each level; this makes output flux files
                that are about iNumLayer/2 ~ 100/2 ~ 50 times smaller
                1 = up/dn flux at each layer
                2 = heating rate at each layer
                3 = upgoing flux at each layer
                4 = OLR at TOA
                5 = OLR/flux at tropopause/DNW 

02/15/07        Currently can only do PCLSAM radtransfer for multilayer clouds

                Have implemented flux and Jacobian codes for a DOWNLOOK INSTR.
                Note the Jacobian code can be meaningless when you "combine" 
                scattering params. So, as a rough proxy for each layer find 
                the max IWP and ascribe the scattering params to this spieces;
                then do Jacobian calculations pretending only this spieces 
                exists at that layer. This can then show the thermal
                structure of atmosphere via d(rad)/d(IWP); see 
                SUBROUTINE AddCloud_pclsam_Jacob_downlook_sunshine

                Caveat : new klayers takes (ECMWF) cloud profiles in g/g and 
                converts them to g/m2. This works great for ice/water. For 
                dust, beware of this ie make sure you send in a g/m2 profile.
                Also need to link in rtp /asl/packages/rtpV105_4500/

01/19/07        PCLSAM can now handle arbitrary cloud profile(s)!!
                if iNclouds_RTP > 0 & caCloudPFname = 'DNE' then
                  set clouds from usual old RTP file
                elseif iNclouds_RTP > 0 & caCloudPFname = 'something' then
                  set clouds from new  RTP file
                Obviously, number of clouds in RTP file (gases 201,202,203)

                201 = 'W'
                202 = 'I'
                203 = 'D'
 
                must match up with iNclouds_RTP and caaCloudFile
                The mapping from iGasID to caaCloudFile is via the variables
                   iaCloudFile,iaCtype

                Note that if caCloudPFname = 'DNE' then
                   iaCloudFile(1) <--> p.cpsize,p.cngwat,
                                       p.cprtop,p.cprbot.p.ctype 
                   iaCloudFile(2) <--> p.udef(11:14,:),p.udef(17,:)    

                for iaCtype(N), SARTA has
                  000 - 099 = black   clouds
                  100 - 199 = water   clouds
                  200 - 299 = ice     clouds
                  300 - 399 = mineral clouds
                  400 - 499 = seasalt clouds
                  500 - 599 = soot/smoke         clouds
                  600 - 699 = sulphate/pollution clouds
                right now all kCARTA worries about is water (100-199), 
                ice (200-299) or mineral = (300-699) clds

v1.12
------
02/20/10        Fixed a small bug in diffusive backgnd thermal. This would 
                affect you in certain channels (2230 - 2280 cm-1) only if
                you used more than 1 radiating atmosphere

05/28/06        For clear sky and for PCLSAM (and to some extent kTwoStream), 
                kFlux = 4 only outputs OLR at TOA, instead of up/down going 
                flux at each level; this makes output flux files that are 
                iNumLayer ~ 100 times smaller
                1 = up/dn flux at each layer
                2 = heating rate at each layer
                3 = upgoing flux at each layer
                4 = OLR at TOA
                5 = OLR/flux at tropopause/DNW 

05/22/06        For PCLSAM code uplook instrument, have put in a simple term
                to account for the radiation that comes through cloud, bounces
                off surface, gets added to surface emission, then bounces off
                the cloud bottom and back down to the instrument.
                This reflectance term is estimated using the kTwoStream 
                downward reflectance term (using cos(theta) = 1/sqrt(3))
                Reflectance ~ 0.02 in the thermal IR, and 0 in the blacked out
                channels. Could add upto 1 K to overall radiance at gnd
                Not yet included in jacobians or flux

05/19/06                DO iLay = 2,iNumLayer+1 
                is the correct OLR computation loop (fixed this in rad_flux.f
                and scatter_pclsam_flux.f) (before it was 1,iNumLayer)

05/18/06        In scatter_pclsam_flux.f, have super accurate (but err slow) 
                flux and OLR computations! Code is slow because it uses tons of
                E3 (expint(3,x)) calculations!!!!!
                Oddly enough, clear sky calc are slower than cld sky calcs.
                Warning : still need to put solar in E3 flux computations
        
05/18/06        In rad_flux.f, now have super accurate (but err slow) flux
                and OLR computations! Code is slow because it uses tons of
                E3 (expint(3,x)) calculations!!!!!
                Nice thought, no cigar, as the results from 10 point gaussian 
                quadrature are very similar, and take half the time
                Though ... drum roll .. if ALL you are interested in is
                OLR computation at top of atmosphere, this is very fast!
                *** Do this by setting iComputeAll = kFlux in subroutine ***
                *** flux_accurate, flux_pclsam_accurate                  ***

04/27/06        In rad_main.f, put in specular reflectance into 
                  rad_trans_SAT_LOOK_DOWN
                See iSpecular
                To do this, go to /home/sergio/SBDARTA/V2.4
                  Edit the INPUT file 
                    default (wlinf = 3.5 , wlsup = 17.5 , wlinc =  0.1)
                  Edit (incident satellite angle mui      = 22.12      , 
                        incident solar angle     mur      = 23.86      , 
                        incident diff(phi)       deltaphi = 212.97
                  Default sbdart has windspeed = 5.0 m/s; can change this
                  (very strong function of windsped)
                    make spectra.o; make;
                  sbdart >& ugh
                  sedder
                Right now this is in
                   rad_trans_SAT_LOOK_DOWN_NLTE_FAST
                   rad_trans_SAT_LOOK_DOWN

04/24/06        Now have option to use Scott Hannon's Fast Model NLTE  
                coefficients, instead of doing the slower LBL computations.
                Use variable iNLTE_SlowORFast = +1   !default LBL model
                             iNLTE_SlowORFast = -1   !fast guess  model
                This would set iChunk_DoNLTE = +1    !default LBL model
                               iChunk_DoNLTE = +2    !fast guess  model
                For iNLTE_SlowORFast = -1 only need following in .nml file : 
                  iNumNLTEGases,iNLTE_SlowORFast,iaNLTEGasID(),iaNLTEChunks(),
                  iaaNLTEChunks(,)
      !matlab cd : /home/sergio/KCARTADATA/NLTE/SARTA_COEFS/ 
      !fname='/asl/data/sarta_database/Data_jan04untun/Coef/setnte_oct05.dat'; 
      ![idchan, freq, coef] = rd_nte_be(fname); 

04/20/06        Found couple of bugs in the PCLSAM flux implementation code.

04/19/06        If kFlux == +3,4,5, then the name of the additional output file
                is blah_OLR, else if kFLux = 1,2 it is blah_FLUX

04/19/06        Fixed flux_fast, flux_slow so that raSunRefl is actually 
                passed into these routines, instead of solar reflectance == 0!

<-------------------------------------------------------------------------->
01/28/06        Something odd in SUBR asymcoeffs_solar; instead of using 
                the HG function, need to use 1 +/- 3g mu musun for things to 
                agree with DISORT. Traced this down to the phase fcn 
                approximations seeming to be different ie (1 +/- 3 g mu mu')
                versus full HG phase fcn Phg(mu,musun,g).

                But other than that, this version WORKS for up/downlook ie
                TWOSTREAM, PCLSAM and DISORT agree!!!!
                Still need to fix the scattering jacobians for PCLSAM (see 
                comments of 01/22/06 below)

                Also, for a low cloud case, DISORT seems to give BTs 
                that are about 2K larger than TWOSTREAM! But changing to full
                phase fcn vs 1 +/- 3g mu musun again makes TWOSTREAM 
                overestimate the radiances, compared to DISORT.

                Also raE,raF (emission terms) can turn negative if beta ~= 0
                (ie we include temperature effects). Usually raE,raF are +ve
                if we do not include temerature effects (T(n+1) = T(n))

<-------------------------------------------------------------------------->

03/28/06        Changed the divvying up of cngwat so that it mimics the
                SARTA code, according to layer pressure rather than equally
                among layers (if raExp = 0 if parameters are set from the 
                namelist file, or default behaviour if set from the rtp file)

01/27/06        Changed factors of "pi" for the solar flux at TOA, for 
                TWOSTREAM,PCLSAM and DISORT. This is because I no longer assume
                integration over azimuth (2 pi) and so 1/ForP = 2pi/4pi = 1/2
                now becomes 1/4pi (ie ForP = 4pi instead of 2)
                This affects scatter_twostream_guts.f, scatter_pclsam_code.f,
                              jac_pclsam_up.f, jac_pclsam_down.f

                Similarly for DISORT, SolarBeamDisort no longer multiplies by
                pi (ie I have got rid of the 01/17/06 fix). Istvan Laszlo 
                agrees with this.

01/22/06        For PCLSAM, since we need only EXTINCTION for the solar
                scattering, replace raaExt with raaExt/(1-w(1-b)). 
                This is going to screw up the jacobians, as they assume raaExt!
                
01/22/06        For PCLSAM, use value of solarradiance at TOP of layer, and so
                slightly changed the loops in SolarScatterIntensity_Downlook
                This is going to screw up the jacobians, as they incorrectly
                used solar radiance at bottom of layer!

01/20/06        Changed default behaviour of subroutine INTERPOLATOR so that
                DISORT works better!!! Also made the DISORT interface code
                always run NoScatterRadTransfer for ALL kMaxPts, so that
                subroutine INTERPOLATOR works better.

01/19/06        Fixed direct solar beam at gnd, for kTwoStream downlook code
                Now it just calls regular routine solar() instead of
                solarscatteriterate() or solar() with absurd abs coeffs ....

01/17/06        Put kOmegaSun = 6.785087652174316d-5 = pi(sun diam/sun dist)^2
                              = pi*((0.6951e9/149.57e9)^2)
                as a constant in pre_defined.param, so it could be consistently
                used everywhere in the code
                But SINCEA,SOLVE0 in scatter_disort_code seem to use fbeam/pi?
                Need to figure this out ... everywhere I use kOmegaSun except
                in scatter_twostream_code.f where I use kOmegaSun/kPi for the
                downlook code! So fixed SUBR SolarBeam()

        !this is what compares best with DISORT, before Jan 2006 when I was 
        !messing up factors of pi
        !!!musun = musun * kOmegaSun/kPi 

        !this is what I think it should be, after Jan 2006
        !had to fix up SUBR SolarBeam so that there is a factor of pi there
        !which should work out fine for DISORT
        !!musun = musun * kOmegaSun  

01/15/06        Found a wierd problem with uplook scatter_twostream code; 
                when doing emission in clear sky layers, I computed
                  rLayTransmission,rPlanck,rEmission 
                in that order. While scatter_pclsam and clear_sky_uplook
                computed 
                  rPlanck,rLayTransmission,rEmission 
                in that order. And the results came out different!! Probably
                due to the Absoft f77 compiler optimizing

01/14/06        Set default sun temp at 5800K. This will affect all versions
                of code compiled with INCLUDE/pre_defined.param
                Replaced 5600.0 by kSunTemp everywhere in the code
                Similarly replaced 2.7 or 2.96 with kTSpace everywhere.

v1.11
------

02/20/10        Fixed a small bug in diffusive backgnd thermal. This would 
                affect you in certain channels (2230 - 2280 cm-1) only if
                you used more than 1 radiating atmosphere

01/14/06        Had to update the Makefile so basic version could compile

01/12/06        Fixed a small bug in solar contribution to uplook radiances
                in subroutine rad_trans_SAT_LOOK_UP.
                If kSolar >= 0 it always computed radiances at 5600 K, instead
                of using the datafile if kSolar = 1. This is now fixed.

12/26/05        Added on two gases for scattering Jacobians
                  iaJacob(iJacob) = 201        !!!d/d(IWP)
                  iaJacob(iJacob) = 202        !!!d/d(DME)
                Implemented PCLSAM scattering code for downlook jacobians
                Tests show the Jacobians are basically working, but might need
                some small corrections. 
                Also d/d(iwp) = mean(Jac over scattering layers) while
                     d/d(iwp) =  sum(Jac over scattering layers)
                Clear uplooking Jacobians assume if muSun ~= muSat, then 
                it is nitetime. So have to modify the assumptions slightly
                for Cloudy Sky Jacs, as the sun can scatter radiation into FOV;
                right now the PCLSAM code does not handle muSun == muSat.
                Note the Jacobians were tested assuming no optical depth 
                variation with radiance ie iDebugScatterJacobian = +1

12/20/05        Implemented PCLSAM scattering code for downlook instrument.
                Implemented PCLSAM scattering code for uplook   instrument.
                Implemented PCLSAM scattering code for computing flux
                iWhichScatterCode = 5

09/10/05        At Manuel Lopez-Puertas urging, including more bands for NLTE
                computations. To make the HITRAN/GENLN2 identifiers unique, 
                this means that caaaNLTEBands needs to have
                   GASID   GASIso  iLSGQ    iUSGQ   run7lblID
                instead of 
                   GASID   GASIso  iUSGQ   run7lblID

07/19/05        Finished putting bloated coeffs into UA NLTE code. Note the 
                coeffs can be computed to max height of 120 km, but if the
                file containing the vib temps only has profiles to eg 100 km,
                this would be the limiting height.

07/07/05        Subroutine read_nlte_file_forUAinfo tries to determine when to 
                start using the info available in the GENLN2 style NLTE 
                profile files, for use as the "Upper Atmosphere."
                Ideally it should turn things on when plevs(NLTE) < 0.005 mb,
                ie at the topmost pressure level in the kCompressed Database.
                But since kLAYERS-AIRS starts making very thick layers at the
                TOA, the average pressure of this topmost layer could be as 
                high as 0.01. So if the code tacks on a new profile when the 
                level NLTE pressure profile is above 0.005 mb, there could 
                be a huge discontinuity!!!!!! 
                Right now the code can tacks on the UA profile when the 
                average layer NLTE pressure profile is above pProf(kProfLayer)
                                OR
                when the levels pressures are less than 0.005 mb

07/06/05        In kcartamain or kcartabasic, should be able to interchangeably
                use pProf or pProfNLTE which are the layer average pressures
                computed from raPressLevels.
                However when testing using Dave Edwards "layers" file there is
                a discrepancy, and kCARTA agrees with GENLN2 
                                     if and only if 
                pProfNLTE is used in calls to the NLTE routines where assuming 
                raTPress is the average layer pressure from (k)layers, then
                    pProfNLTE(iInt) = raTPress(iInt)*kAtm2mb 
                instead of computing pProf from the pressure levels
                 CALL FindAvgLayerPressure(raPressLevels,iProfileLayers,pProf) 
                ie pProf should equal pProfNLTE (and it does for the RTP files
                we make), but for some odd reason D. Edwards profile violates
                this; could be because he only used one gas in the profile

05/06/05        a) Changed RTSPEC back to original exponential Radiance with 
                   tau rather than exponential Temperature in tau.
                   Changed kTwoStream so that the radiance varies in tau, 
                   rather than the temperature varying in tau; this means that
                   variable "rBeta" has been replaced by "raBeta_RadOrTemp"
                   in file scatter_twostream_guts.f

                KNOWN BUG : sometimes the raE,raF get negative, so the emission
                from layer becomes negative. Fixed this by using 
                    max(raE,0),max(raF,0)
                Actually better use min(raE that is +ve),min(raF that is +ve)
                (see asymcoeffs_solar subroutine)

                CHARTS + DISORT, and RTSPEC all use this variation (albeit
                linear in tau, rather than exponential in tau). This was 
                confirmed by Frank Evans and Jean-Luc Moncet)

                b) for the "clear sky layers" kept the RTSPEC code such that 
                   it does the exponential Tdiff in tau variation, rather than
                   the funky one they had in GASRT1

                Moncet also confirmed that CHARTS agrees very well with DISORT.

04/11/05        Changing RTSPEC so that
                a) it does a exponential Tdiff in tau variation for cloud 
                   layers (beta = i/tau ln(tTop/tBot) rather than
                   beta = i/tau ln(rad2bt(w,tTop)/rad2bt(w,tBot))
                   (see SSCATRT, EDDSCATRT, SEDDSCATRT)
                b) for the "clear sky layers" the code also does this same
                   exponential Tdiff in tau variation, rather than the 
                   funky one they had in GASRT1

04/08/05        Found major bugs in interface/implementation of RTSPEC. The 
                backgnd reflected thermal in GASRT1 should have been done at 
                acos(3/5) and also needed the 2*pi factor (integration over 
                azimuth).
                Similarly, rthermal = (1-ems)/pi * rdownwell

                I bet this or a similar bug will be found with DISORT

03/23/05        Have generated a weak backgnd kCARTA database between 70-120 km
                See the code in KCARTADATA/NLTE/UA for details, or Readme_NLTE
                This means caa_UA_LTEWeakBack_StdOptDepth in *nonlte is useless
                and has been replaced by caWeakUpperAtmCO2Path in kcarta.param
                This also means there are in effect about four LTE CO2 
                databases in the 4.3 um region (see subr CompFileName)
                  for usual AIRS layers 1100 - 0.005 mb
                    -- linemixing/duration of collision (latest version)
                    -- Cousin database for all lines
                    -- backgnd for weak LTE lines
                  for new upper AIRS layers 0.005 - 0.000025 mb
                    -- backgnd for weak LTE lines
                All these are at 0.0025 cm-1 resolution.
                Once this is tested I plan to make the two "backgnd for weak 
                LTE lines" databases at 0.0005 cm-1 resolution as well.

03/20/05        caaUpperMixRatios in *nonlte can tell the code which file the
                CO2 mixing ratios are in. This is useful for computing NLTE
                between 80-120 km, as the CO2 ppmv drops from 370 ppmv to about
                150 ppmv in this region
                Note that originally the code could read in "layers" files from
                GENLN2, but since I cannot find these anymore, it simply reads
                in column style files in SUBROUTINE UpperMixRatio.

                Right now it scales the MR read in from this file, to 370 
                ppmv at gnd; see kreadVTprofiles.f:13: SUBROUTINE MixRatio

                Since the kCARTA database does not go beyond 80 km, at this 
                point the .nml file will need iUseWeakBackGnd = -1

                Bloating code has NOT yet been implemented above 80 km 

03/17/05        Can choose whether you want to predict the NLTE temps using
                1) a linear regression of the 48 profs x 7 angles
                2) polynom coeffs of (tV-tK) as fcns of layer/sun angle 
                   (default)
                3) predict coeffs of (tV-tK) as fcns of layer/sun angle
                   (only implemented in MATLAB)

03/03/05        Need to have the QV functions computed at LTE, for the code 
                to work correctly if we use the NLTE code to compute LTE 
                spectra! ie cannot just set QV(iL) = 1.0 especially at low 
                layers! This issue addressed more fully in 
                    NONLTE/VT_48profiles/computeQV.f
                    NONLTE/VT_48profiles/computeQVlte.f

03/02/05        If iUseWeakBackGnd is set to +2, then the code can also add
                in the CO2 continuum from GENLN2 if iCO2Continuum == +1
                You need to be very carefuil with this. Best to have
                iUseWeakBackGnd = +1, iCO2Continuum = -1 
 
02/18/05        Downward wgt fcns are now (1-exp(-tau))*tau(lay2Sp)*PlanckMod
                while the gas and temp jacobians are still from the compressed
                database. So at least you can see how NLTE modifies the 
                weighting functions! Obviously the d/dq, d/dT are more 
                complicated to do since now we have MULTIPLE temperatures to 
                think about, and so for now, they have been left alone

01/18/05        Fixed a bug when setting the "cos" factor of downwelling solar 
                solar radiation (especially problematic at sunangle = 90!)

12/20/04        Can read in 5 high res chunks (0.0005 cm-1), starting at
                xA - 2*0.0005 cm-1 (so that a five point average for the 
                first five points is xA) and ending at xB - 0.0025 + 2*0.0005 
                cm-1 (so that a five point avergae for the last 5 points gives
                xB - 0.0025)

11/26/04        Implemented a best guess of the NLTE temps and QV using a 2nd
                order polyfit of Manuel Lopez-Puertas profiles; based on the 
                kinetic temp of the layer, the code does a SolarAng
                interpolation.
                Code dumps out a NLTE profile similar to that expected by a 
                typical GENLN2 user; also a summary file (.sss) is dumped out
                so the user can quickly check the NLTE/QV profiles.
                This is done by setting variable caaNLTETemp to 'nlteguess.'
                The kcarta.param file now has a new parameter to set, so that
                the code can go look for the polynomial coefficients in
                kNLTEPolyFits
                
09/07/04        Cleaned up the NLTE startlayer routine, as well as the kbloat
                routine that adds together (NLTE CO2 + LTE CO2) + (LTE others)
                to get total optical depth
 
08/30/04        For NLTE, use raaPress from LAYERS to define the average
                layer pressure, instead of relying on pav = (p2-p1)/log(p2/p1)
                This is so that we can have good comparisons with GENLN2

07/29/04        Have a DOUBLE PRECISION version of bloated NLTE rad transfer.

07/21/04        kRTP = -2 can read in a GENLN4 profile with N <= kProfLayer 
                layers, instead of recompiling kCARTA so that kProfLayer == N
                The layering can be arebitrary, just as in the RTP = 0,1 case

07/10/04        Clear sky fluxes are done fast, using exponential integral 3
                instead of slow looping over gaussian angles!

06/06/04        kcarta.param has been broken into two: kcarta.param now only
                houses the user-set parameters, while pre_defined.param
                houses the parameters that should not be changed by the user.

06/02/04        Subroutine CompFileName now allows the code to read in
                weak backgound CO2 lines for 1200-0.005 mb, in a compressed
                SVD database format, like the rest of kCARTA gases.
                Parameter "caWeakCO2Path" in kcarta.param sets the path
                for kCARTA to look for these files. 
                This means caa_UA_LTEWeakBack_StdOptDepth is now only for the
                upper atm (above 0.005 mb), though THIS HAS NOT YET BEEN
                COMPUTED

04/30/04        When iWhichScatterCode = 0 (in rtp_interface.f), or 
                kWhichScatterCode = 0 (in the .nml file), then the flux 
                computations can be done with just absorptive part of cloud
                Note this method seems to work better using rExtinct
                rather than raAbsCld = (1-w)raExtinct

04/14/04        Removed the SigSig 2355 band fronm NLTE, as it is already 
                part of the weak backgnd computations, and is being added 
                on twice. So the data in caaStrongLines is modified,
                and caaaNONLTEBands does NOT include the 2355 band
                Should this band need to be added later on, then the 
                run7lbl code that computes the background (for the 
                caWeakCO2Path data) needs to be modified a little

04/13/04        Fixed the co2_*.dat lineparameter files that kCARTA reads
                as part of its NLTE computations, for pipi and deltdelt. 
                run7lbl only does P,R linemixing, and treats the Q branches
                as part of regular lineshape in its "non-linemix regular" 
                loop; kCARTA was double counting in that it was adding on these
                lines again in the individual NLTE band computations
                
04/08/04        Updated the CO2 chifunctions (from Scott's tuning of Jan04), 
                so that the 15 um and 4 um regions are now "fixed"
                This meant subroutine Co2_4um_fudge has been improved a little

04/08/04        Allow CKDv3 (which is MT_CKD1 plus Scott's latest tuning)

04/07/04        Fixed a bug in AllLayersOutputPress, where the output fraction
                for bottommost layer was set at 0.0 instead of rFracBot (for a 
                downlook instr); conversely the output fraction for topmost 
                layer was set at 0.0 instead of rFracTop (for a uplook instr)

03/21/04        For NLTE, nm_nonlte has an iSetBloat parameter (default = no)
                so that kCARTA can stay at 0.0025 cm-1 or do 0.0005 cm-1
                However, 1) the radiances can only be output at TOP of layers
                         2) only can do stuff for downlook instr
                         3) cannot do stuff beyond 80 km right now
                         4) assumes only ONE set of mixed paths
                         5) assumes only one atmosphere

03/19/04        For NLTE, need 0.0005 cm-1 resolution because the lines
                are high up and are narrower! Default is to stay at 0.0025 cm-1
                resolution, but can "bloat" up to 0.0005 cm-1
                iSetBloat = -1       !stay at 0.0025 cm-1
                iSetBloat = +1       !go upto 0.0005 cm-1

03/18/04        QTIPS functions q = a + bT + cT^2 + dT^3 varies, for the 
                different HITRAN versions; this could be an issue if comparing
                to the GENLN2 results
                iQtips_H98 = -1   !use some other value
                iQtips_H98 = +1   !default; use the most recent qtips values

03/04/04        For some reason, all bands in the Matlab/run7co2 code, had NO
                pressure shift of line center. So modify the routines in 
                knonlte.f, so that there also is no line center shift!
                This is set by variable iNoPressureShiftCO2 = +1 (default)

02/23/04        Fixed a bug in n_main,f where if only CO2 was passed in thru
                a profile, then the raProfileTemp was being set to 0!!!

02/12/04        Use iTestGenln2 in CousinVsMix to switch between allowing
                kCARTA to always use Cousin, or also using linemixing for the
                strongest SigmaSigma bands
                iTestGenln2 = +1  !!test with GENLN2, so use Cousin everywhere
                iTestGenln2 = -1  !!default; use line mix for strong bands

02/03/04        The RTP file can be used to define more than ONE cloud!
                So we need to change/introduce a few variables
                  iNClouds_RTP  --> new, to tell how many clouds to expect
                  caCloudFile   --> caaCloudFile
                  cngwat,cpsize,cprtop,cprbot are for TOP cloud
                  udef(11,:),udef(12,:),udef(13,:),udef(14,:) are for next cld
                where the colon stands for profile 1,2,3,4, .....
                Scott Hannon actually uses udef(15,16,:) for partial cloud
                fractions in SARTA, but kCARTA is not that fancy!

01/24/04        Renamed some of the linear interpolation routines
                LINEAR_REAL   ---> rlinear_one       lin interp, one "x" pt
                XLINEAR       ---> rlinear           lin interp, many "x" pts
                LINEAR_SMART  ---> dlinear_smart_one lin interp, 1 smart "x" pt
                dLINEAR_SMART ---> dlinear_smart     lin interp, many smart 
                                                                        "x" pts
                LINEAR        ---> dlinear_one       lin interp, one "x" pt
                dLINEAR       ---> dlinear           lin interp, many "x" pts

01/24/04        Broke up kcoeffMAIN.f into kcoeffMAIN.f and kcont_xsec.f, so 
                the main database uncompression routines are somewhat separated
                from the continuum subroutines

01/16/04        Fixed a bug in background thermal, diffusive approx
                Screwed up the thermal backgns if MixPathSet(N) (N>1), as used
                by FastBDRYL2GDiffusiveApprox (it always set iBdry < 100, so if
                mixed path set eg 101..200 was used, it would not enter loop!

01/14/04        Included LAPACK routines so that the NLTE code can do SVDs, 
                while trying to find the "optimal" regression profile set.
                This code has been stuffed into kreadVTprofiles.f

01/12/04        Broke up klineshapes.f into klineshapes.f and kreadVTprofiles.f
                so that lineshape stuff (such as qfcns, line strengths etc) 
                are in the first file, and reading in/writing of GENLN2 style 
                VibTemp profiles is in the second file

01/11/04        kcarta.param now has two more user set parameters
                kRegrPath = path to regr profiles; needed if kCARTA guesses VT;
                kLOPEZPUERTAS = path to where Manuel Lope Puertas files are

01/10/04        In the driver namelist file, caaNLTETemp can now either be 
                user specified, or let kCARTA try to find the best profile 
                from Manuel Lopez-Puertas suite of 
                (48 regression x 6 solar angle) profiles

11/07/03        kCARTA can do flux computations (output units mW m-2/cm-1 or 
                K/day /cm-1) or OLR computations (output units mW m-2/cm-1); 
                set kFlux = -1 or 1,2,3. Don't forget to multiply by d(nu) = 
                0.0025 cm-1 when doing the (Matlab) integral over frequency 
                (and divide the result by 1000 to change from mW to W, if 
                kFlux = 1,3)!!!!
                1 = up/dn flux at each layer
                2 = heating rate at each layer
                3 = upgoing flux at each layer
                4 = OLR at TOA
                5 = OLR/flux at tropopause/DNW 

11/06/03        Fixed a bug in flux computations ... units were inconsistent
                Output units are mW m-2/cm-1, K day-1/cm-1 or mW m-2 /cm-1 
                (changed from FunnyW m-2/cm-1 and K s-1/cm-1). Don't forget 
                to multiply by d(nu) = 0.0025 cm-1 when doing the (Matlab) 
                integral over frequency (and divide the result by 1000 to 
                change from mW to W, if kFlux = 1,3)!!!!

11/04/03        If you define a scattering atmosphere with instrument at TOA,
                scatter_twostream can compute flux

11/04/03        Made GetMoreInfo(raPressLevels,raThickness,caPfName) more 
                GENLN2 compatible by tweaking it a slight bit (will not affect
                users of RTP, or Absoft)

09/21/03        Fixed bugs in RTSPEC so that any set of mixed paths can
                be used for any cloudy/clear atmosphere. Before the code 
                assumed that MP set #1 had to be used for any cloudy atmosphere
                So KEEP this version of scatter_rtspec_code.f, as it has a 
                few modifications above those supplied by F. Evans

09/21/03        Fixed bugs in DISORT so that any set of mixed paths can
                be used for any cloudy/clear atmosphere. Before the code 
                assumed that MP set #1 had to be used for any cloudy atmosphere

09/18/03        Fixed bugs in kTwoStream so that any set of mixed paths can
                be used for any cloudy/clear atmosphere. Before the code 
                assumed that MP set #1 had to be used for any cloudy atmosphere

08/24/03        kCARTA tries to account for lowest partial cloud layers now!
                If this does not work, get rid of calls to subroutine 
                FullPlusPartialLayer

08/22/03        Fixed uplook kTwoStream so that lowest cloud layer can be
                coincident with lowest (fractional) atmosphere layer
                There is an evident bias between RTSPEC and kTwoStream, though!
                (for a 40K signal, kTwoStream-RTSPEC bias ~ 5K, while
                 the DISORT-RTSPEC bias ~ 0.2 K)!!! Eeeeeeeeeeeeeiaaaa!
                So if lowest cloud layer == lowest atmosphere layer, then for
                an uplook instr, kTwoStream iS VERY sensitive to this! Bah!

08/22/03        Fixed bug in twostream, so that partial lowest/highest
                layers were fixed in LayerScatteringProp

08/21/03        Made CKDv2, which is Scott Hannon's modification of CS from
                version MT_CKD1. See SPECTRA/CKDLINUX/tunmlt_con1_14jul03.dat 

08/21/03        Made CKDv60 the default kCARTA version
                 
08/12/03        Doubled d(rad)/dq by 2, for GasID = 101 (self continuum)
                This is because k_self ~ cs q ps ~ cs ps^2
                This fix has gone direct into subroutine AddContinuum

07/24/03        FUNCTION FindBottomTemp now does linear interpolations,
                using a log(Plays) x-axis scale ... this is changed from the
                older spline interpolations, using a (Plays) scale.

07/12/03        Code now reads D. Edwards and M. Lopez-Puertas NLTE profile;
                instead of using raNLTEstart as start height for NLTE for 
                all bands, it updates this by comparing all the NLTE profile
                to find the minimum lowest height. 

07/11/03        Instead of relying on user supplier info of vibrational center
                NLTE temperatures, as given in namelist file in caaaNONLTEBands
                the code explicitly uses the info from D. Edwards and 
                M. Lopez-Puertas input profiles

07/09/03        *nonlte section in namelist file now requires user to specify 
                upper atmospheric mix ratio profile for CO2, so kCARTA knows  
                CO2 gas amounts to use at pressures < 0.005 mb! This is 
                stored in the "caaUpperMixRatios" variable

07/05/03        Put in new chi functions from 2355 - 2505 cm-1, so that the
                optical depths in this region, when computed for the lte/nlte 
                code, are pretty close to the UMBC-LBL code results
                So the kChiFile directory has the usual kCARTA database chis : 
                    co2_4um_fudge_*.txt
                as well as the ones to use during NLTE computations
                    nonlte_co2_fudge_*.txt
                Parameter iDoVoigtChi (set in kcartamain/kcaratbasic) controls
                whether chi function applied only to 2350 R branch (+1), or to
                ALL lines of CO2 (-1). Better to set iDoVoigtChi = +1

07/03/03        Found that k(first order linemix) >> k(fullmix) deep inside 
                the 2350 P branch (significant at high pressures), so now use 
                Cousin for this 2350 P branch, linemix for 2350 R branch

06/29/03        FindDiffusiveAngleExp returns cos(theta) instead of theta

06/25/03        Can directly read in the NLTE vib profiles from GENLN2 now

06/19/03        Put in temperature dependance into CS,CF for CKD1, for the
                wavenumbers from 780 to 980 cm-1. This is from the AERI 
                observations for QME dataset analysis. Turn this off by going
                to subroutine ComputeCKD_Linear and commenting out a few lines

06/14/03        Redid water reference partial pressure interpolation!!!!
                SUBROUTINE PPThruLayers() does this better than a simple interp
                of (ref P,ref PP) ---> (klayers P)

06/11/03        Found a slight problem in interpolation of MakeRefProf(raRAmt)
                but since the SplineTempInterpolateOLD(daaKpro) routines
                directly reread and reuse the 100 layer kCARTA database amounts
                this bug was "sidestepped" with a warning to user!
                In other words, raRamt is NEVER used by the main uncompression
                routines! 
                This problem crops up when eg database pressures are not 
                extreme enough for kLAYERS pressures
                eg [min(AIRS100) max(AIRS100)] =   9.3681e-06    1.0712e+00
                eg [min(AERI999) max(AERI999)] = **7.9662e-06**  9.7662e-01
                We DO need raRefTemp,raRefPartPress interpolated to the new
                pressure grid, so even though raRefAmt is unnecessary, keep it.
               
06/10/03        Sped up birnbaum by computing coarse birnbaum (-250:250) once
                per band per layer, and then interpolating this to required 
                wavenumber grid, instead of ALWAYS finely computing birnbaum
                For now, have restricted linemixing to 2350,2351 bands

06/02/03        Include first order linemixing code into the NLTE .. for the 
                strong bands (2350,2351), use linemix plus birnbaum; else use 
                cousin lineshape (for the "other strong bands"); for medium
                and weak lines, use plain voigt
                  Subroutine read_lineparameters initially sets this info
                  Subroutine CousinVsMix         reassigns individual lines
                                                 to linemix, or back to cousin
                                                 (since eg 2350 P branch sux!!)
                iLineMix = -1                   plain voigt
                iLineMix = +1                   plain voigt times cousin
                iLineMix = +2                   plain voigt times linemix
                The linemix code is slow, and so the code mainly does Cousin 
                only, by resetting iLineMix = 1 in subr read_lineparameters
                Code can also use fudge files
                   /asl/data/kcarta/KCARTADATA/General/ChiFile/
                         nonlte_co2_fudge_2380.txt; 
                  see NONLTE2/sergio/SECOND_TEST/save_ratio_k.m for details

05/29/03        Sped up the NLTE code immensely, by looping over lines in the
                same way as Matlab/run7.m and GENLN2 (ie divide the 25 cm-1
                chunks into moving meshes of 1 cm-1 thick bins; and sort
                lines into near, medium, far ....)

05/28/03        Changed AddContinuum in v1.10+ so that if iLoc < 0 the code
                barfs. The code actually needs to be smarter, matching the
                water database with iLocal lineshape
                (-1 ==> lorentz, 0 ==> local, +1 ==> local with chi)

05/28/03        Changed CKDFileName so that it looks for CKDSelfX.bin,
                CKDForX.bin (X<10), instead of CKDSelf0X.bin,CKDFor0X.bin

05/28/03        Made CKDv1, which is the latest incarnation of CKD from the
                AER folks! Courtesy of Dave Tobin. Relative to CKDv2.4 it has
                a) decreased CS in the  800-1000 cm-1 region by factor of 0.9
                b) decreased CS in the 2400-2800 cm-1 region by factor of 0.5
                c) increased CF in the  800-1000 cm-1 region by factor of 2.5
                d) increased CS,CF in the 1400-1600 cm-1 regions
                 
05/26/03        When doing the nonmixing lines for the background computation,
                read in precomputed spectra (at US Standard profile) .... this
                is because
                a) at lower heights (higher pressure), the atm is blacked out
                   so it does not matter what is going on (correct profile vs
                   US Standard)
                b) higher up in the atmosphere, kLAYERS usually tacks on the 
                   US Standard atmosphere in any case
                c) the stronger (mixing) lines can use the correct LTE profile
                d) the strongest (mixing) lines will use the relevant NLTE 
                   profile. 
                (c) and (d) will overwhelm the weak background. The namelist 
                file tells the code where to find the background files
                So now
                  caaStrongLines   contains the line parameters for (c)
                  caaLTEWeakBackLines contains the optical depths for (a,b)
                
04/30/03        Made some comparisons of solar scattering with SARTA_CLOUDY
                and found that solar scattering was different! Traced it to
                fixing things so that
                 a)SUBROUTINE rad_DOWN_twostream_solar (still) has 
                      rCos = rCos * 6.785087652174316e-5/kPi
                 b)SUBROUTINE SolarScatterIterate now has
                     raSun(iFr)=radSolarCld(iFr)*exp(-raCldOptDepth(iFr)/rCos)
                     raSun(iFr)=raSun(iFr)*exp(-raKAbs(iFr))*kPi
                   INSTEAD OF
                     raSun(iFr) = radSolarCld(iFr)*raEffects(iFr)
                     raSun(iFr)=raSun(iFr)*exp(-raKAbs(iFr))*rCos 
                These corrections were tested by using 0.2 um andesite 
                particles, at iwp = 0.4 gm-2, ptop = 400 mb. This has very 
                little extinction optical depth at 2700 cm-1, and most of the
                extinction is due to absorption
                So solar on,  + scattering should be close to solar on  only
                   solar off, + scattering should be close to solar off only
                For an uplook instrument, do the same test with small andesite
                particles, but high up in atm (ptop = 200 mb)

04/30/03        Set kScatter correctly if RTP file defines *scattr section 

04/30/03        In subroutine SetRTPCloud, define raExp(1) = 0 (instead of -1
                as before, for equal cloud amount in all layers)

03/14/03        To help "catch" temperature inversions near the surface, 
                use surface pressure, temperature + lowest layer avg pressure,
                air temperature to find the fractional layer temperature

03/13/03        Made CKDv60, which is the hybrid v51,v55 that Scott Hannon
                developed for the AIRS model. This continumm version reduces
                the bias dependancy on column water amount

03/13/03        In rtp_interface.f, when kRTP = 0, the code was mistakenly
                setting iaKThermal = -1, iaKthermalAngle = 90 for RTSPEC; 
                fixed this to 0, -45.0 respectively. Had to do the same
                in n_rad_jac.f (subroutine radnc4)

03/10/03        Allow new filetype into nm_scatter, which are (text) results
                of reading in scattering coefficients by other authors. For
                example, aggregate ice by Baran et al
                iScatBinaryFile = -1 (old text), 1 (old binary), 0 (new text)
                Note that only DISORT and TWOSTREAM can use this data! as they
                either assume HG or read in phase info

03/02/03        Made all constants in the kcarta.param double precision;
                had to tweak some code in DISORT to account for this

02/27/03        Modified nm_scattr so that kCARTA can read in phase file(s)
                Note that the default (in nm_main) is to set iaPhase(N) to -1
                *** Note that right now, the only rtp setting is also -1
                *** Note that right now, the code assumes only one type of
                    cloud in atmosphere, so PhaseFcn same in all cloudy layers
                *** Note that right now, this is only for twostream code
                    Would need to fix subroutine GETMOM to have DISORT use the
                    moments of the computed phase function

02/19/03        For kTwoStream, made sure kTemperVary is NEVER 0 as this case 
                is not coded up! Now, kTemperVary,kAvgMin are "globally" 
                defined in scatter_twostream_code.f so they can be used in
                scatter_twostream_code_guts.f

02/14/03        Fixed a bug in ExpandScatter, where avg pressure of layer was
                incorrectly expressed as ra(k) + (raP(k)-raP(k+1))/2 instead of
                correctly expressed   as ra(k) + (raP(k+1)-raP(k))/2 
                This corresponds to the fix mentioned below

02/14/03        Fixed a bug in scattering code, where the layering of cloud
                was not quite correct (eg aerosol that should have been at 
               surface, was one layer above surface)

02/14/03        Redefined *SCATTR parameter raExp(j), where j is
                the cloud under consideration. If set to 0 and a cloud is 
                ``expanded'' from ``one'' layer to layers (p1,p2), the IWP of 
                each of these layers is the same, and sums up to IWP. 
                If set to other than 0 and a cloud is ``expanded'' from 
                ``one'' layer to layers (p1,p2), the IWP of the individual 
                layers is exponentially decreased roughly as 
                exp(-raExp(j)*p1/p), but the total IWP remains that
                set by the user

12/04/02        Included CKD56 which is basically CKD51 except that
                (a) in 1300-1400 region, it still uses CKD24 instead of RAL
                (b) in 1400-1700, it uses RAL coeffs, with slight modifications
                (c) in 0600-1140, it uses CS = CS*JOHN TAYLOR
                (d) in 2400-2800, it uses CS = CSv5.1 * 2.4
                Not very good at all! pah!

12/02/02        Included CKD55 which is basically CKD51 except that
                (a) in 1300-1450 region, it still uses CKD24 instead of RAL
                (b) in 1450-1700, it uses RAL coeffs, with slight modifications
                (c) in 0600-1140, it uses CS = CSv5.1 * 0.87
                (d) in 2400-2800, it uses CS = CSv5.1 * 2.4, 3.2

11/30/02        Introduced parameter kChiFile that tells the code in which 
                directory to look for chi functions that improve the 
                kCompressed Database spectroscopy. This parameter is set 
                at compile time in kcarta.param

11/29/02        Fixed a bug in uplook twostream scattercode, where the
                parameters in the defining subroutine were double, but
                were  real in the call to the subroutine

11/20/02        Got rid of PARAMETER (caCO2_Hitran_WeakBack) in kcarta.param
                Similarly in nm_nonlte, replaced caaaLTEChunks(I,J) with 
                iaaNLTEChunks(I). Thus the user can easily control 
                the weak background CO2 file and the strong NLTE bands
                via nm_nonlte, using the driver namelist file

11/18/02        Fixed a bug in nm_radiance : if the user is hand setting the
                atmosphere parameters, then if 0 < raSolarAngle(N) < 90, then 
                iaSolar(N) = +1 is ok; else the code sets iaSolar(N) = -1
                This is to keep compatability with the RTP files, where the 
                solar radiation is turned on IFF 0 < raSolarAngle(N) < 90 
                
11/15/02        Fixed a bug in downlook rad transfer; the NLTE code was a 
                little confused when there was more than one set of MPs!!!!!

11/15/02        Put in new chi functions for CO2 at 2380, 2405 cm-1
                These functions, from chi.f, are consistent with RAL dataset 4
                and improve both the RAL dataset 4 and AIRS data comparisons

11/05/02        Fixed a bug in TWOSTREAM, where code mistakenly said 
                   if radiance(iFr) > 1.0, this is a mistake; 
                   reset to cloud top or bottom temp
                Since we are now using mW, make this test 
                   if radiance(iFr) > 800.0, this is a mistake; 
                   reset to cloud top or bottom temp

10/10/02        Instead of using the simple daQtips modifier from GENELN2v3.Y, 
                use the information inside the NLTE files from Granada, Spain

10/07/02        HITRAN weak background lines is now set by user in kcarta.param
                This will eneable the user to tweak what lines he/she wants
                to have in simple VHH (voigt) computations, and which lines 
                he/she wants to have cousin*voigt done for
                 
10/06/02        Since individual lines in a band might have Ymix < 0,
                (while the sum over all lines in the band > 0), this will mess
                up the nonLTE abs coeff summing, as well as non planck summing
                So just use Cousin!

09/30/02        kcarta.param now has new user defined parameter, caLineMixDir
                that tells the code where the LineMixing parameter files are

09/09/02        Since the KCARTA database ends at 0.005 mb, the code can now
                read in pressure levels/T(LTE),T(NLTE) specified from Dave
                Edwards GENLN2, above this pressure level. So the NLTE
                radiative transfer code should be more improved than before

09/05/02        Matlab code /UTILITY/LINEMIX/run7choose.m will let user choose
                the gasID, and lower/upper state global quantum numbers, to 
                help produce the HITRAN parameter files necessary for running
                the NLTE code ... in addition /UTILITY/LINEMIX/ has some Matlab
                files to produce the co2 spectra as necessary, concatenate them
                and output them to files that kCARTA/knonlte*.f can handle

09/05/02        Matlab code KCARTA/UTILITY/LINEMIX/lineparameters.m will 
                produce line parameters from HITRAN data, that kCARTA uses in
                the nonLTE computations. Example for "co2_2350" suite is
                    fname = '/taro/s1/sergio/AIRSCO2/NONLTE/co2';
                    lineparameters(2,2000,3000,1,1,9, fname,2350);
                    lineparameters(2,2000,3000,2,1,9, fname,2351);
                    lineparameters(2,2000,3000,3,1,9, fname,2352);
                    lineparameters(2,2000,3000,1,3,23,fname,2353);
                    lineparameters(2,2000,3000,1,5,25,fname,2354);
                    lineparameters(2,2000,3000,1,4,24,fname,2310);
                    lineparameters(2,2000,3000,2,4,24 fname,2311);
                    lineparameters(2,2000,3000,1,2,16 fname,2320);
                    lineparameters(2,2000,3000,2,2,16 fname,2321);
                while an example for the "ozone_2300" suite is
                    fname = '/taro/s1/sergio/AIRSCO2/NONLTE/ozone';
                    lineparameters(3,2000,3000,1,1,11 fname,11);
                    lineparameters(3,2000,3000,1,1,12 fname,12);
                    lineparameters(3,2000,3000,1,1,13 fname,13);

08/26/02        Updated the nonlte computations so that more than one gas
                spieces, and more than one band per gas, can have nonLTE.
                This feature has NOT been tested, however!!!!!

08/22/02        Modified Planck term can be used by twostream code as well. 
                But this feature has NOT yet been tested!

08/22/02        Output warning.msg file will contains lots of nonlte info,
                so that the user can see how populations, planck etc are
                affected

08/14/02        Modified  rad_trans_SAT_LOOK_DOWN so that the planck emission 
                of the uppermost individual layers is modified as necessary

08/06/02        Recall the SOLAR data files are in units of Wm-2 sr-1
                So we need to multiply the TOA solar radiances by 1000.0 in
                ReadSolarData(raWaves,raSun,iTag) for all to be good!

08/05/02        The files read in from the NONLTE section now contain the 
                absorption spectra for CO2 in the upper layers of the 
                atmosphere, computed using Voigt lines without linemixing).
                All the weak lines would be here, at US Standard temperature.
                    --> run7co2(Weak lines, US Standard) <--
                Note that you can specify WHICH LOWEST layer to adjust! 
                (code assumes that nonLTE from iaNONLTE_start to kProflayer)

                iNumNLTEGases  = number of gases that in NLTE (-1 = none)
                raNLTEstrength(N) = multiply factor of abs coeffs (1.0 default)

                    parameter kCousin_CO2path to let kCARTA do cousin
                    lineshape computations. THis is via a fudge in nm_nonlte;
                    if  raNLTEstrength(X) = -1.1212 and iaNLTEGasID(X) = 2
                    then kCARTA only swaps the linemix uncompressed spectra 
                    for cousin uncompressed spectra in the layers above that 
                    specified by raNONLTEstart(X)
                    Else raNLTEstrength(X) must be 1.0; it will consequently be
                    readjusted in subroutine nonlte to be equal to the GasMult
                    specified in caaMixFillLines

                iaNLTEGasID(N)    = which gasIDs are not in LTE
                iaNLTEData(N)     = for each gasID, how many chunks not in LTE
                iaaNLTEChunks(1..N,1..C)  = the chunks are/not in LTE
                caaaLTEChunks(1..N,1..C) = the filenames of weak lines, in LTE

 iNumNLTEGases     =          +1
 raNLTEstrength(1) =          +1.0
 iaNLTEGasID(1)  =             2
 iaNLTEData(1)   =             2
 iaaNLTEChunks(1,1)  =         2355
 iaaNLTEChunks(1,2)  =         2380
 caaaLTEChunks(1,1) ='/taro/s1/sergio/AIRSCO2/NONLTE/nit_co2_daytime_2355.dat'
 caaaLTEChunks(1,2) ='/taro/s1/sergio/AIRSCO2/NONLTE/nit_co2_daytime_2380.dat'

                However, the lineshape parameters for the STRONG lines are 
                also read in, and their Doppler lineshape computed at the
                nonLTE temperatures, so that their effects can be added in!

                iaNLTEBands(N) = number of bands that are NOT in LTE
                caaaNLTEBands(1..N,1..X) = files with band line parameters
                caaNONLTEBTemps(1..N) = files with non LTE profiles
                raNLTEstart(N) = lowest layer height (km) which is NOT in LTE
                               = (highest layer + 1 ) which is in LTE
                               = default(kProfLayer + 1)

 iaNLTEBands(1)     = 2
 raNLTEstart(1)     = 45.0
 caaaNLTEBands(1,1) = '/taro/s1/sergio/AIRSCO2/NONLTE/hit2350.dat'
 caaaNLTEBands(1,2) = '/taro/s1/sergio/AIRSCO2/NONLTE/hit2351.dat'
 caaNLTETemp(1)     = '/taro/s1/sergio/AIRSCO2/NONLTE/hit2350_profile'

                There is a small effect at night time (hardly any!!!!), but 
                there is a much larger effect during the day!

07/29/02        Introducing a new section, NONLTE. This section is very 
                similar to the SPECTR section, in that it reads in LBL files.
                However, unlike the SPECTR section files, it does not replace
                the results of the database uncompression, but ADDS on the 
                information in these files. (the abs coeffs in these 
                modifications could be < 0)
                Also, there is a rLTEstrength parameter that can be used to
                adjust the effect of these new files (default 1.0) 

                The files read in from this section simply contain the 
                difference in absorption spectra for CO2 in the upper layers 
                of the atmosphere, computed as (using Voigt lines without 
                linemixing)
                     run7co2(T-nonlocal) - run7co2(US Standard)
                There is a small effect at night time (hardly any!!!!), but 
                there is a much larger effect during the day!

v1.10
------

This code was developed on an Intel Linux box instead of the usual SGI
machine. The code has been interfaced to the AIRS RTPv1.00+ data file format.

Two main updates in this version :
 - the input profile, freq settings and atmosphere definitions can be read from
   an AIRS RTP file, or from the usual old namelist file. The RTP file format 
   has been developed by Howard Motteler; the appropriate libraries are 
   included or can be separately obtained
 - to complement this, the kCARTA database definition (mypref.op) is the truth.
   So kcoeffMAIN/SPL/SPLJAC have been written to reflect this. In other words,
   no longer run myp0 thru KLAYERS each time we change the pressure layering,
   but just normalise the database to ABS COEFF = OPTICAL DEPTH/GAS AMT,
   then spline the database onto the new layer avg pressure, and then spline in
   temperature! This means NewRefProfiles/outpresslevels.param and
   so on are no longer needed .. all we need is to compare the information in
   KCARTA_database.param to the KLAYERS layering.

02/20/10        Fixed a small bug in diffusive backgnd thermal. This would 
                affect you in certain channels (2230 - 2280 cm-1) only if
                you used more than 1 radiating atmosphere

07/15/07        Updated kcoeffMAIN,kcont_xsec,s_misc so that kCKDpath can
                be set differently depending on 605-2830 cm-1 band, or other 
                band

07/15/07        Updated s_misc.f so that compfilename can be set correctly 
                depending on 605-2830 cm-1 band, or other band

05/16/07        Updated SUBROUTINE CompFileName in s_misc.f to handle more 
                spacings in the kCompressed files
                Similarly updated SUBROUTINES UpperLimits,LowerLimits in 
                freqfile.f
                
01/12/06        Fixed a small bug in solar contribution to uplook radiances
                in subroutine rad_trans_SAT_LOOK_UP.
                If kSolar >= 0 it always computed radiances at 5600 K, instead
                of using the datafile if kSolar = 1. This is now fixed.

01/18/05        Fixed a bug when setting the "cos" factor of downwelling solar 
                solar radiation (especially problematic at sunangle = 90!)

06/06/04        kcarta.param has been broken into two: kcarta.param now only
                houses the user-set parameters, while pre_defined.param
                houses the parameters that should not be changed by the user.

04/07/04        Fixed a bug in AllLayersOutputPress, where the output fraction
                for bottommost layer was set at 0.0 instead of rFracBot (for a 
                downlook instr); conversely the output fraction for topmost 
                layer was set at 0.0 instead of rFracTop (for a uplook instr)

08/21/03        Made CKDv2, which is Scott Hannon's modification of CS from
                version MT_CKD1. See SPECTRA/CKDLINUX/tunmlt_con1_14jul03.dat 

08/21/03        Made CKDv60 the default kCARTA version
                 
08/12/03        Doubled d(rad)/dq by 2, for GasID = 101 (self continuum)
                This is because k_self ~ cs q ps ~ cs ps^2
                This fix has gone direct into subroutine AddContinuum

05/28/03        Changed AddContinuum in v1.10+ so that if iLoc < 0 the code
                barfs. The code actually needs to be smarter, matching the
                water database with iLocal lineshape
                (-1 ==> lorentz, 0 ==> local, +1 ==> local with chi)

05/28/03        Changed CKDFileName so that it looks for CKDSelfX.bin,
                CKDForX.bin (X<10), instead of CKDSelf0X.bin,CKDFor0X.bin

05/28/03        Made CKDv1, which is the latest incarnation of CKD from the
                AER folks! Courtesy of Dave Tobin. Relative to CKDv2.4 it has
                a) decreased CS in the  800-1000 cm-1 region by factor of 0.9
                b) decreased CS in the 2400-2800 cm-1 region by factor of 0.5
                c) increased CF in the  800-1000 cm-1 region by factor of 2.5
                d) increased CS,CF in the 1400-1600 cm-1 regions
                 
04/30/03        Made some comparisons of solar scattering with SARTA_CLOUDY
                and found that solar scattering was different! Traced it to
                 a)SUBROUTINE rad_DOWN_twostream_solar still has 
                      rCos = rCos * 6.785087652174316e-5/kPi
                 b)SUBROUTINE SolarScatterIterate has
                     raSun(iFr)=radSolarCld(iFr)*exp(-raCldOptDepth(iFr)/rCos)
                     raSun(iFr)=raSun(iFr)*exp(-raKAbs(iFr))*kPi
                   INSTEAD OF
                     raSun(iFr) = radSolarCld(iFr)*raEffects(iFr)
                     raSun(iFr)=raSun(iFr)*exp(-raKAbs(iFr))*rCos 
                These corrections were tested by using 0.2 um andesite 
                particles, at iwp = 0.4 gm-2, ptop = 400 mb. This has very 
                little exticnion optical depth at 2700 cm-1, and most of the
                extinction is due to absorption
                So solar on,  + scattering should be close to solar on  only
                   solar off, + scattering should be close to solar off only
 
04/30/03        Set kScatter correctly if RTP file defines *scattr section 

04/30/03        In subroutine SetRTPCloud, define raExp(1) = 0 (instead of -1
                as before, for equal cloud amount in all layers)

03/13/03        Made CKDv60, which is the hybrid v51,v55 that Scott Hannon 
                developed for the AIRS model. This continumm version reduces 
                the bias dependancy on column water amount 

02/14/03        Redefined *SCATTR parameter raExp(j), where j is
                the cloud under consideration. If set to 0 and a cloud is 
                ``expanded'' from ``one'' layer to layers (p1,p2), the IWP of 
                each of these layers is the same, and sums up to IWP. 
                If set to other than 0 and a cloud is ``expanded'' from 
                ``one'' layer to layers (p1,p2), the IWP of the individual 
                layers is exponentially decreased roughly as 
                exp(-raExp(j)*p1/p), but the total IWP remains that
                set by the user

12/02/02        Included CKD55, which is basically CKD51 except that
                (a) in 1300-1450 region, it still uses CKD24 instead of RAL
                (b) in 1450-1700, it uses RAL coeffs, with slight modifications
                (c) in 0600-1140, it uses CS = CSv5.1 * 0.87
                (d) in 2400-2800, it uses CS = CSv5.1 * 2.4, 3.2

11/30/02        Introduced parameter kChiFile that tells the code in which 
                directory to look for chi functions that improve the 
                kCompressed Database spectroscopy. This parameter is set 
                at compile time in kcarta.param

11/29/02        Fixed a bug in uplook twostream scattercode, where the
                parameters in the defining subroutine were double, but
                were  real in the call to the subroutine

11/18/02        Fixed a bug in nm_radiance : if the user is hand setting the
                atmosphere parameters, then if 0 < raSolarAngle(N) < 90, then 
                iaSolar(N) = +1 is ok; else the code sets iaSolar(N) = -1
                This is to keep compatability with the RTP files, where the 
                solar radiation is turned on IFF 0 < raSolarAngle(N) < 90 
                
11/15/02        Put in new chi functions for CO2 at 2380, 2405 cm-1
                These functions, from chi.f, are consistent with RAL dataset 4
                and improve both the RAL dataset 4 and AIRS data comparisons

11/05/02        Fixed a bug in TWOSTREAM, where code mistakenly said 
                   if radiance(iFr) > 1.0, this is a mistake; 
                   reset to cloud top or bottom temp
                Since we are now using mW, make this test 
                   if radiance(iFr) > 800.0, this is a mistake; 
                   reset to cloud top or bottom temp

08/06/02        Recall the SOLAR data files are in units of Wm-2 sr-1
                So we need to multiply the TOA solar radiances by 1000.0 in
                ReadSolarData(raWaves,raSun,iTag) for all to be good!

07/08/02        All KCARTA radiances are now in units of mW cm-2 sr-1/cm-1. 
                Previously the units were W cm-2 sr-1/cm-1. This was
                done simply by multiplying kPlanck1 by 1000 (in kcarta.param)
 
07/04/02        Put in a chi function for the CO2 lineshape : 1.0 everywhere
                except from 2255 to 2305 where we have triangle formed by :
                (2276,1.00),(2286,1.53),(2289,1.00)
                So this means that kcoeffMAIN must read the datafiles in
                /home/sergio/KCARTADATA/General/co2_4um_fudge_*.txt
                Note that Jacobians will be messed up because of this!!!!!

07/04/02        Put in a chi function for the CO2 lineshape : 1.0 everywhere
                except from 2355 to 2430 where we have triangle formed by :
                (2380,1.09) (2390,1.13) (2405,1.05)  (done on 06/26/02)
                So this means that kcoeffMAIN must read the datafiles in
                /home/sergio/KCARTADATA/General/co2_4um_fudge_*.txt
                Note that Jacobians will be messed up because of this!!!!!

07/01/02        In rtp_interface.f, for a uplook instrument, set the start
                pressure as 0 (TOA) instead of pobs (which is the surface 
                pressure) !!!!!!!

06/27/02        In rtp_interface.f, put in a check so that if there are less
                than two emissivity points specified in the RTP file, the
                emissivity is between 0 and 1

06/16/02        Fixed a bug in cloud interface with RTP files; the code was not
                setting the iaaCloudWhichLayers variable, which led to 
                garbage when kTWOSTREAM was called

06/06/02        Fixed a bug in jacobian d/dq : it was using wrong gases 
                sometimes (ie if gaslist = 1,2,6,22 then d(BT)/dq 0.1(q)
                would be messed for gasIDs 6,22!!!

06/03/02        Fixed a bug in jacobian d/dq : it needs water amounts for
                the 101,102 jacobians!!!!

05/29/02        Since both the new Self and Foreign continuums (from RAL data)
                depend on temperature, had to modify    ComputeCKD_Linear
                so that CS = CS(T) AND CF = CF(T)

05/01/02        When the rtp file (or driver namelist file) told the code
                to vary the satellite view angle, there was a bug in that the
                solar angle could give NaN as it was traced thru some of the
                lower layers. The reason was that it still used vaconv to
                do the ray tracing, instead of saconv

03/29/02        Temporarily allowed CKDv12,v13,v90 into the code
                   v12foreign : hybrid of v00,v24 
                   v12self    : v24 
                   v13foreign : v23 from Dave Tobin 
                   v13self    : v23 
                   v90foreign : hybrid v24, Tobin's chi function continuum
                   v90self    : v24

03/28/02        Fixed a bug in CKDfilename, where the filenames for CKDv0.0
                were quite messed up

03/22/02        Changed routines Cloud_Uplook/Downlook_Interface so that they
                change variables to double precision, compute radiances at 
                top or bottom of cloud, and then change the variables 
                back to real. KNOWN BUG : if the clouds are very optically
                thick, then because of exponentiation (exp(raExt)) in 
                subroutine asymcoeffs_solar(), there is a very great 
                possibility of double precision underflow/overflow, leading to
                INF or NAN in output radiances. To offset this, the code will
                set the exiting cloud radiance to that of the topmost or 
                bottommost cloud level (for downlook or uplook instr 
                respectively), giving a warning message as it does so. (ie it
                assumes the cloud top/bot is black, with emissivity = 1)

03/12/02        Fixed a bug in twostream_downlook, where the radiances under 
                the cloud could be output more than once at the same layer. 
                Or the radiances would be output again at TOA even if the 
                instrument were below the cloud!

                Same sort of bug fixed in twostream_uplook

03/07/02        Reset function WhichLevel so that if the surface is "above"
                the pressure level at which to start accurate diffusive approx,
                we modify this pressure level. Similarly if airplane is "below"
                the pressure level at which to start accurate diffusive approx,
                we modify this pressure level. 

02/25/02        Fixed couple bugs in RTP atmosphere interface, so that 
                correct satellite observing pressure can be used!

02/07/02        RTP SatHeight,raLayHgt are both in meters! OTOH the old 
                KLAYERS had SatHeight and LayHgt in km!
                So now we convert old style KLAYERS raLayHgt to meters. 
                Similarly we convert new style RTP satheight to km. 
                Then FindLayerAngles is happy, as it expects SatHeight in km, 
                raLayHgt in meters; it then does conversion to meters 
                (of raLayHgt) before calling vaconv

02/04/02        If atmosphere info is driven by an RTP file, then the sun
                is considered on if and only if 0 < prof.solzen < 90

02/01/02        In the SCRIPTS subdir, we now have
                kcwrap    Our end-all super-dooper script
                          Takes in a RTP level profile, chugs it thru KLAYERS,
                          then thru KCARTA, and then does an AIRS convolution!
                          Assumes you have MATLAB, and that you have correctly
                          specified the atmospheric parameters in the driver
                          RTP file (ie KCARTA assumes kRTP = +1). Also assumes
                          you have a whole bunch of RTP tools, AIRS SRF files
                          that have been written by our ASL group at UMBC

01/30/02        If kcarta.x is being used, and if RTP file includes clouds,
                then things are fine. If bkcarta.x is being used, and the RTP
                file has clouds, then the code will halt.

01/30/02        PARAMETER (kWarnFile      = 'warning.msg') is now a namelist
                variable in the *output section, so that if there are many
                different kCARTA runs going on simultaneously, the .nml file
                can be sed'ed so that different error logs are produced.
                Namelist parameter caLogFile is defaulted to 'warning.msg',
                but it can be reset by the user in *OUTPUT

01/29/02        kCARTA now includes exit codes, so that scripting is easier
                On successful execution of run,         call exit(0)
                On error found, kCARTA quits,           call exit(1)
                Don't really know what happens if there is a runtime error

01/28/02        Interfaced with RTPv1.03; this allows the RTP file to easily 
                define the start and stop spanning wavenumbers, using 
                head.vcmin and head.vcmax

                kCARTA will go from 605.0 to 2830 cm-1, and so head.vcmin and 
                head.vcmax need to be set within this interval. 
                605.0 = kaMinFr(2),  2830.0 = kaMaxFr(2) ... are the 
                extremeties of our current database; in the future, when we go
                to variable wavenumber spacing, this will be changed. 

                Also if prof.zobs > 0, the satellite height is set to this 
                value, so ray tracing thru atmophere can be done; else the
                satellite height is set to -1.0 so no ray tracing done 
                (constant angle thru layers). Satellite height should be 
                specified in METERS!!!! This allows the code to use p.satang,
                which is the local satellite angle at (TOA or aircraft), and 
                do the raytracing of this angle thru the atmospheric layers;
                the local angle at bottommost layer is stored in the rtp file
                as p.satzen

01/16/02        Fixed a bug in subroutine VACONV, which does ray tracing thru
                the various layers

12/19/01        Rewrote subroutine ReadList() in n_pth_mix.f so that the code
                does not use dummy file kDumbFile to write to and read from, 
                while parsing in the mixing paths; this could cause errors if
                multiple runs of kCARTA are proceeding simultaneously. This
                means parameter kDumbFile no longer needed in kcarta.param

12/19/01        Reset path names in kcarta.param to absolutes (eg set stuff as
                /asl/packages/KCARTADATA) instead of relatives (such as 
                ../../KCARTADATA) so that kcarta.x can run anywhere

12/13/01        Updated to RTPv1.02 .. this allows two new variables, 
                prof.pobs (real*8) and prof.upwell (longint) to define the
                observation pressure and direction of radiation travel
                Default is to assume downlook instr from TOA to prof.spres
                Recalling upwell is direction of rad travel (and so this is
                exact opposite of viewing direction of instrument), 
                this can be changed to (upwell = 1) pobs to prof.spres
                                       (upwell = 2) prof.spres to pobs
                Recall sun is on IFF (0 < prof.solzen < 90)

12/06/01        Subroutine SolarScatterIterate and subroutines 
                BackGndThermalScatter now make DISORT and TWOSTREAM agree with
                each other quite nicely .. so parameter kScatter can be set 
                to 1 (iunstead of 2) when doing TWOSTREAM
                To make things better, tur off iaKthermal(i) = -1 for a 
                downlook instrument!!!!!!!!

12/06/01        ?? in scatter_twostream_solar, do we need to do raSun/kPi ??
                ckPi ..... do we need it???????????????
                Also subroutine SolarScatterIterate estimates solar radiance
                at bottom of cloud using the single scatter algorithm of Liou;
                this solar intensity then makes it down to the earth surface. 

12/06/01        Function FindBoundary (that determine where to stop using
                acos(3/5) and start using accurate angles) now automatically
                default to a pressure of 100 mb when there is a cloud (as 
                code assumes this is as high a cloud as possible)

12/05/01        Fixed compute_radiative_transfer in scatter_rtspec_code.f so 
                that it loops from 1, nlev-1 for the layers ....
                Similarly in the same file, had to fix all array declarations 
                so that array(nlev)   --> array(kProfLayer) 
                        array(nlev-1) --> array(kProfLayer-1) 
                        array(maxnz)  --> array(kProfLayer) 
                
12/05/01        Fixed SetRadianceStuff so that the solar reflectance is set 
                only if kSolar >= 0; this means had to rearrange calls of 
                the first three subroutines in there

12/05/01        Fixed the old style kLAYERS text profile reader so that the
                file could be parsed in correcly both on Linux and SGI, to get
                the pressure layer thickness and levels

12/05/01        In scatter_rtspec_code.f replaced F. Evans r1 = 1.1911E-8,
                r2 = 1.4388 with r1 = kPlanck1, r2 = kPlanck2

11/29/01        Fixed a bug in downlook twostream code, where the solar 
                radiation between TOA and cloud top was not being attenuated, 
                as the loop over layers was wrong!!!

11/29/01        Fixed a bug in solar() where the sunangle was pretty much being
                set at 0 thruout the atmosphere

11/29/01        Reset the three scattering option for kWhichScattering Code
                Type      |    kWhichScatterCode NEW | kWhichScatterCode OLD  
                ----------+--------------------------+----------------------
                Clear/Abs |         0                |       0
                kTWOSTR   |         1                |      -2
                RTSPEC    |         2                |      -1 
                DISORT    |         3                |      +1
                PERTURB   |         4                |
	Default	PCLSAM    |         5                |
		RAYLEIGH  |         6                |

                note that really, only PCLSAM (5) is supported/tested recently

11/29/01        For kTwoStr, need kScatter = 1,2,3 (for number of times we
                try to rerun the radiance thru cloud, so as to get better
                boundary conditions about incident radiation at cloud bottom,
                and hence more accurate estimates of exiting radiation from
                cloud top or bottom). Certainly for downlook instr, it seems
                that kScatter = 1 is BEST!

11/21/01        If scattering computations are performed, the code will no
                longer try to estimate Jacobians. This is because three fairly
                sophisticated scattering algorithms are implemented, instead of
                just using a simple "cloud absorption" code

11/19/01        Parameter kNewRefPath no longer needed, so this has been 
                removed from kcarta.param. Reason is that there is now 
                complete separation between KCARTA and KLAYERS ... the only 
                database reference profile that is the truth is mypref.op

11/16/01        While reading in KLAYERS file, and it finds there are 
                atmospheres defined for which radiative transfer is required, 
                kCARTA code only allows the program to continue if lowest 
                pressure <= 10.0 mb, else it halts and asks user to rethink 
                pressure levels in KLAYERS

11/16/01        While splining KCARTA database defn (mypref.op) onto the 
                arbitrary pressure levels in the klayers file, it needs to make
                up a new reference profile set of P,PP,T,A for each gas. This
                is easily done by splining (old_avgP,oldVar,new_avgP) where 
                var = PP,T,A for the actual layers that are contained in the
                KLAYERS file. IF pp < 0 for gases other than water, no problem
                (this can happen high up in the atm). If gas amts < 0, or
                partial pressures for water < 0, HALT!!!!!!!!

11/14/01        Major changes in kcoeffMAIN/SPL/SPLJAC.f so that only
                the information in the mypref.op file is needed
                ie only really need kOrigRefPath instead of kNewRefPath 
                
                What now comes out of GetAbsCoeffOLD/JAC are the abs coeffs; so
                we have changed AmtScale() in kcoeffMain as we only need to 
                multiply by actual gas amount, to get optical depth
 
                This prompted silght changes to FinalAmtDeriv,FinalTempDeriv

11/05/01        Allowed the CO2 database to be separately specified in 
                kcarta.param ... this allows us to compare spectroscopy
                You also need to fix the reference profile (refgas2)
                as necessary (look at ../DATA/RefProf.For.v96_106 or 
                ../RefProf.For.v107up)
                To see how the reference profiles change, you could try
                running ../UTILITY/ratio_reference.f

10/11/01        Fixed couple of bugs in TWOSTREAM uplook. Also made sure if
                there are clouds separated by clear sky, then emission of 
                clear sky is just (1-exp(-tau)) instead of exponential-in-tau

10/8/01         Fixed bug in uplook code, which affected uplook TWOSTREAM code
                when two clouds were separated by more than 1 layer (the 
                clear sky downward layer emission was mistakenly 0.0!!!!)

9/18/01         Fixed some small bugs in uplook intrument TWOSTR code, as
                well as bugs that made clouds in TWOSTR, RTSPEC, DISORT
                differ by one layer

9/02/01         Fixed a bug in rad_main.f (which does not appear iun SRCv1.07)
                This bug almost always turned off the background thermal!!!!

8/30/01         Included the latest kLAYERS version with the package. This
                version interfaces with RTPv101

%%%%%%%%% To Be Done %%%%%%%%%%%%%%%%%%%%%%%%
8/27/01         Rewrote breakapart.x in KLAYERS/Src_1.10 so that it ALWAYS 
                uses the file in ../DATA/RefProf.For.V107/mypref.op
                If the layering is not the AIRS 100 layers, the contents
                of this file are interpolated onto the new pressure layering.
                Also fixed kAvog = 6.022045e26 in kcarta.param and in the 
                KLAYERS/Src_1.10/Src_klayers/breakapart.f

                Note : To make the RTP kCompressed Profile, do the following : 
                cd KCARTA/KLAYERS/Src_1.10/Work
                cp ../../../DATA/TestPointProf/myp0 myp0.ip
                echo "myp0.ip" > makeRTPin
                ../Bin/makeRTPfile.x < makeRTPin
     ../Bin/klayers_rtp fin='myp0.rtp' fout='myp0.op.rtp' nwant='-1' ldry='f'
                cp myp0.op.rtp USStandard_NEW.op.rtp
                ../Bin/breakapart.x 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

8/23/01         Expanded the nm_prfle section so that it includes three more 
                variables that are used if kRTP = +1 : iBinORAsc and 
                caCloudFile tell the code which (ascii/binary) cloud file to 
                use, while iMPSetForRadRTP tells the code which MP set (from 
                the nm_weight section) to use when constructing the 
                atmosphere.

8/22/01         Fixed things so that the emissivity and reflectivity data
                in the RTP file (for rtp_interface.f) need at least one point 
                instead of two; this means the emissivity is constant. Also
                set rakThermal = 0 if RTP file is read in (instead of -1)

8/21/01         Fixed the "cloud expansion" layering so that if raExp(j) >
                0, the total IWP over the layers is still that entered by
                the user, IWP0. 

8/11/01         Fixed TWOSTREAM so that when sun is on, the direct solar
                radiation thru cloud, on the way to gnd and then reflected
                up, is only attenuated by raaAbs and NOT by the total 
                raaExt = raaAbs + raaScat

7/30/01         For DISORT, can only have kScatter = +1 now (ie always
                does an interpolation in wavenumber and in temperature).

7/25/01         Fixed the 'NONESPECIFED' solar reflectance case in
                rtp_interface and in n_rad_jac_scat.f, so that it correctly
                decides to use (1-ems(v))/pi

7/25/01         Fixed the "cloud expansion" so that if cloud occupies N 
                layers, then IWP per layer is now IWP0/N per layer, giving
                a total IWP of IWP0

7/10/01         Instead of having exponential-in-tau temperature variation 
                across a clear layer, TWOSTREAM now just uses the simple
                kCARTA avg layer temp. RTSPEC uses a simple linear-in-tau 
                model, which differs quite a bit from the exponential-in-tau
                model. The exp model can be turned on by using a switch.
                Also made quite a few bugfixes, regarding the cloud layering
                in TWOSTR vs RTSPEC,DISORT

6/29/01         *FRQNCY can now be driven by the RTP file, depending on the 
                setting of kRTP. If kRTP = -1,0 then the user still has to
                set the start/stop freqs in *FRQNCY.  If kRTP = 1, the RTP 
                file sets the start/stop freqs according to the info 
                contained in head.nchan, head.ichan
                [..iInstr is the instrument type (for now, AIRS)
                iNumID is the number of channels to do things for (-1 = all)
                iaChannelID is the list of channels to do things for ..]

6/22/01         kSurfTemp is INTEGER parameter in *PARAMS (default -1)
                kRTP is      INTEGER parameter in *PARAMS (default +1)
     !!!kRTP = -1 : read old style kLAYERS profile; set atm,freq from namelist
     !!!kRTP =  0 : read RTP style kLAYERS profile; set atm,freq from namelist
     !!!kRTP = +1 : read RTP style kLAYERS profile; set atm,freq from RTP file
                Have set one or two more dummy parameters (for future use) 
                here. The readers have to reflect this new change

6/21/01		In the namelist driver file, raKSolarRefl has been replaced 
                by cakSolarRefl. If this file does not exist for a simple 
                driver file, then kCARTA simply uses (1-ems)/pi
                If the rtp file has nrho <= 2, then kCARTA uses (1-ems)/pi
                 **** made irrelevant in Oct 2010 ******

6/19/01         Include /asl/matlab/h4tools gpro2rtp.m, rtp2gpro.m and
                rtp*.m to easily bundle existing text file point profiles 
                and save them into rtp format

6/5/01		Radiance section code modified so that if we are reading in
		an RTP file, the code remembers which profile was read in,
                and automatically goes and reads in the atmosphere parameters.
                This leads to certain assumptions : 
                a) *PARAM kSurfTemp has to be -1
                b) only ONE atmosphere can be defined which means that only
                   one radiance can be computed
                c) we still have iaMPSetForRad being valid
                d) rPressStop  = 0.0 (TOA)  
                e) rPressStart = prof.spres  
                f) rTBdy       = 2.96  
                g) rTSurf      = prof.stemp   
                h) rAngle      = abs(prof.satang)   
                i) rHeight     = -1.0          ! -------> raSatHeight(iC) in meters
                j) rakSolarAngle(iC) = abs(prof.sunang)   
                   IF (prof.sunang >=  0.0) & (prof.sunang <= 90.0)) THEN   
                     iakSolar(iC) = +1    
                   ELSE    
                     iakSolar(iC) = -1   
                    END IF   
                k) iaKThermal(iC)   = 0   
                   raKThermalAngle(iC) = -1.0   
                   iakThermalJacob(iC) = 1   
                l) iaSetEms(iC) = prof.nemis   
                   DO i=1,iaSetEms(iC)    
                     r1   = prof.efreq(i)   
                     rEms = prof.emis(i)   
                     END DO  
                m) caKSolarRefl(iC) = 'Dummy' which gives   
                   iaSetSolarRefl(iC) = prof.nrho 
                   DO i=1,iaSetSolarRefl(iC)    
                     r1   = prof.rfreq(i)   
                     rRefl = prof.rho(i)   
                     END DO  
           OR 
                m) caKSolarRefl(iC) = 'NONESPECIFIED' which gives   
                   iaSetSolarRefl(iC) = prof.nemis 
                   DO i=1,iaSetSolarRefl(iC)    
                     r1   = prof.efreq(i)   
                     rRefl = (1-prof.emis(i))/pi 
                     END DO  


6/1/01		The profile section has been modified so that if the code is 
		reading a RTP file, we specify WHICH profile to read in
                This means that *PRFILE needs a new parameter, iRTP

v1.09
-----
This version has gone away from any dependancy on the AIRS layering. This 
means that we no longer need variables such as mThickLayer or mSubLayer. In 
order to do this, klayers.x was rewritten (by Scott Hannon) so that cpblev.f 
contains the block data statement of the new layering. layout.f was modified 
(by Sergio) so that it outputs outincLAY.param, outpresslevels.param and 
outlayers.param with all necessary info.

In addition, by simply reading in the MIE scattering tables and just
using the cloud absorption coefficients, we can simulate the effects of
clouds quite well with just a simple radiative transfer code, instead of
having to use scattering code. 

Instead of using the version of the code that follows the flavor of 
RTSPEC/DISORT by looping over wavenumber, we use the version that copies the 
mixed path coeffs, adds on the cloud optical depths and sends this matrix to 
the clear sky radiative transfer routine. This means that we can use the code 
to do estimates of the jacobians. This model has further been refined using 
the ideas of Patrick Arnott of the DRI, where the emission of a cloudy layer 
has been attenuated because of the scattering component of the extinction.

Since this very elementary model only works when the asymmetry factor is close
to zero, and single scattering albedo is low, we have implemented a two 
stream scattering code. This code solves the radiative transfer problem for 
two streams, and then uses an analytic integration of Schwatzchild's equation 
to compute the radiation intensity at an arbitrary angle. Instead of using 
continuity at layer boundaries, which leads to inverting matrices for each 
wavenumber point and thereby slowing down the code, this implementation adds 
scattering layers together. This two stream code includes variation of the
temperature in the (clear or scattering) layers, and also includes the effects
of (solar) beam scattering. It is very fast, and if the asymmetry factor is
lower than about 0.8, works very well (if g > 0.8, then there are problems
with using P(mu,-mu_sun,g) ~ 1 - 3g(mu)(mu_sun) becoming negative; this 
problem is slightly overcome by using the analytic HG phase function. 

Note that most of the scattering routines would only work at TOA or bottom
of ground (with a little bit of effort, they could be made to work everywhere
else as well, but ah well!!!!)

The kCARTA subroutines that did the pressure interpolations of the subdivided
or superdivided AIRS layers, have also been modified so that now they do a 
straightforward weighted average layer pressure interpolation :

---> c SUBROUTINES SplineTempInterpolate and SplineTempInterpolateJAC <----

c  even if kProfLayer =========== kMaxLayer, allow for possibility that 
c  user has changed layering, so we have to do PRESSURE interpolation 
c  of daaaKx onto daaaKnNew 
 
      DO iI=1,iNk  
        DO iJ=1,iKm  
          !first set up the daXgivenP,daYgivenP arrays  
          DO iK=1,kMaxLayer     
            iE = kMaxLayer-iK+1  
            !notice how daXgiven is initialised with increasing pressure  
            !do interpolate in log(pressure)  
            daXgivenP(iK)=log(pavgAIRS(iE))  
            !notice how doYgiven normalised to daaaKx/(100layer ref amount)  
            daYgivenP(iK)=daaaKx(iI,iJ,iE)/(raOrig100A(iE)**0.25)  
            END DO  
          CALL dsply2(daXgivenP,daYgivenP,kMaxLayer,dYP1,dYPN,  
     $                    daY2P,daWorkP)  
  
c  do the new set of layers ..need AIRS layers interpolations  
          DO iK=1,kProfLayer  
            dxpt=log(pProf(iK))  
            CALL dsplin(daXgivenP,daYgivenP,daY2P,kMaxLayer,dxpt,d)  
            !notice how d is unnormalised by (current layer ref amount)  
            daaaKxNew(iI,iJ,iK)=d*(raCurrentA(iK)**0.25)  
            END DO  
          END DO  
        END DO  

Similarly, subroutine WaterAmount_TempJAC had to be modified as well. In fact 
it was removed and replaced with WaterTempJAC

The gaussian integration points/weights are no longer hardcoded by 
gauss.param. Instead, subroutine FindGauss(N,raX,raW) is called as necessary
N = 40  for accurate background thermal
  =  2  for RTSPEC flux
  = 10  for CLEARSKY flux

Fluxes for RTSPEC and DISORT can now be computed.

Radiances at pressure level boundaries for RTSPEC and DISORT can be output

kLongOrShort = -1 : output shortened binary file, summarizing nml file
               +1 : output longer binary file, which rehashes input nml file
                0 : only output data!!! only works for radiance file 
                    (no flux,jac allowed yet)

In the Makefile, bkcarta.x is just the basic version of kCARTA. THis can do 
basic optiocal depths and mixed paths, and clear sky radiances. It cannot
do fluxes, jacobians or scattering computations. So the arrays in kcarta.param
and scatter.param can be scaled back to size 1, to allow for this

02/18/01        Updated the RTSPEC scattering package with the bugfixed 
                version put out by K.F. Evans on Feb 5, 2001
		
01/20/01        Fixed an uninitialised call to rsplin in FindBottomTemp
                ie need to set yp1,ypn and call rSplin2 before calling rSplin

v1.09a work in progress; not really finished due to time constraints
------
check that       SUBROUTINE Init_DownLook(iAtm,iaaRadLayer,iNumLayer,raVTemp)
in scatter_disort_main.f is correct ... for an instrument at TOA, the 2.96k 
radiation from space is OK, but for an aircraft instrument, we also need to 
add on the downward emission from the upper layers of the atmosphere.
might also need to check this for the RTSPEC

working on my version of the Eddington scattering solution, so that the 
Jacobians for a scattering atmosphere can be computed
         
v1.08
-----
This version has both DISORT and RTSPEC interfaced to the code, to allow for
scattering computations

This means that the namelist $nm_scattr$ section has been slightly extended
There are four extra parameters that need to be set : 
  1) first we have to tell the code which scattering model to use
          kWhichScatterCode = -1 for RTSPEC
          kWhichScatterCode = +1 for DISORT
  
  2) if we are using DISORT, then we have 3 options to speed up the code
       kScatter  = +1, DISORT will do rad tranfer on kDisStep pts 
                        (pts 1,1 + J, 1 +2J, 1 + 3J ... etc where 
                         J=kMaxPts DIV kDisStep
                       The code will then do a linear interpolation of the
                       chosen points interp(raFchosen,raInten) -> (raWaves,I)
                       
       kScatter  = +2, DISORT will do rad tranfer on kDisStep pts 
                       These points are chosen so that they are the lowest 
                       optical depth points (in layer closest to gnd)
                       The code will then do a linear interpolation of the
                       chosen points "interp(raKchosen,raInten) -> (raK,I)"

       kScatter  = +3, DISORT will do rad tranfer on kDisStep pts 
                       These points are chosen so that they span the min
                       to max optical depth points (in layer closest to gnd)
                       The code will then do a linear interpolation of the
                       chosen points "interp(raKchosen,raInten) -> (raK,I)"

     Conversely if we are using RTSPEC, then we set the model used (single, 
       eddington or hybrid) by setting kScatter  = +1 , +2 or +3

  3) for DISORT to run fast, we can set the number of streams used
       kDis_nstr  (defaulted to 16)

  4) for DISORT to run fast, we can set the number of wavenumber points 
     stepped over kDis_Step (defaulted to 50)

11/15/00        Fixed another bug in kcoeffSPL,kcoeffSPLJAC.f. This bug  
                messed things up if mSubLayer ~= 1, mThickLayer = 1 
 
10/27/00        Fixed couple of bugs in kcoeffSPL,kcoeffSPLJAC.f
                One bug did not allow the thicker upper layers to be 
                calculated correctly (using mThickLayer). The other bug did 
                not allow for the ratios of (100/kProfLayer) amounts to be 
                scaled correctly for gases other than H2O,CO2 (because the 
                power of 4 was not applied to these gases)

10/24/00        Introduced a new parameter into *SCATTR, raExp(j), where j is
                the cloud under consideration. If set to < 0 and a cloud is 
                "expanded" from "one" layer to layers (p1,p2), the IWP of 
                these layers is the same. If set to > 0 and a cloud is 
                "expanded" from "one" layer to layers (p1,p2), the IWP of 
                these layers is exponentially decreased exp(-raExp(j)*p1/p). 

10/23/00        Changed RTSPEC so that clouds that occupy completely 
                different regions, can be processed. Eg if cloud 1 is an
                aerosol cloud layer from KCARTA layers 4-5, and cloud 2 is a 
                cirrus cloud from kCARTA layers 43-46, this is handled by 
                setting a "third" cloud from layers 6-42, with IWP=0.0

10/21/00        Fixed a problem in INTERP_SCAT_TABLE1,2,3 where the data
                iw0,iw1 were being 'saved' with the save/data statements,
                instead of being reset to 1,2.

10/11/00        For DISORT or RTSPEC, the code can only output one radiance 
                (at TOA or GND, depending on the start/stop pressures)

10/3/00         For uplooking instrument, DISORT allows scattering from sun 
                at angle other than satellite angle. So we have switched 
                settings of variables for an uplook instr, so that their 
                meaning is more consistent.
                For the nonscattering kCARTA algorithm :
                  raTSpace(i) should always be 2.7K or thereabout
                  if iaKSolar(i) = -1 then sun is below horizon (off)
                  if iaKSolar(i) = 0,1 
                      if satellite view angle = solar angle, then sun in FOV
                      if satellite view angle ~= solar angle, sun NOT in FOV
                Thus raKSolarAngle(i) is very relevant
                Also means there is a slight change to uplook jacobians code,
                  when compared to SRCv1.07 (iDoSolar is now set to meaning 
                  of kSolar, not rTSpace)
                For the scattering RTSPEC algorithm :
                  raTSpace(i) should always be 2.7K or thereabout
                  if iaKSolar(i) = -1 then sun is NOT in FOV
                  if iaKSolar(i) = 0,1 then sun ALSO NOT IN FOV
                     angle
                  thus raKSolarAngle(i) is irrelevant
                For the nonscattering kCARTA algorithm :
                  raTSpace(i) should always be 2.7K or thereabout
                  if iaKSolar(i) = -1 then sun is NOT in FOV
                  if iaKSolar(i) = 0,1 then sun is on, at arbitrary angle
                  thus raKSolarAngle(i) is VERY relevant

10/2/00		*SCATTR is more general in that it "expands" a cloud according
                to user parameters. Eg if cloud is from 259-390 mb, all the 
                user has to do is say cloud has "1" layer, give the IWP/DME
                and these two start/stop pressures ... the code will 
                automatically figure out that there are more than 1 kLAYERS 
                layers used by this cloud. As long as the cloud has sequential
                layering, from TOP to BOTTOM, the code is happy . For example
                the following automatically generates a multilevel cloud, 
                instead of one with 2 layers : 

                caaCloudName='happy little cloud'
                iaCloudNumLayers(1) = 2
                raaPCloudTop(1,1)   = 259.5
                raaPCloudBot(1,1)   = 272.5
                raaaCloudParams(1,1,1) =  2.0e-1
                raaaCloudParams(1,1,2) =  5.0e+0
                iaaScatTable(1,1)=1
                caaaScatTable(1,1)='rayleigh.scatab700_T200k'

                raaPCloudTop(1,2)   = 282.5
                raaPCloudBot(1,2)   = 290.5
                raaaCloudParams(1,2,1) =  2.0e-4
                raaaCloudParams(1,2,2) =  5.0e-4
                iaaScatTable(1,2)=1
                caaaScatTable(1,2)='rayleigh.scatab700_T220K'


9/29/00		Fixed a bug in GetAbsProfileRTSPEC for an uplooking
                instrument .... there was a mess up when the temperature
                of the surface was mistakenly indexed into TOA

9/29/00		Code explicitly does not allow solar in RTSPEC 

v1.07
-----
This is the version that will be used with our new kCompressed Database.
We will allow "two new" gases with this, the self part and the foreign part 
of the water continuum. The profiles for these will obviously be the same
as that of water vapor. Temperature and "amount" Jacobians will be computed
for these gases, which will have gasIDs 101 and 102. The CKD data is in 
binary files, and so kcarta.param needs the user to set the path to these
binary files.

One can only use the self and foreign continuums if water is one of the
gases in the profile, and if kCKD >= 0 (ie water continuum is turned on).
If one only wants to see the continuum (eg dump out path spectra of
self continuum only), one can easily tailor the driver namelist file to
do this eg set water (gasID = 1) weight to 0.0

02/20/10        Fixed a small bug in diffusive backgnd thermal. This would 
                affect you in certain channels (2230 - 2280 cm-1) only if
                you used more than 1 radiating atmosphere

10/27/00        Fixed couple of bugs in kcoeffSPL,kcoeffSPLJAC.f
                One bug did not allow the thicker upper layers to be 
                calculated correctly (using mThickLayer). The other bug did 
                not allow for the ratios of (100/kProfLayer) amounts to be 
                scaled correctly for gases other than H2O,CO2 (because the 
                power of 4 was not applied to these gases)

9/11/00         Fixed a bug in Addcontinuum (caught by g77) .. when checking 
                for continuum values < 0, a variable was not set.

8/18/00         Rewrote some parts of klayers so that AbSoft and g77 can
                compile and run that code

7/28/00         Slightly rewrote AddContinuum so it could run faster

7/12/00         Fixed a bug in one of the arrays (iagases was specified with 
                size kMaxGas in some routines, kGasStore in others; it has 
                now been set to kMaxGas in all routines)

7/4/00          Modified the scatter input routine (in n_rad_jac_scat.f) to
                allow user to use same scattering table for different layers 
                of atmosphere. This might be hazardous, as cloud temperatures 
                used in the Mie scattering routines might not be consistent 
                with some of the atmosphere layers used by kCARTA. However, 
                this will easily allow one scattering table to be used with a
                multilayer cloud

7/2/00          Fixed bug in upward looking radiance; raInten was NOT being 
                set, and so if doJacobOutput = 1, would give bizzare answers
                Note these changes have NOT been tested for sun in FOV 

7/2/00          Fixed bug in doJacobOutput for uplook instr .... had to 
                correctly set variable iLower in main part of jac_up.f 

7/2/00          Fixed bug in jac_up; if kJacobOuput=1, it was not 
                computing d(BT)/drad

6/13/00         Cleaned up a bug in reading scatter namelist section

6/13/00         Cleaned up a bug in setting scatter layer temperatures

v1.06
-----
Major change is to use namelists instead of kcarta driver files
To maintain backwards compatibility with previous versions, all the s_* files
that were previously used to parse in the driver input files, are now grouped
separately in directory NAMELIST. When the code is compiled and linked, it 
produes an executable that can parse in the old input driver files, and
write out a namelist file that kcartav1.06+ can use

Note that this namelist producer still does quite a bit of error checking, 
as is the case for the old s_*.f files; however, not all error checking is
done thoroughly eg in output section, there is no error checking done.

The new namelist reader files do the same amount of error checking as did the
s_*.f files

Note that ReadNewData will NOT add on water continuum if asked for ie it  
assumes that the externally supplied water spectra is just the pure lineshape 
(lorentz/voigt/local) PLUS the necessary continuum 

7/12/00         Fixed a bug in one of the arrays (iagases was specified with 
                size kMaxGas in some routines, kGasStore in others; it has now 
                been set to kMaxGas in all routines)

7/2/00          Fixed bug in upward looking radiance; raInten was NOT being 
                set, and so if doJacobOutput = 1, would give bizzare answers

7/2/00          Fixed bug in doJacobOutput for uplook instr .... had to 
                correctly set variable iLower in main part of jac_up.f 

7/2/00          Fixed bug in jac_up; if kJacobOuput=1, it was not 
                computing d(BT)/drad
 
4/18/00         When reading in radiance section, kCARTA checks to see if
                surface temperatures are ridiculous! Or if emissivities are < 0

4/4/00          "pprof" in PrepareOutput (file s_writefile.f) was mistakenly
                outputting kProfLayer+1 values, instead of kProfLayer values
                This has now been fixed, ; also affects readkcarta.f/m and 
                readkcstd.m

3/23/00         Parameter KXsecFormat tells code whether or not to
                use kCompressed files (+1) or the Xsec binary file (-1)
                for the minor cross section gases (gasID 51-63)

3/15/00         Sent files through g77, Absoft77 to clear little errors
                g77 does not seem to be too happy with namelists in that it
                wants different names for subroutine arguments, as compared
                to namelist symbols

3/14/00         File "DumbFile" is a temporary file that is created at runtime

v1.05
-----

Major changes are 
1) to treat the cross section gases the same way as the rest of the gases ie 
   use a compressed database for them as well
2) to use the water vapor continuum in the same fashion as that of the CKD
   model ie use kwater=(klorentz-basement) + CKD

3/1/00          Fixed subroutines calcon2.3,2.4 so that the self continuum
                contribution is smoothly interpolated across 10 cm-1 chunks

2/24/00         Fixed kcartamain.f so that kStdFlux is closed at end of run

2/24/00         Fixed routine in rad_scat.f so that raInten is not set to 0.0
                and thus driving part of the jacobian calculations nuts!

2/14/00         Making interface_rtspec more clear about upward/downward
                satellite, by being more careful about the sign of muobs

2/10/00         Instead of reading in a (large) text file that contains the
                scattering data from sscatmie.f, kCARTA can read in a 
                smaller binary file. This file is produced by running
                program "translate" found in the RTSPEC directory.
                This involves setting new parameter "binary" to +1 in
                the *SCATTR section

1/11/00         Rewriting kcoeffMAIN.f so that there no longer are 
                different calls for the cross section gases. This means calls 
                to routines calq,calxsc have been removed

11/3/99         Adding on CKDv2.4 .. parameter kCKD can now be -1,0,21,23,24
                Subroutine xspl() added to kcartamisc.f so that the coarse
                grid of S296,S260,F296 data can be immediately splined
                onto the finer kCARTA grid. 

                However, note that this feature cannot be used in SRCv1.04, 
                as the water lineshape in the database was not computed using 
                the local definition ie can only use CKDv0,21 or 23 in 
                kCARTAv1.04-

                There is no need to use h2o*_wb.f to complement fixing the 
                CKD2.3 code, as kCARTA database was computed using Lorentz 
                lineshape instead of local lineshape (=lorentz-basement).
                Thus all we have to do is to use the continuum code from
                GENLN2, with the modified h2o*.f data blocks (which add on
                the basement term).

v1.04
-----

The radiative transfer routines can now do one of the following three :  
  1) radiance, flux and jacobian computations for a clear sky
  2) read in external spectra for a gas; do radiance, flux computations
  3) radiance computations for a scattering atmosphere for a downlooking
     instrument. Solar contribution not included. Backgnd thermal not
     included. Only the radiance at TOA can be output.

11/19/99        Fixing bugs in the interface to rtspec.f
                Also adding on some subroutines so that clear sky radiative
                  transfer routines of rtspec.f, though slightly different, 
                  give answers that are within 0.05K of kCARTA answers ... 
                  this is especially important wrt background thermal.
                Note that if instrument is low in atmosphere, the scattering
                  code does not accurately add on TOA-instrument 
                  radiance -- as long as instrument is higher than the 
                  boundary found in function FindBoundary(raWaves), this 
                  will give < 0.05 K error, else error could creep upwards 
                  as arccos(3/5) is used instead of more accurate 
                  diffusive angle
                Remember that rtspec cannot include solar contribution
 
10/28/99        Fixed two bugs in CKDv2.3, after looking at LBLRTMv50.1
                and v5.10

9/28/99         Include solar spectrum into radiance computations. 
                This means that *RADNCE options changed slightly --- now 
                for a downward looking instrument, parameter iSolar means :
                    -1 => no solar
                     0 => use solar, at T=5600K
                     1 => use solar, with more detailed spectrum

                For an upward looking instrument, Tspace now has 2 options
                   T > 0 use temperature as specified
                   T < 0 use sun in FOV, with spectrum obtained from 
                     datafiles
                  Thus eg T = 2.96   ==> no sun in FOV
                          T = 5600   ==> compute solar spectrum using 5600K
                          T = -1     ==> use solar data files

                Path to the data files for solar spectra are given by
                parameter kSolarPath in file kcarta.param

9/9/99          Changed *SPECTR so that new spectroscopy for more than
                one gas can be read in per run. Also fixed it so that
                if any of the new gases is water vapor, you *can* add on the
                required water continuum using kCARTA

8/19/99         Fixed a bug in the parameters for one subroutines in 
                in file kcoeffSPLJAC.f (iDoDQ was an extra parameter in the
                subroutine definitions, and has been taken out)
                WaterAmountJAC (v1.04) === SplineWaterDerivativeSPL (v1.01)

8/19/99         Removed the "implicit none" definition in subroutine
                calcon23 in calcon.f and put it in the Makefile
 
8/17/99         Fixed a bug in the indexing of d(BT)/dq*q downlook jacobians
                This bug fix also is done in v1.01 

6/30/99         Fixed a bug in the diffusive approximation (backgnd thermal)
                computation --- there was a mixup between 100 and kProfLayer

6/17/99         Fixed a bug in satellite viewing angle conversion

5/25/99         Put in *SCATTR section into the file s_scatter_spectra.f
                Also have new parameter kMaxClouds in kcarta.param

5/20/99         Interfacing K.F.Evans rtspec.f code with kCARTA
                    Frank Evans  University of Colorado   September 1998
                    Co-authors:
                      Merritt Deeter  (single scattering layer routines)
                      Aaron Evans     (multilayer code, spectral segments)  
                scatter.param sets array dimensions in rtspec.f to be the 
                same as those in kcarta.param

5/19/99         Put in *SPECTR section into file s_scatter_spectra.f
                This section allows the user to choose ONE gas, and have 
                kCARTA read in LBL spectra produced by some other code
                for defined spectral regions. These regions have to overlap 
                the kCARTA chunks eg 705-730, 1255-1280 etc
                If this option is used, then JACOBN cannot be used!!
                Also, the code will simply read in the spectra, and weight 
                it appropriately ... it will not do any further scaling. In
                other words, it is the users responsibility to make sure the
                spectra read in were computed with the correct layer amounts
                and temperatures.

5/4/99          Bug in SetEmissivity in rad_misc.f has been fixed

5/3/99          The gauss-legendre weights for accurate background thermal
                and flux computations, have been moved to gauss.param

4/30/99         Parameter kProfile is no longer in use
                It is replaced by parameter kFlux : 
                -1 : default (no flux computations)
                +1 : the radiance flux for each layer in current atmosphere
                     is computed, as fcn of wavenumber.
                     Results are in units of radiances
                +2 : the radiance flux for each layer in current atmosphere
                     is computed, as fcn of wavenumber. These fluxes are 
                     then appropriately multiplied to change units to 
                     kelvins s-1 (mult=1/(Cp density dz)). 
                If results are dumped to screen (using the command line 
                arguments), the flux computations are output in file 
                flux.dat. Else they are saved to radfilename_FLUX
                   kcarta.x driverfile ==> 
                      rad results, jacob results to screen; 
                      flux results to flux.dat
                   kcarta.x driverfile radfilename jacobfile ==> 
                       rad results to radfilename
                       jacob results to jacobfile
                       flux results to radfile_FLUX
                Reader readflux.f in UTILITY, or readflux.m in MATLAB, can
                be used to read in the flux files

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v1.03
-----

this allows the user to have more or less than 100 layers!!!!!!!!
in other words, can subdivide bottom AIRS layers, and thicken top AIRS
layers. Use with profiles made by KLAYERS/LookUp1.03
The prototype for this code is kCARTAv1.02 and KLAYERS/UpLook1.02

**** This version is a significant rewrite/ rearrangement of the code ****

4/23/99         If the CKD abs coefficients are computed, and found to be
                slightly less than 0 (k <= - 1e7), then they are set to 0, 
                and the code keeps on running with a warning.
                If they are large and negative, then the code halts.
                Ditto for the cross section gases.
                Similarly, the code stops if it finds negative temperatures,
                gas amounts, pressures or partial pressures in either the
                reference profiles or actula profile.

4/20/99         Boundary conditions in *RADNCE no longer affect the mixing 
                table. This means that the same *WEIGHTS set can be used 
                for different atmospheres. This has led to a rewrite of
                the radioance and jacobian routines.

4/19/99         renamed and/or rearranged many of the strings*.f files
                as well as the radiance and jacobian files

4/14/99         Found a bug in radiance for uppermost fractional layer
                in downward looking instrument, in subroutine 
                RadianceInterpolate. Cleaned up/ rewrote the radiance 
                interpolation subroutines for up and down look instruments.

4/14/99         Found a bug in backgndthermal ... if you set kBackThermal=0,
                kCARTA always used acos(3/5) in upper layers and more 
                accurate angle in lower layers, even if you asked it to 
                use rAngle

4/8/99          PrepareOutput also dumps out pressure levels and parameters 
                M1000mb,M100mb,MSubLayer,M50mb,M10mb,MThickLayer
                So a "enhanced" readmainheader.m, .f  set of readers needed

4/6/99          New parameter in kcarta.param allows user to put in a 
                profile that has more or less than 100 AIRS layers!!!!!!
                This is parameter kProfLayer <=> kMaxLayer
                The program splines in temperature AND pressure!!!! onto 
                this finer and not so finer layering grid

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v1.02
-----

this allows the user to have more than 100 layers!!!!!!!!
in other words, can subdivide bottom AIRS layers to make them finer.
Use with profiles made by KLAYERS/UpLookSrc1.02

3/30/99         Fixed a bug in *WEIGHTS. This means couple of relevant  
                subroutines in strings3.f have been updated

3/10/99         New parameter in kcarta.param allows user to put in a 
                profile that has more than 100 AIRS layers!!!!!!
                This is parameter kProfLayer >= kMaxLayer
                The program splines in temperature AND pressure!!!! onto 
                this finer layering grid
                The porogram also needs the new pressure levels grid!!!!!

                Also variable kMaxLayerJac has been renamed to kProfLayerJac

3/14/99         Variable kNewRefProf is a text string that says where to
                find the new reference profiles

                rdprof.f has been renamed strings4.f

2/17/99         kcoeffSPL.f split into two files : 
                kcoeffSPL and kcoeffSPLJAC.f where all non Jacobian code is
                in the first file
                SplineWaterDerivativeSPL  renamed to WaterAmountInterpolate
                WaterAmountInterpolateSPL renamed to WaterAmount_TempJAC

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v1.01
-----

COMMENT : changes made to allow user to redefine his surface temperature. 
This has meant that parameter 7 (that was UNUSED in v1.00) has been renamed 
from kCO2 to kSurfTemp, and now has 2 different meanings : -1 use the 
specified surface temperature, and +1 use an interpolated temperature 
PLUS an offset that is set by the surface temperature

11/20/98   	If kRTP ~= 1, meaning of parameter 7 (kSurfTemp in *PARAMS) is now
                -1.0 : use surface temperature set by user in *RADNCE
                +1.0 : use surface temperature interpolated by pressure 
                       levels and added to offset set by user in *RADNCE
                       Note that the interpolation is smooth in AVERAGE
                       pressure, and not in actual pressure

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v1.00
-----

COMMENT : minor changes to ensure the *OUTPUT section has first paths,
then mixed paths then radiances specified (ie order is important).
Also, the short form INPUT profile is no longer allowed ie kProfile=+1
only. This is because we need correct partial pressures when computing
the variable water widths. This also makes the use of parameter 7
irrelevant, and the value is now fixed at 1.0

10/21/98        Corrected vaconv (satellite local angle computation)
                in that everything now is consistently in km : kLayers
                profile, sat height in *RADNCE etc
8/26/98         The user has to be careful in specifying the order of
                output data in *OUTPUT (so that the readers are not
                confused)
8/26/98         The meaning of parameter 6 (kProfile in *PARAMS) is now
                -1 : read in specified KLAYERS user profile ONLY
10/5/98   	The meaning of parameter 7 (kCO2 in *PARAMS) is now
                1.0 : the multiplier for CO2

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


v0.99
-----

COMMENT : revision to change the meaning of parameter 6 in *PARAMS. This 
meant quite a few changes in strings2.f, as the previous subroutines were 
geared to expect only water and ozone ........

7/7/98          The meaning of parameter 6 (kProfile in *PARAMS) is now
                -1 : read in user supplied profile. For whatever gas 
                    specified in MOLGAS/XSCGAS but not found in the 
                    profile, just read  in the reference profile
                    If the user specifies a profile file to be read in,
                    the temperatures of the extra gases (read in from the
                    reference profiles) are that of water or the first   
                    gas found in the user supplied profile.
                +1 : read in specified regression profile  
    
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v0.98
------

COMMENT : revisions mainly to add CKDv2.3
          have option 8 in *PARAMS to set d/Dt=Planck or tau or both
          also rewrote the output stuff slightly 

5/14/98         Rewrote wrtout, wrtout_head so that the program only opens
		and closes the output and jacobian binary files once
		This was to keep the poor Absoft compiler happy (pshaw!)

5/13/98		Rewrote temperature Jacobians so that option 8 in *PARAMS
                sets d/Dt=Planck or tau or both (-2,-1,0); default=0
                Note that if you choose kTempJac other than 0, than your
                gas jacobians should not become become messed up.
                Also this option only works for down look instr (ie has no
                effect on jacobians for uplook instr)

5/13/98		fixed a bug in *JACOBN reader that did not allow this
                section to be parsed in if STATIC turned off

4/29/98		Rewrote some subroutines in strings2.f so that if 
		kProfile = 1, the program does NOT need MOLGAS to have
                water and or ozone

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

v0.97
------

COMMENT : revisions are mainly to increase wavenumber spread from
605-2805, to 205-605,605-2805. These two regions are kept separate
since the wavenumber point spacing in them will be unequal (0.001 in
205-605, and 0.0025 in 605-2805). However, the number of points in each
k-comp file is kept at 10000 (hence 10 cm-1 in the first region, and 25
cm-1 in the second region).

This means a lot of the core subroutines (eg GetFileFreqs in misc.f was
rewritten),  as was the main loop structure in kcartamain.f. We also 
rewrote subroutine wrtout, so a new set of readers is needed.

kOutBlock has been removed !!!!!!!
in other words, can only dump out 10000 pts each time!!!!
iFrlow,iFrHigh=1,kMaxPts

*XSCGAS has been changed so that the name of xscdata file is no longer 
in this section; instead it has been moved to kcarta.param

kNetCDF has been removed. the code can only output binary Fortran files.
We will probably write a fortran --> NetCDF translator in the future

kCARTA is now command line driven 
  kcarta.x [infile [outfile [jacfile]]]
thus *OUTPUT no longer has caOutName
and caJacobName is no longer caOutName + 'JAC'
errors are written to stderr
warning meassages are written to kWarnFile == 'warning.msg' or '/dev/null'
header.head no longer exists; it is part of warning.msg

5/13/98		fixed a bug in *JACOBN reader that did not allow this
                section to be parsed in if STATIC turned off

4/29/98         Fixed a bug in the d/dT temperature Jacobian (jacob.f) 

4/27/98		Main loop slightly rewritten so that subroutine Initialize
		only called if the abs copeffs DNE for the particular
                10000 pt chunk. In addition the call to set iaPaths has
                been moved so that this loop called IFF we want paths to
                be output

4/27/98         Fixed CrossSection() in kcoeffMAIN.f so that we don't have
                to worry about initialized stuff in kcartamain.f

4/27/98		Fixed writesummary.m in ../MATLAB

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
